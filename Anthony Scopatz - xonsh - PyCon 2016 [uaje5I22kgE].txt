Hello, everyone.
Our next speaker will be Anthony Scopats, and he will be speaking to us about a new command
line shell that you might be interested in.
So please join me in welcoming Anthony.
Thank you.
All right.
All right.
Hello, everyone.
I'm Anthony Scopats, and this is Conch.
So what is Conch?
Conch is meant as a general purpose shell language to replace things like bash or fish
shell, but it also is simultaneously a Python superset language.
And some of the features of this are that we have no external dependencies other than
the Python library, Python itself, and so if you have Python, you also have the ability
to have Conch.
Because of that, we support the big three major platforms, Linux, Mac, and Windows.
And sort of the purpose of Conch, at least in my mind, is to trick scientists and engineers
into being more reproducible, but I don't have time to go into that in this talk, so
you'll just have to talk to me about that later.
And there's a lot of fancy features, especially if you're willing to install some other code,
and we'll see some of that in this talk.
So before that, I just wanted to give some motivating examples between bash and other
SH languages and what we have available in Python.
So here's a simple example of a for loop, right, in an SH-based language.
We have to do a little more for a for loop.
Not a big deal.
Our Python version we all know and love.
How do I screw this?
Okay.
Yeah.
Okay.
Well.
I can do this, maybe?
No.
All right.
If they promised me something.
There we go.
Yes.
No.
Okay.
Yeah.
There is no other resolution that works, so.
That works.
Okay.
All right.
Well, we'll go from here.
All right.
All right.
Sorry.
The best-laid technical plans.
Woo!
All right.
Live debugging.
This is what we're all about.
So another terrible bash example is testing whether a file exists.
There's a beautiful Python API for doing this.
In shell-based languages, there's a lot of syntax and some weird commands, and they overlap
with a bunch of other syntax, and it's hard to keep straight.
You almost always have to look this up.
The last example is just tokenizing a string by a non-white-space character.
In Python, this is super easy, and in shell-based languages, you have to set global state and
then reset it back after you're done tokenizing the string.
It's an absolute disaster.
Okay.
So you're all motivated right now.
So the stages of conch development sort of went as follows.
There was this initial conceptualization stage where this situation cannot stand, so what
if you had the ability to take the best parts of Python and the best parts of bash or some
other language?
And then that inevitably led into actually looking up how to do this, researching things
like Ply and other parser libraries out there, and coming to the realization that maybe it
actually can't be that hard, right?
And that inevitably, once you have all the pieces in your toolbox and you know how to
do it, you see the way to do it, you go ahead and you feel that you must build this library.
And that's kind of where we are at emotionally with conch right now.
And the following stages of anger, regret, and acceptance are sure to follow any day
now.
So without further ado, let's actually dive into what the language actually looks like
in some examples.
So this is best done in a demo, so prepare yourself for some really fast typing here.
All right.
So the first thing you'll notice about conch is that it's really meant to be used as a
general purpose shell.
So the prompt looks like what you would see in other languages, right?
It has the who you are and where you are in the file system, et cetera.
But on the other hand, it really is Python.
So you can do things like add two numbers together, what a novelty.
Or you can import modules.
That's kind of nice.
And access members of that module.
Or whoops.
Ah, okay.
I'm all messed up here.
Sorry.
Yeah.
Sorry.
The re-res messed me up.
Or you can create dictionary literals and access members of those dictionary literals
or do more complex statements like if statements, et cetera.
Or for loops or while loops.
Or define functions in your current execution context.
And then go ahead and call those functions, right?
And some very real sense, conch is Python.
But it's a little more than Python because we add a bunch of shell-like primitives to
the Python language.
So for instance, we add a dollar sign operator that works like it would in bash where it
looks up variable names in the environment.
And this is very similar.
But the difference here is that we're able to go ahead and set variables like you would
in Python, set environment variables like you would in Python, and then access those
from sub-process commands like you would in bash.
So conch keeps a very clear notion of whether you're in Python mode or sub-process mode.
And we'll talk more about this in the coming slides.
But you can access and modify the environment in a sort of more Pythonic way.
And additionally, because it's Python, things like your path are really a list of strings.
They're not some crazy, colon-separated list of strings.
And this works for any type.
You can have any structure.
You can have your own custom class that you stick an instance of into your environment
and then access it that way.
So okay.
So that's easy peasy.
Additionally, we add a dollar sign curly brace operator, and what this does, it's distinct
from the same operator in bash.
So here we look up the environment variable based on an expression that's been evaluated
inside of the curly braces.
And so, you know, you can use this to programmatically look up variables if that's something that
you want to do.
And of course, all of this stuff is available in sub-process mode as well, so you can echo
till the cows come home.
Additionally, if you look up in ellipsis, so if you do dollar sign curly brace dot dot
dot and curly brace, this is a reference to the environment itself.
And so you're able to do things like test for containment or access methods of the environment
just by using dollar sign curly brace ellipsis.
Okay.
Moving right along, it wouldn't be a very good shell if you couldn't change directories.
So here we've just changed directory into the contra-pository.
And as you see, when you do that, the branch name pops up appropriately colored.
This works with both mercurial and git.
And so it's really sort of a developer-facing tool in that regard.
It's meant to have all of these things that you would like and use.
Additionally, if we go ahead and type git-stah and then hit tab, you'll see that we have
this drop-down menu of all the tab completion options that are available.
And in particular, this is actually just eating the bash completions that have already been
written.
So we don't have to necessarily rewrite all of the completers for all the commands out
there.
They're just accessible to conch.
And this works even on Windows, which is kind of cool.
So let's go back to the home directory.
And additionally, we have this dollar sign parentheses operator, which does pretty much
exactly the same thing that it does in an SH-based language, in that it returns to you the result
of a sub-process as a string.
No big deal there.
Additionally, you can, this is available in both Python mode and sub-process mode.
So you can do dollar sign parentheses to capture the sub-process as a Python variable
and then use Python string manipulation to modify that string however you want.
And that's just a single expression.
Additionally, we also add an exclamation point parentheses operator.
And what this does is it returns to you a special completed command object that contains
not only the standard out, but all of the metadata about how that command was run and
what its results were.
And furthermore, we add an exclamation point square bracket operator that does pretty much
the same thing except that it streams the results to you.
And then after that, you know, after you have this X, you're able to access things like
the time stamp for when the command started and stopped, the alias that the command was
run with, and we even implement appropriate Boolean semantics.
So we look at the return value of that completed command and test whether it's equal to zero
and return that.
Okay.
So far what we've seen is sub-process mode in Python mode, but of course we conch allows
us to go the other way.
And so say we have two Python variables here.
If we do echo at parentheses, we evaluate what's inside of those parentheses as a Python
expression, and then convert that to a string and then pass that down as a single argument
to any sub-process that we want to call.
And additionally, you know, this works for anything that's string convertible, so you
could echo two plus two and actually get the result that you're interested in.
And furthermore, if you pass in a list of expressions, each of those expressions will
get sent down to the sub-process as individual arguments in the argument list.
And obviously this stuff is perfectly nestable, and so if you're in Python mode and then you
go into sub-process mode, you can go back into Python mode and everything works out just fine.
Moreover, you can use this at parentheses stuff to programmatically determine what command
you want to run, whether or not that's useful or how much obfuscation you like is up to
you.
But the place where this at parentheses stuff really shines for me is the fact that you can
now use normal Python looping semantics to loop over a set of data and then run over sub-process
commands very, very easily, like we see in this example here.
Okay.
All right.
Next, it wouldn't be a very good shell, of course, if you couldn't pipe things, so we
implemented piping.
Similarly, it wouldn't be a very good shell if you couldn't redirect things, so redirection
to a file or from standard error to standard out, and all those things are available as
well.
So, okay.
Additionally, we added by popular demand the ability to and and or sub-processes together
using pythons and and or keywords.
All this is doing is it's wrapping those sub-process commands in exclamation point square bracket
before it runs them.
And don't worry if you have a lot of muscle memory and you want to use ampersand ampersand
and pipe pipe, you're welcome to do so.
I won't hold it against you.
So, and the place that this is particularly useful is if you want to test if a file exists
and that a file doesn't exist and that another file doesn't exist, if you do that, you'll
just get back the appropriate boolean, so, and this is all, you know, using the normal
kind of Python and and or and grouping, parenthesis groupings and negation semantics that we all
know from Python.
Additionally we add a regular expression file globbing using back tick, so anything in the
back tick is compiled as a regular expression and then sent down to either the sub-process
or it returns a list of strings in Python mode.
So we could write more complicated regular expressions, so if we, initially we were just
looking at all the Python files in a directory, but if you know we wanted to look at all the
Python files that didn't include an underscore, that's easy to represent as well.
And to just show that this works in Python mode, we can go ahead and take the length
of that regular expression.
Okay.
Like IPython, we add a question mark operator to give you help on whatever object you ask
for help on.
No big deal there.
We also add a super help operator, so you can do question mark, question mark, and what
this does is it goes and tries to find the source code that the object was defined with
and in conch, we go ahead and syntax highlight that source code for you as well before we
print it.
So, okay.
Additionally we have an aliases mapping, so this just maps command names to the command
that you want to run, nothing super complex there except for the fact that we have a few
different forms of aliases.
So we have the normal list of strings-based aliases that you would see in a bash or in
other kinds of shells.
But since we're Python, we also have the ability to take functions as aliases.
So here let's just define a little alias that takes a lambda that accepts the standard
args, except an argument list and a standard in, and here we're just going to ignore that
and return a string, no matter what.
You can also return standard error and return code if you desire.
And so when we go ahead and run this command on the command line, we just get that string
printed out, but this, so maybe doing something a little more interesting if we create another
lambda that actually reads from standard in and maybe formats a string using Python string
formatting and then returns that result.
So here, once we have this set up, we can go ahead and echo a name and then pipe that
to our new alias and we see the ominous message that we would expect.
Okay.
All right.
Additionally, Conch has a very well-defined notion of what it means to be a foreign shell.
And so just as an example here, here's a little bash script called owl.sh that does a few
different things.
The first thing that it does is it exports an environment variable, it defines an alias,
and it also defines a bash function.
Now in Conch, we add a source bash command that allows you to source this bash file in
exactly the same way that you would source it in bash.
And so if we look, we can see that this environment variable is loaded into the Conch environment
when we source that file.
Additionally, we get the alias as you would expect.
And we can even call this bash function in exactly the same way that you would call
it in bash.
And this all just works.
And so this is implemented currently for bash, zshell, and command.exe.
And clearly, there's still a big fish in the room here.
Of course, another thing that would make Conch not be a very good language is if you didn't
have a file format.
So here, we are showing just that same al.sh script written in the .xsh Conch format.
And additionally, we've added a Python function that times a ping command and then returns
the result.
So if you go ahead and source al.xsh, you get that time ping command loaded into your current
Python context, and it runs just fine.
Additionally, Conch also has import hooks for any .xsh file.
So you can go ahead, and those are easy to load thanks to Brett Cannon and other people.
And you can just, if you prefer to import owl and then do owl.timeping, you're welcome
to run code that way.
Okay.
It's worth mentioning that Conch has a very rich and detailed notion of what history is
that I don't have time to go into here.
So you're just going to have to look up the docs on your own or talk to me afterwards.
And this was kind of put in there for some of these reproducibility concerns that I mentioned
before.
Okay.
That all being said, Conch, the purpose of that was to show you that Conch really is
Python, but it also is meant to be used as a general purpose shell.
And so there's a more detailed translation guide on the website that you're welcome to
check out.
And how does all of this stuff work?
Well, it works like most languages work.
So we go through a number of common phases.
So we have a tokenizer, a lexer, a parser, compilation, and execution stages.
But the thing that's different is that Conch inserts this syntax tree transformation phase.
And this is super important.
So just to go through these one by one, the tokenizer and lexer are a little more complicated
than you would think because Conch has to keep track at a very deep level of whether
it thinks you're in Python mode or in sub-process mode.
So Python is not whitespace sensitive inside of an expression.
So the three ls-l examples appear all compiled to the exact same Python code.
However, sub-process mode is exactly whitespace sensitive.
So these three ls-l expressions appear compiled to three distinct pieces of code and have
different representations and would do different things.
So we need some way of resolving the ambiguity between Python's whitespace insensitiveness
and sub-processes whitespace sensitive aspects, which we'll get to in a couple of slides.
The parser is written in ply.
And what the parser does is it produces a syntax tree of normal Python AST nodes.
And so when I say Conch is Python, it actually does produce the same exact syntax tree that
if you called AST.parse, you would get from the Python standard library.
And this is really useful because we can just hand that syntax tree off to functions like
exec and compile, and it's then the Python interpreter's job, and we don't have to care
about it anymore.
And to make all this work, we shove a bunch of things into built-ins, so it's yours.
So the syntax tree transformation phase is really here to resolve this ls-l ambiguity.
And so this has two sub-phases.
It has a first phase, which is context insensitive, and then a second phase, which is context
sensitive.
And so to keep this clear, we try to reduce this to just a couple simple rules for what
it means to do context-sensitive parsing so that you can gain an intuition about how
a command is going to work or when it's going to run.
So the rules are basically if the leftmost name is not in the Python context or Python
scope, and that expression as a whole can be parsed in sub-process mode.
So if the ls is not a Python variable, basically, then we'll go ahead and wrap it in exclamation
point square bracket.
And if the leftmost name is in the Python scope, then Python always wins, and we parse
it as Python.
And if it doesn't compile with either Python mode or in sub-process mode, then it's a
syntax error, and we raise it as such.
And if you want to avoid this, you're welcome to always type exclamation point square bracket.
It's your fingers.
Compilation and execution, nothing new and special here.
So we just hand it off to the Python interpreter.
So that being said, I wanted to show you some more intense examples about sort of the things
that you can do with conch now that you have this language available.
So here's a ridiculous way to really obfuscated way of typing ls-l using all the conch syntax,
sort of a silly example.
I guess my thing is lost here.
But another motivating piece is that you have the full Python library.
You have all the Python ecosystem and libraries available to you, and you can directly pipe
things.
Well, I'm going to have to make this a little bigger, I'm sorry.
Yeah, so sorry if it gets cut off.
So you can directly pipe things from the Internet.
So say you wanted to go grab the conch license, you can take nltk and pass the result directly
into nltk and get the first seven sentences or so as a list.
This is a single Python expression.
This is also useful in, well, this is not working out, I'm sorry.
Sorry if it gets cut off.
So you can also use this to grab a, say you have some JSON API from the Internet and you
want to go grab that.
You can use curl to grab that from the Internet and then directly pass that into JSON.loads
and use that to format a string.
So if you deal with a lot of JSON APIs, this is all done as a potentially single expression
and it will print you that message right away.
So that's something cool that can be done.
Additionally, conch has a very well-developed notion of colors and color management.
And so this was put in for a couple of reasons, like perhaps you're on a terrible system with
really bad color styles, but also sort of the more important aspect is for people who
may be colorblind, this is really helpful because you are able to select a color palette
that works for them.
So finishing up here, while I'm on the subject of colors, just going to jump ahead here, if
you import NumPy and Mapplotlib, we have a third-party extension system that lets you
that we have written hooks for a Mapplotlib in and will allow you to just dump out the
current figure as via background colors.
So bam.
If you like really pixelated graphics, I guess.
Just to finish up, we believe that conch is a usable tool right now as a shell, there's
obviously more to do, we're at version 0.3.2.
Please we love to have a community of users and contributors, so please, you know, try
it out and let us know how you feel.
And just remember that a vote for the shell in 2015 yields conch in 2016.
Thank you very much.
Thank you very much, Anthony.
We do have time for some questions, so there are two microphones on either side of the
room.
Please feel free to line up.
And Anthony can answer.
We'll start on this side.
Hey, great talk.
I think I'm looking at my new shell.
But one question, does there, is there the prompt command?
The prompt command.
Yeah, so like every time you hit enter, it can run a command as it, like, to create your
prompt?
Yeah, so we...
Like PS1 command.
Yeah, yeah.
But you can mod...
There's actually a prompt environment variable that you can totally customize and modify,
and this is all in the docs, and so, yeah.
Okay, so as I go, it can...
It's just called dollar sign prompt, and there's huge documentation on how you color that and
what aspects you want.
There's even a write prompt if that's something you're interested in.
Yes, that is.
You can customize the multi-line prompt.
Okay, awesome.
Thank you.
Thanks.
Oh, thank you.
Okay, I've got two questions.
First, is this a strict superset of Python syntax?
Yes.
And second would be, have you implemented process substitution from bash and corn shell?
Yes, to both of those.
Awesome.
Now, the process substitution may be buggy still, but it has been implemented, so...
Just a quick question on performance compared to other shells.
A few words you can say about that.
Yeah.
So, startup times currently suck, but we're working on that, and they got worse on the
last release, sadly, but we know how to fix it.
The actual performance of different pieces, so the compilation execution stage is actually
relatively quick, and even doing things like tab completing is actually much faster than
other shells because we keep in memory sort of all of these components.
So, in general, the actual execution while you type is not so bad, it's just the startup
time that we need to deal with.
Thank you.
Does it work inside a Jupyter notebook?
Yes, it does.
We ship stock with a Jupyter notebook hook.
Does Khan play nicely with virtualM's?
It does, and we also have commands, so there's been a lot of talk about this, and so worst
case scenario, we also ship with some virtualM commands as well, but a lot of the foreign
shell interface stuff is actually motivated by virtualM.
Now, virtualM does some ridiculous things, and that makes it difficult, so if you're
running into those, we have alternatives for you.
Perfect.
Thank you.
Amazing products.
Why do you think it is that it took us until year 2016 to get to something like this, and
how long do you think it'll be before this becomes standard and then before we can settle
on something a little bit less Frankenstein's monster feeling and more just like pure shell
awesomeness, which is where this is taking us?
So why do I think it took until 2016?
It was that moral compulsion to act, and probably the fact that no one wanted to re-implement
the Python language spec, which I did as a stress reliever project while writing a book.
So you're right here.
And then the, so you're writing a book can be effective.
And then how long does it take till this becomes standard, hopefully tonight?
Woo!
Yeah, so this is insanely awesome.
What's the configuration scheme and does it work with like bash profiles, bash RC, any
of that?
Yeah, actually, so another reason for the foreign shell interface is that by default,
it will load your bash profile and everything, but you can set it up to load your profile
from any other shell that we have hooks for, or set it up to load profiles from no shell.
And so, yeah, it's, we've rounded that out.
I noticed when, well, when you ran LS earlier, the output was a little bit slow to come through.
Is that because of the Chrome extension that you're using?
Or is that a performance thing?
Oh, this was not live.
This was me fake typing.
Yeah, yeah.
Yeah, I was not going to do that live.
Did you see that URL for the weather underground?
Come on.
Thank you.
I was wondering if, in addition to standard libraries, can I install like requests and
then suddenly start using requests as part of the command line?
Yes, absolutely.
Yeah.
Anything, it is Python.
So anything that you can import in Python, you can import in Conch directly and just
start using it.
Perfect.
Thanks.
Hi.
I was wondering if you have support for something similar to some of the IPython magic functions
or you can do like debugging and that kind of stuff?
So we don't implement any particular debugger support, although that has been requested
and hopefully someone will do that.
The magic function stuff we don't have support for, but my question for the magic stuff is
what magics are people interested in.
And then we can talk about how to implement those features specifically.
Do you feel that Python is the best language choice for this or is it just the one that
you happen to like the most of the time?
I do feel that Python is the best language for this because it's a high level dynamic
language and you can do the syntax transformation stuff dynamically.
Just the other dynamic languages out there, I don't think there's a good scope.
So Ruby is an example and Ruby, they don't have the same kind of scope and broad ecosystem
and languages like JavaScript, even if you're using Node, they don't have the, they don't
really have the OS level things that you would need, right?
You can't really manage signals very well.
And Python has this beautiful, maybe not beautiful, but functional interface for handling signals.
And so, you know, there is another project called Ammonite out there that does something
similar for Scala, but I think we're doing a little better than them currently.
Seems like an awesome system.
Are there reasons I should not switch to Conch as the shell I always use?
I don't think so.
But if you find them, please report them.
Wait, is there time for one?
We'll ask questions.
Sure.
Thank you.
So how does the, do you have like multi-line line editing?
And is there like a VI mode?
Yes, there is VI mode.
So this is an important point.
We have two backends for line editing.
So we use ReadLine with all of its problems and glory.
And then we also use Prompt Toolkit.
And both of those have VI modes available.
But the interface of that, we don't have a unified interface for, in Conch, you can
just set VI mode, you know, dollar sign VI mode equals true, and then you get VI mode.
So, right.
Okay.
Let's thank Anthony again.
And the next talk, we'll start in this room in about 10 minutes.
Thank you.
