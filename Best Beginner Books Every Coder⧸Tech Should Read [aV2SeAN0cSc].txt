So this is a video about which beginner books you should use to get you started.
Hello, welcome to the stream. It's a Sunday morning. The light's a little bright and I've
got my coffee. And let's let's have a little bit of story time, tech story time, that is.
So we've talked about why you should go into web design or cybersecurity or software engineering
if you wanted to get into tech and why web design or web design is one of the fastest
paths, if not the fastest path to do that with cybersecurity possibly second if you hack the
system by doing something like going to WGU or just getting certificates instead of doing a full
like four to six year degree. You need a degree in general, by the way. So that's covered in another
video. I'm not going to cover that today. I do want to start something I want to cover which
books that we read here, why I've chosen these books. I've spent many, many months if not
years studying and reading the different books to find the best ones. I'm constantly
curating them. And I've actually even started several books and decided it was just best
to annotate existing books that are used by colleges and other people out there.
So these are the books, the beginner books I recommend. I truly believe every single
technologist should read these. Learning web design fifth edition is the current one as of today.
Learning JavaScript a third edition. And that's important that needs to be third edition.
Linux command line super important is the second edition. And head first go.
There are ways to learn these things without using books, but books continue to be the best way
to get a consistent voice that comprehensively covers the material from beginning to end.
You can probably get that from some video. My experience with the video instruction out there
is that it's either coming from people who are far less experienced, far less organized,
or charging for far more money than frankly, I think they deserve. So my suggestion to you,
and this is after going back and forth on this a lot, my change, that's me, is to find the best
books, the best authorities and read those and look for as many ways to annotate or to supplement
those books as you can, but use them as the skeleton or the structure and then, you know,
the main, the main meat of what you're learning. You don't need to go to college for this. You
don't need to take a class. You don't need to go to a boot camp and pay a grand to learn the same
things you can learn and learning web design combined with learning JavaScript combined with
Linux command line combined with maybe a view master course or something. Seriously, you don't
need to do that. Have the courage to go through these things that somebody people think if you
pay the money and you have the quote illusion of structure that you'll be able to get through
stuff that you're currently afraid of. And I'm just going to tell you right now,
it's not going to help. Okay, so that's a different rant. I'm kind of I'm going to leave it in here,
but I do want you to understand where I'm coming from when I say that everybody should read these
books. And if they haven't, they probably have gaps in their learning at some point.
And so if you anything, from FOMA, if you're missing out, there's a good chance you've got
a gap someplace in your learning. Like most Linux system administrators that I know or
DevOps or whatever you want to call them, SREs today, do not know how to use associative arrays,
not to mention how to use a parameter expansion with variables from Linux bash on the command line.
People have been doing it 20 years, you know, who have been actually coding bash for case
show and it's had it all the time and they don't know it. And I'm telling you that they don't
even know how to like force something to go to upper or lower case. So I use that as an example
of you don't know Linux. And I don't like doing that. It kind of invokes, you don't know JavaScript,
which is an author that I do not recommend. Anyway, so let's go through this learning
web design fifth edition is the first one. This is from Jennifer Jennifer is very personable.
She has a wonderful voice in terms of a writer's voice. She has many examples included with her
stuff. In fact, some might argue too many. Her book is rather thick. It's mostly don't let it
scare you. It's mostly graphics and, you know, examples. She's very thorough. It's full color.
It has a whole section on images, which none of the other web books cover. So she she is heavy.
I think I sense that she's more of into the graphics and CSS and HTML side of things,
which is I believe why it's called web design. Now this is a thing that happens. People call
books web design or call the trade or the occupation web design when there's less
JavaScript involved. So it's more HTML and CSS. And we will not get into a discussion about the
war between the HTML CSS JavaScript people versus the JavaScript JavaScript JavaScript
people who would turn the whole web into JavaScript if they had a choice. Thank God they're not
winning. Okay, I can tell where I am. Anyway, fantastic book. Again, when you read these books,
some of them have a lot of examples for you to do. Some of them have no examples for you to do,
speaking of which JavaScript learning JavaScript. This book has very little to do. It depends on
you to create your own practice with it. And that can be a little bit annoying because you just
want somebody to give you the exercises and you can do them and then you know you've got it covered.
Well, that's not the case here. So this particular one, you want to make sure that
you, you know, you're ready for it and that you're ready to create your own exercises. Learning
JavaScript is kind of the antithesis style wise to the learning web design. It takes a very
terse approach and just covers JavaScript, modern JavaScript, it doesn't cover all the historic
JavaScript. If you've ever looked at the definitive JavaScript book, which I strongly advise you
do not get, do not ever buy that waste of paper. It is way too old. It's too outdated. In fact,
they haven't even updated it in several years and the JavaScript landscape is moving so fast. I
almost feel sorry for the author because he's like, I have been so good in keeping up and there's
just no way, there's just no way he can. So Ethan's approach is like laser, laser focused on modern
JavaScript. Don't, and it's like learn this first. Every single web browser does JavaScript this way
as of this moment. Forget about all the archaic old stuff other than making sure it doesn't bite
you in the ass. Sorry, I swore. But you know, and it's a very thin book. So whereas where Ethan's
approach is he's taken, he's got a very thin book that just covers JavaScript. Jennifer's got a
rather thick book that's got lots of examples in it. So in Jennifer's book, you're going to be
able to do her examples more. But in the learning JavaScript book, you're going to be not able to
do any almost any examples. There's almost none. So you have to make your own. And that that's a
little harder with JavaScript. So, and I'm going to annotate these books and we'll go through them
page by page. And I'll, you know, this is my intent with these video series. So please continue
watching and I'll do one for each book. Ironically, however, the first book I'll be doing will be the
Linux command line. Because as I mentioned, the part one is really essential before you do any of
this. If you don't know the Linux command line, and you don't have Linux going, you're going to have
to kind of stop and, you know, put your car in reverse, and then, you know, do it and then go
forward again. So I would just assume do it the hard way. Some people call the hard way and learn
the command line, at least them and learn Linux right from the front. And then you so that makes
it a Linux based development that you're working on. And you can you can apply the Linux stuff to
a Mac or to a Windows if you if you have that. But I'm going to teach Linux first. All right,
so let's talk about just learning JavaScript a bit. This is from O'Reilly. They've been around
here a very, very reputable publisher. I once had multiple O'Reilly books. It's a famous thing.
A little story there. I made a deal with my Nike manager after they sent me on a very wasteful
Oracle training costs $2,500 for one week. And it was like, we almost learned nothing. I said,
look, don't ever do that again. That's a waste of money. I said, you know what, give me half that
money, and I will buy books. And I promise you I'll learn 10 to 20 times more. And I did. And I
went down with like an unlimited, you know, like 5, 600 bucks to pals books in Portland, Oregon,
if you know, it's one of the most famous bookstores. And I loaded up and I learned I basically got
multiple bootcamp slash master's degrees on public transportation, reading everything. And I mean
everything I read. In fact, to this day, I have, I have fond feelings every time I see a bus drive
by it because the bus and the train became my quiet time. I had young kids, and I could sit
there and I could just totally put my earplugs in and immerse in the tech. And I would go home
and at night I'd work through these things. And so I'm completely self taught. And I don't know
if I said that before, but I was a Russian major who was interested in languages and learned
language software, but I've always been interested in coding and books. And when I was 12, 13, I
coded a lot on an Atari 800. But I'll spend more time on that later. The point being that
I know that you can read, you can learn all this stuff without going to school because I've done
it. And I know other people have done it. So there's learning JavaScript, a very thin book
you'll have to do your own exercises, but it covers the AS6, AS5 up. And it's very, very,
very good. The Linux command line, this is my favorite book in the series. And if I, if I have
any fortune at all in my life, I'll be able to get William shots on stream sometime and actually
interview him. I think he has what like 10 followers. I'll have to find this thing sometime.
But he is one of the most amazing authors that I've ever read. And this book, the Linux command
line has got to be one of the best Linux books of all time. I mean, of all time, it should be
put up there with the rest of the classics. And it's the number one bestseller.
This is the only Linux book, if not Unix book that covers bash four plus at this time. I have read
through multiple books, looking at the end of them short of buying them. I'm not to the point
where I can buy it and review it. Maybe I'll do that someday. But, but this particular book
covers it. And, and, and the O'Reilly books don't. So that's one case where I bought a book that's
not an O'Reilly book. It's really important to understand that this Linux command line book
is about quote to quote him. And I'll read his introduction someday with you. He says here,
this book is for living on the command line, not just about bash.
This book is a broad overview of living on the command line. Unlike some books that concentrate
on just a single program, such as the shell, this book will try to convey how to get along
with the command line interface in a larger sense. How does it work? What's the best way to use it?
Basically how to become a terminal master. And I think if there's one book that represents this
channel more than any other, this is it. Because this is really the, the, the gateway to a much,
much larger world. Unfortunately, like all the books, there's a huge gap between the book and
using this and you, because you have to have Linux installed and they don't cover that at all.
They says, yeah, go make a USB and install Linux. When you do get that done, come back and read the
book. And it's really hard to cover installation of Linux because it's so specific to a given computer.
So again, that's why I think a stream or having a mentor can really help you get past some of those
things. Moving on, Headfirst Go. So Headfirst Go, when I first saw it, I was like, okay,
what's Riley doing with this, right? This whole Headfirst shit. And I was not a fan. I'm just
going to say I was not a fan at first of this, because it's seriously silly. And I'm used to the
more dry or Riley books and stuff. And then I got thinking to myself, you know what, they're
actually doing what I was doing on accident to teach very young people. So it's a fact that
associations with things, crazy things keeps stuff in your memory. In fact, I watched recently
watched a documentary about how all these people who do memory contests, and they make stories that
go with the words or the letters. And they play out, they imagine themselves walking down the
street or wherever and having this really ridiculous story happen in a serial manner,
so that each, each crazy thing that comes up along their path that in their memory can be pulled up
as as a fact. And then that fact can be repeated. And all you end up hearing is is the memorization.
You don't, you don't see the person reciting back in their brain or replaying in their brain this,
this elaborate movie they've made of all these, you know, mnemonic devices in their head. And
that's just factual neuroscience. That that's how we learn is really interesting stuff there. I won't
talk about it more than that. But the Headfirst Go books are specifically designed for that. And
they have an intro in the beginning that talks about that that I won't read right now, because
I'm going to read it later. But it talks about they've taken that approach. So they deliberately
put crazy images that don't make any sense that sometimes they make horrible, horrible puns.
And you're like, Oh my God, really? Did you just say that? But the reason they do it is you will
never forget it. They're like that worst wacky teacher you had. But you can remember everything
they taught you, because they did silly things that you associate with those things. And frankly,
that's how that's my teaching style. So while I was kind of critical of it at first, oh, this is
so silly, this can't be real. When I re approached it with from that perspective, I mean, I taught
infinite loops using, you know, coding nyan cat with the kids or with really young kids, or we would,
we would code, you know, Bridgekeeper from Monty Python, when we were doing Python, and we would,
we would say, you know, what is your quest, you know, and I would show a little video and I would
always bring a meme in of some kind. And, and I actually had older, one of whom just got a job
last week, they grew up and he asked me at one point, he said, you know, I really wish you had
gone back to the because I started getting elaborate, going back to the micro projects,
these micro tiny little projects that had some sort of silliness, the badgers, the waffles,
the waffle song, whatever associated with the principle, and then they could pull up the
principle because it was associated with badgers or whatever. And not only that,
they could pull up their code because the code had been broken down into these micro projects.
And that's basically what these, the better of these books do, they break down the concepts
into these tiny little micro projects that are memorable. And that's important because, you know,
the, the, you know, the story problems in math are not always memorable. You know, it's always the
train leaves it from so and so. But, but, but this particular way of doing it really works.
Why go? Go is the first compiled C compatible language, I think anybody should learn these days.
It's, it's, it's definitely going to become the Python replacement, Python and Java replacement.
It is not going to become a C++ replacement. That's Rust, by the way. I don't have any Rust
books on here, because that's, that's more of an upper level thing. However, I think,
so the reason I picked these, I think everybody should learn them. Everybody needs web.
You just need web. It's the most empowering technology on the planet. You can make apps with
web, you can make blogs with web. You can do anything. You can put your database out with web.
You can post stats on the coronavirus with the web from John Hopkins. It's the single
most empowering technology of our age. You must learn it. There's just, it's assumed that you
know HTML and CSS if you go for a tech, tech job. And that, you know, the most recent one, right?
So JavaScript, of course, is everywhere. It's also on the server now, even though I don't
suggest you use it on the server, unless you're doing some sort of JSON conversion.
But if you, and then Linux, of course, is the most powerful operating system, period. There's
just no, there's just no debate there. It's everywhere. Headfirst, go and go is the
up and coming replacement for C and C++ and Java and C sharp and all that. It's the most
modern of the modern languages. It's got the most adoption. And if you haven't heard about it,
just Google it. I mean, really, if you don't know why go is essentially essential to learn today,
you need to just do your own research on that. But it is, and this, by the way, this book is
current. I was a little bit frustrated because it does not cover 1.4 13 and 1.14 mods, which is a
big, big, big deal. And they're even talking about go to now. So I don't know how soon that'll
come out. This book is dated, there's no doubt. But the great thing about go is that it's 100%
backward compatible, at least in its 1.0 version. So you don't need to worry about it. The people
that are making go are not likely to pull a Python 23 conversions kind of thing. They're just not
because they live through that. Go is by far my favorite language, second to shell probably.
And I code a lot of shell. All right. So that's been a review of the book.
