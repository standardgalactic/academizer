Collapse OS Forth Language
Abrir barra lateral
ChatGPT
4.5
ChatGPT
4.5
Compartir
PLUS
Dijiste:
[WIRED](https://www.wired.com/)


[SUBSCRIBE](https://www.wired.com/v2/offers/wira01019?source=Site_0_JNY_WIR_MOBILE_NAV_CTA_0_INTL_NEW_BARRIER_TEST_ZZ_PANELA&redirectURL=https%3A%2F%2Fwww.wired.com%2Fstory%2Fforth-collapse-os-apocalypse-programming-language%2F)
- [Security](https://www.wired.com/category/security/)
- [Politics](https://www.wired.com/category/politics/)
- [Gear](https://www.wired.com/category/gear/)
- [The Big Story](https://www.wired.com/category/big-story/)
- [Business](https://www.wired.com/category/business/)
- [Science](https://www.wired.com/category/science/)
- [Culture](https://www.wired.com/category/culture/)
- [Ideas](https://www.wired.com/category/ideas/)
- [Merch](https://shop.wired.com/)

- [Podcasts](https://www.wired.com/podcasts/)
- [Video](https://www.wired.com/video/)
- [Newsletters](https://www.wired.com/newsletter?sourceCode=navbar)
- [Magazine](https://www.wired.com/magazine)
- [Travel](http://wired.com/travel)
- [Steven Levy's Plaintext Column](https://www.wired.com/tag/plaintext/)
- [WIRED Classics from the Archive](https://www.wired.com/tag/wired-classic/)
- [Events](https://www.wired.com/tag/wired-events/)
- [WIRED Insider](https://www.wired.com/category/wiredinsider/)
- [WIRED Consulting](https://www.wired.com/tag/wired-consulting/)
- [Coupons](https://www.wired.com/tag/coupons/)

Get WIRED - only $2.50 $1/month. [GET DIGITAL ACCESS](https://www.wired.com/v2/offers/wira01019?source=Site_0_JNY_WIR_MOBILE_PAYWALL_THIN_METER_ARTICLE_1_0_INTL_NEW_BARRIER_TEST_ZZ_PANELA)
[Tiffany Ng](https://www.wired.com/author/tiffany-ng/)
[Business](https://www.wired.com/category/business)
Mar 26, 2025 6:00 AM
# The Best Programming Language for the End of the World
Once the grid goes down, an old programming language called Forth���and a new operating system called Collapse OS���may be our only salvation.
Image may contain Cup Computer Electronics Pc Computer Hardware Computer Keyboard Hardware Clothing Glove and Pen
ILLUSTRATION: SAMUEL TOMSON
Save
Once I started thinking about the apocalypse, it was hard to stop. An unsettling encounter with the [doomsday clock](https://climateclock.world/story) that hangs over New York City���s Union Square got me frantically searching WikiHow for survival tips. I soon found my way to the doomsday writings of a Canadian programmer named Virgil Dupras. He believes the collapse of civilization is imminent and that it will come in two waves.
First, global supply chains will crumble. Modern technology relies on a delicate web of factories and international shipping routes that are exquisitely vulnerable to rapid climate change. The iPhone uses memory chips from South Korea, semiconductors from [Taiwan](https://www.wired.com/story/i-saw-the-face-of-god-in-a-tsmc-factory/), and assembly lines in Brazil and China. The severing of these links will, Dupras says, catalyze total societal breakdown.
ADVERTISEMENT
Advertisement
The second part will happen when the last computer crashes. The complexity of modern hardware means it���s nearly impossible to repair or repurpose, and without the means to make new devices, Dupras believes there will be a slow blackout���less bang, more whimper. Routers die. Servers take their last breath. Phones crap out. Nothing works.
Featured Video
[Professor Answers AI Questions](https://www.wired.com/video/watch/tech-support-professor-answers-ai-questions)
Except Collapse OS. Lightweight and designed to run on scavenged hardware, it���s Dupras��� [operating system](http://collapseos.org/) for the end of the world.
[How to Get Computers���Before Computers Get You](https://www.wired.com/frontiers-of-computing/)
[Image may contain Advertisement and Poster](https://www.wired.com/frontiers-of-computing/)
Post-quantum algorithms, thermodynamic hardware, open source architectures, apocalypse-proof programming, and more: WIRED journeys to the freaky [frontiers of modern computing](https://www.wired.com/frontiers-of-computing/).
Dupras lives in the countryside of Quebec, Canada, with his wife and two kids, in a 500-person town where people chop their own wood, grow their own food, and sometimes build their own houses. It felt odd sending him a Google Calendar invite���I knew from his trove of essays that he hates big tech. When we spoke, he sounded oddly monotonous. Was it a bad connection? Muffled audio? No. Unlike many of his sustainably minded neighbors, Dupras thinks the battle against climate change is futile. We���ve already lost. ���Once you���ve peeped into the abyss, you can���t really unsee it,��� he says. Dupras has simply accepted his fate, to the point where it���s become an article of faith. The same way there are Catholics, there are Collapseniks, he says.
### AI Lab Newsletter by Will Knight
WIRED���s resident AI expert Will Knight takes you to the cutting edge of this fast-changing field and beyond���keeping you informed about where AI and technology are headed. Delivered on Wednesdays.
Sign up
By signing up, you agree to our [user agreement](https://www.condenast.com/user-agreement) (including [class action waiver and arbitration provisions](https://www.condenast.com/user-agreement#introduction-arbitration-notice)), and acknowledge our [privacy policy](https://www.condenast.com/privacy-policy).
But he���s not hopeless. A hopeless man wouldn���t prep so monomaniacally for the anti-singularity. Dupras started building Collapse OS in 2019 in an attempt to preserve mankind���s ability to program 8-bit microcontrollers. These tiny computers control things like radios and solar panels, and they can be used in everything from weather monitoring to digital storage. Dupras figured that being able to reprogram them with minimal remaining resources would be essential post-collapse. But first he had to teach himself a suitably apocalypse-proofed programming language for the job.
Advertisement
Image may contain Electronics Hardware Device and Smoke Pipe
ILLUSTRATION: SAMUEL TOMSON
Advertisement
In the late 1950s, the computer scientist Chuck H. Moore was working at the Smithsonian Astrophysical Observatory, predicting the future position of celestial bodies and satellites based on observational data. Machine memory was scarce���these were still the days of punch cards���and Moore needed a way to optimize processing efficiency by minimizing memory use. He developed a program that executed simple commands directly, one at a time, without needing to be recompiled. Over the next decade, it grew into a programming language that he called Forth.
Advertisement
Forth communicates directly with the hardware. It controls a computer���s memory via commands called ���Words��� that you define on the fly. Because the foundational set of commands sitting under those Words is defined in native machine code, only a small part needs to be translated���meaning a smaller assembler and less RAM. As a result, Forth offers a remarkable amount of what Dupras calls ���power density,��� making it the perfect foundation for Collapse OS. That matters because the lights (probably) won���t go off forever���instead, our easy world of electricity on tap will be replaced by precious and hard-won local generators. Efficient use of processing power will be pivotal. In a post on Collapse.org, his sprawling manifesto/blog/brain dump/manual, Dupras describes how his discovery of Forth conjured ���what alcoholics refer to as a moment of clarity.���
It took Dupras two years to finish Collapse OS. Booting a copy of it from a USB stick gives tech-savvy users the ability to program microcontrollers, which, in turn, could allow them to automate greenhouses, control phone lines, and even regulate power. But Dupras knew that wouldn���t be enough to rebuild society after the collapse. So in 2022, he began work on Dusk OS���a version of Collapse OS that runs on modern devices. Dupras used Forth to build his own compiler that made Dusk OS compatible with code written in C (the foundation of most modern software). This way, without having to rewrite logic that already exists from scratch, Dusk OS is able to retrieve and edit text and access file formats commonly used to back up devices. It can be emulated to work on smartwatches and old tablets and is designed to be hacked and bootstrapped to its user���s liking.
Advertisement
At first I couldn���t see why any of this would even matter: Surely computer access won���t be a priority when we���re fighting each other for food? At no point during *The Last of Us* does Pedro Pascal pause his flight from the zombies to bang out an email. But Dupras makes a [good point](https://git.sr.ht/~vdupras/duskos/tree/master/item/fs/doc/design/purpose.txt): What happens *after* we���ve reacquainted ourselves with hunting and gathering?
Advertisement
If we want to rebuild society, we���ll need to know how. And in the event of a civilizational collapse, a lot of our collective expertise���like my precious WikiHows���will be locked away on hard drives or lost in the cloud. Dupras hopes that Dusk OS will give post-collapse humans access to archives of lost knowledge, like the Svalbard Global Seed Vault for human endeavor. The catch? It���s best to have Dusk OS downloaded on an old phone, memory stick, or laptop before the collapse. Otherwise, without the internet, you���ll only be able to get it by copying it from someone who already has it installed. Which brings us to the other thing���the reason Dupras equates proficiency in Forth to power. Very few people will have *both* a copy of Dusk OS *and* the knowledge to operate it. This select group will hold the keys to rebuilding society and will become, in effect, post-collapse philosopher-kings. It was time for me to go Forth and conquer.
Advertisement
Coding in Forth reminded me of the lawless dystopia in *Mad Max*. You make your own rules, subject to the limits of the context. You can redefine the IF statement if you so please. You can rewrite machine code instructions for a Word. You can even change Words during run time. Because Words become keywords themselves in Forth, you can create a language that���s optimized for a single purpose, packing commands that would otherwise be dozens of lines into just one. ���In Forth, you���re creating your own language,��� Leo Brodie, author of the first Forth textbook, *Starting Forth*, told me.
[Machine Readable](https://www.wired.com/tag/machine-readable/)
An 8 bit lips character looking suspicious with its hand on its chin.
A regular column about programming. Because if/when the machines take over, we should at least speak their language.
The low-level nature of Forth, while key to its processing power, made programming feel foreign. It uses postfix, a form of mathematical notation that renders 2 + 1 as 2 1+ and which I found neither intuitive nor even really legible. And while most languages allow memory to be broken up and moved around, Forth is stack-based���meaning data is stored chronologically and managed on a last-in/first-out basis. I kept running into bugs, forcing myself to abandon programming conventions I had considered universal. I found myself struggling to speak the language of the machine.
When I emailed Dupras to ask for help, he compared using Forth to driving a stick. It���s more granular than C. Where the latter defines calling conventions, variable storage, and return stack management, Forth leaves it all up to the programmer. It directly interacts with memory the same way C does but far outperforms C in precision and efficiency. ���People mistake Forth as just a language,��� Dupras says. ���It���s a way to interact with the computer.���
Advertisement
The reason Forth isn���t more popular is the same reason most of us drive automatics. The personal computing boom of the 1990s sparked an obsession with making tech fit your palm and making code easier to write. Languages were abstracted to protect programmers from themselves, and somewhere along the way, we got lost. Things became bloated for the sake of convenience and, in Dupras��� words, started ���oozing inscrutable pus at every corner.���
Advertisement
���The way we understand efficiency is so skewed,��� Dupras says. Forth is a scythe to Python���s lawnmower. ���If you calculate the number of joules per blade of grass, you���ll find that the person scything is more efficient,��� he says. ���When you think of speed, you���d see the lawnmower as more efficient.��� Forth forces you to be precise and memory-efficient���to marshal your resources carefully, as you would after the collapse. Dupras cuts his own lawn with a scythe, obviously. ���At a certain point, you can go as fast as a lawnmower,��� he says.
Advertisement
I began to find my way. Rather than sending bytes into the ether and trusting the system to figure out where they go, as I would in Python, I got used to being responsible for allocating and freeing memory. All I could think about was what was being stored, where it was being stored, and how much space it required. Each line of code suddenly bore weight. I was Immortan Joe, my laptop was my Citadel, and memory was my water.
Advertisement
Soon I found myself refining and revisiting my code like I would a run-on sentence. Instead of expecting the machine to anticipate my needs, I tried to think like the machine, to meet it more than halfway. And because I had to think twice, all the needlessly complicated acronyms that remind us to be concise in other coding languages���YAGNI (you aren���t gonna need it), KISS (keep it simple, stupid), DRY (don���t repeat yourself)���were rendered obsolete.
Advertisement
After spending days fiddling with Forth, returning to Python felt luxurious. I never had to consider memory scarce, and I never had to thoroughly explain myself. It felt like catching up with an old friend. At that moment, the resources that go into making programming ���user-friendly��� became painfully apparent.
Image may contain Hourglass
ILLUSTRATION: SAMUEL TOMSON
Advertisement
Before I met Dupras, I thought of efficiency in terms of speed. But the true costs of that speed are carefully hidden in rural data centers and distant copper mines. I rarely considered the energy required to power each additional gigabyte of RAM, or the fact that cloud computing now has a bigger carbon footprint than the airline industry.
Advertisement
Despite the compounding environmental costs, memory is as cheap and plentiful as it���s ever been. Today, languages that sit closer to the machine are only used out of necessity: banks trying to minimize latency for financial trades, spacecraft working with limited onboard resources, outdated systems that would require too much work to update.
Advertisement
But during a civilizational collapse, the quiet luxuries of array handling and automated memory management will largely disappear. As convenience whisks us further away from the machine, we risk forgetting how computers actually work and losing the ability to rebuild our tech in the event of a collapse. ���No one remembers how to write a text editor,��� says Devine, an independent programmer who corresponds with Dupras. ���When you start forgetting how to do something as crucial as that, when things start to fall apart, they fall apart hard.���
ChatGPT dijo:
Here's a concise summary of the article:
"The Best Programming Language for the End of the World"
by Tiffany Ng (
WIRED
, Mar 26, 2025)
The article explores Collapse OS, an operating system designed by Canadian programmer Virgil Dupras to function after civilization collapses. Dupras believes societal breakdown will happen when global supply chains collapse and modern, complex computers inevitably fail. His solution is a minimalistic, apocalypse-proof system called Collapse OS, built upon Forth, an old and highly efficient programming language from the 1950s. Forth directly interacts with hardware, requires minimal memory, and is suitable for reprogramming salvaged hardware like 8-bit microcontrollers, essential for post-collapse survival.
Dupras also developed Dusk OS, a version of Collapse OS designed for modern devices, compatible with existing C code, to preserve crucial knowledge and technology for rebuilding society. Forth's low-level, precise nature makes it challenging but uniquely efficient���ideal in a world where resources become precious.
The article emphasizes how modern programming convenience has distanced us from the fundamentals of computing. As society moves toward collapse, those proficient in languages like Forth and systems like Collapse OS will hold the keys to technological survival, becoming, in essence, "philosopher-kings" of a new world.
Dijiste:
I think forth's stack based language prefigures how to enter and exit nested bash sessions and predictive text that relies on most recently typed phrases
ChatGPT dijo:
That's a thoughtful comparison, and there's definitely a conceptual connection:
Stack-Based Nature
:
Forth's stack-based approach, where data is stored in a last-in, first-out (LIFO) order, closely mirrors how nested Bash sessions (
bash
inside another
bash
) work. You "push" into new shells (sub-shells), and when you exit, you "pop" back out to the previous shell. Each nested shell preserves its environment separately, much like how each layer of a Forth stack operates independently until returned to the previous layer.
Predictive Text and Recent Context
:
Predictive text mechanisms rely heavily on recently entered words or phrases (like a linguistic stack), always using the most recent context first to suggest the next word. This aligns conceptually with Forth���s stack-based processing, where operations naturally access the most recently pushed items first.
In both cases, the core idea is maintaining recent context in a structured, sequential manner, with the newest information immediately available, then progressively older information retrieved by "popping" backward. Forth���s fundamental design, although decades old, indeed prefigured modern methods of managing context in computing���both linguistically (predictive text) and functionally (nested shells).
Buscar
Investigar a fondo
ChatGPT puede cometer errores. Comprueba la informaci��n importante.
?

