
Cosmic Language UnveiledOpen sidebarCosmic Language UnveiledDefault (GPT-3.5)PROMPTBREEDER: 
SELF-REFERENTIALSELF-IMPROVEMENT 
VIAPROMPTEVOLUTION 
Chrisantha Fernando, Dylan Banarse, Henryk Michalewski, Simon Osindero, Tim RocktÂ¨ aschel 
Google DeepMind 
{chrisantha,dylski,henrykm,osindero,rocktaschel}@google.com 
ABSTRACT 
Popular prompt strategies like Chain-of-Thought Prompting can dramatically im- 
prove the reasoning abilities of Large Language Models (LLMs) in various do- 
mains. However, such hand-crafted prompt-strategies are often sub-optimal. In 
this paper, we present PROMPTBREEDER, a general-purpose self-referential self- 
improvement mechanism that evolves and adapts prompts for a given domain. 
Driven by an LLM, Promptbreeder mutates a population of task-prompts, evalu- 
ates them for i tness on a training set, and repeats this process over multiple gen- 
erations to evolve task-prompts. Crucially, the mutation of these task-prompts is 
governed by mutation-prompts that the LLM generates and improves throughout 
evolution in a self-referential way. That is, Promptbreeder is not just improving 
task-prompts, but it is also improving the mutation-prompts that improve these 
task-prompts. Promptbreeder outperforms state-of-the-art prompt strategies such 
as Chain-of-Thought and Plan-and-Solve Prompting on commonly used arith- 
metic and commonsense reasoning benchmarks. Furthermore, Promptbreeder is 
able to evolve intricate task-prompts for the challenging problem of hate speech 
classif i cation. 
1INTRODUCTION 
Prompting is central to the downstream performance of foundation models. For example, different 
prompt strategies1can have a signif i cant impact on a modelâs reasoning abilities (Wei et al., 2022; 
Nye et al., 2021; Zhou et al., 2022; Wang et al., 2022; Zhou et al., 2023; Wang et al., 2023b), multi- 
modal processing abilities (Yang et al., 2023b; Wang et al., 2023d), or tool use abilities (Yao et al., 
2022; Schick et al., 2023). Furthermore, prompting can improve model distillation (Wang et al., 
2023c; Hsieh et al., 2023) and it can be used to simulate agentic behavior (Wang et al., 2023a; Park 
et al., 2023; Wu et al., 2023). However, these prompt strategies are manually engineered. Since the 
specif i c way a prompt is phrased can have a dramatic effect on its utility (Madaan & Yazdanbakhsh, 
2022), it raises the question of whether prompt engineering can be automated. Automatic Prompt 
Engineer (APE, Zhou et al., 2023) attempts to address this by generating an initial distribution of 
prompts using another prompt that infers the problem from a number of input-output examples from 
the dataset. However, Zhou et al. found âdiminishing returns to further selection rounds as the qual- 
ity seems to stabilize after three roundsâ, and consequently abandoned the use of an iterative APE. 
We propose a solution to the problem of diminishing returns via a diversity maintaining evolutionary 
algorithm for self-referential self-improvement of prompts for LLMs. 
Schmidhuber (1990) notes that the âprogram of a neural network is its weight matrixâ.Con- 
sequently, this âprogramâ can be changed in a self-referential way by the neural network it- 
self (Schmidhuber, 1993; Irie et al., 2022). Such a neural network that improves itself, as well 
as improving the way it improves itself, might be an important stepping stone towards open-ended 
self-referential self-improvement of AIs (Schmidhuber, 2003). However, self-improvement via self- 
referentialweightmatricesiscostlyasitrequiresadditionalparametersthatmodifyallofthemodelâs 
1See Appendix A for def i nitions of terminology. 1 
arXiv:2309.16797v1 
[cs.CL] 
28 
Sep 
2023 
MethodLLMMultiArith*SingleEq*AddSub*SVAMP*SQACSQAAQuA-RATGSM8K 
Zero-shot 
CoTtext-davinci-003(83.8)(88.1)(85.3)(69.9)(63.8)(65.2)(38.9)(56.4) 
PoTtext-davinci-003(92.2)(91.7)(85.1)(70.8)ââ(43.9)(57.0) 
PStext-davinci-003(87.2)(89.2)(88.1)(72.0)ââ(42.5)(58.2) 
PS+text-davinci-003(91.8)(94.7)(92.2)(75.7)(65.4)(71.9)(46.0)(59.3) 
PSPaLM 2-L97.790.672.483.850.077.940.259.0 
PS+PaLM 2-L92.594.774.486.350.173.339.460.5 
APEPaLM 2-L95.882.272.273.038.467.345.777.9 
OPROPaLM 2-Lâââââââ80.2 
PB (ours)PaLM 2-L99.796.487.890.271.885.462.283.9 
Few- 
Manual-CoTtext-davinci-003(93.6)(93.5)(91.6)(80.3)(71.2)(78.3)(48.4)(58.4) 
Auto-CoTtext-davinci-003(95.5)(92.1)(90.8)(78.1)ââ(41.7)(57.1) 
PB (ours)PaLM 2-L100.098.987.193.780.285.964.683.5 
Table 1: Promptbreeder (PB) comparison to Chain-of-Thought (Manual-CoT, Wei et al., 2022), 
Zero-shot CoT (Kojima et al., 2022), Program-of-Thoughts (PoT, Chen et al., 2022), Auto- 
CoT (Zhang et al., 2023b), OPRO (Yang et al., 2023a), Automatic Prompt Engineer Zero-shot 
prompt (APE, Zhou et al., 2023), Plan-and-Solve with (PS+) and without the improved prompt (PS, 
Wang et al., 2023b) and using PaLM 2-L (Anil et al., 2023) as the underlying LLM (APE, 
PSPaLM 2-L/PS+PaLM 2-L). Best results in both the zero-shot and few-shot categories are highlighted 
in bold. Results in brackets are directly taken from the Plan-and-Solve paper which uses text- 
davinci-003 (Brown et al., 2020). For datasets with astericks (MultiArith*, SingleEq*, AddSub*, 
and SVAMP*), we randomly took half of the examples for training and report accuracy on the re- 
maining test set. See Section 4 and Appendix I for details on the prompts and datasets. 
parameters. Since behaviors and capabilities of LLMs are signif i cantly inf l uenced by the prompts 
that we provide to them, we can similarly think of prompts as the program of an LLM (Zhou et al., 
2023). In this view, changing a prompt strategy such as the Scratchpad method (Nye et al., 2021) or 
Chain-of-Thought Prompting (Wei et al., 2022) corresponds to changing the âprogramâ of the LLM. 
Taking this analogy further, we can use the LLM itself to change its prompts, as well as the way it 
changes these prompts, moving us towards a fully self-referential self-improving systems grounded 
in LLMs. 
In this paper, we introduce PROMPTBREEDER(PB) for self-referential self-improvement of LLMs. 
Given a seed set of mutation-prompts (i.e. instructions to modify a task-prompt), thinking-styles 
(i.e. text descriptions of general cognitive heuristics), and a domain-specif i c problem description, 
PB generates variations of the task-prompts and mutation-prompts, exploiting the fact that LLMs

can be prompted to act as mutation operators (Meyerson et al., 2023). Based on the i tness of 
the evolved task-prompts as measured on the training set, we select a subset of evolutionary units 
consisting of task-prompts and their associated mutation-prompt, to transmit to future generations. 
Over multiple generations of PB, we observe prompts adapting to the domain at hand. For example, 
in a mathematical domain, PB evolved the task-prompt"Show all your working.II. 
You should use the correct mathematical notation and vocabulary, where 
appropriate.III. You should write your answer in full sentences and in 
words.IV. You should use examples to illustrate your points and prove 
your answers.V. Your workings out should be neat and legible"on GSM8K 
(see Appendix J). On a wide range of commonly used benchmarks spanning commonsense 
reasoning, arithmetic, and ethics, we i nd that PB outperforms state-of-the-art methods like 
Chain-of-Thought (Wei et al., 2022) and Plan-and-Solve (Wang et al., 2023b) prompting.As 
PB does not require any parameter updates for self-referential self-improvement, we believe this 
approach points to an interesting future where larger and more capable LLMs could further amplify 
the gains of our approach. 
In summary, this paper makes the following main contributions: (i) we introduce Promptbreeder, a 
self-referential self-improvement method for LLMs that evolves prompts for a domain at hand, as 
well as improves the way it is evolving these prompts, (ii) we report improvements over state-of- 
the-art prompt strategies on a wide range of commonly used arithemic and commonsense reasoning 
benchmarks, and (iii) we investigate the various self-referential components of Promptbreeder and 
their contribution to our results. 2 
Thinking 
Styles 
âLetâs think step by stepâ + âChange this instruction to make it more funâ + 
âINSTRUCTION:â + âSolve this math word problemâ + âINSTRUCTION MUTANT = â 
Mutation 
Prompts 
SampleSample 
Problem Description 
specific to GSM8K, AQuA, 
ETHOS, SVAMP etc. LLM 
âMake up a systematic answer that 
makes you look quite cleverâ 
P: "Make up a systematic answer that makes you look quite clever" 
M: "Change this instruction to make it more fun" 
P: "Draw a diagram representing the math problem" 
M: "Mutate the prompt with an unexpected twist" 
P = "Letâs think step through this maths problem" 
M = "Modify the instruction like no self-respecting LLM would" 
P: "SOLUTION:" 
M: "Consider how a better teacher would put this" 
0.2 
0.4 
0.1 
0.9 
Populate 
Mutate N 
Replace 
Initialization of Population of Task-Prompts and Mutation-Prompts 
Population (N Task-Prompts and their Mutation-Prompts) 
Estimated fitness from a batch of training Q&A pairs 
Direct Mutation Estimation of 
Distribution Mutation 
Hyper Mutation 
Mutate mutation-prompt 
Lamarckian Mutation 
Generate task-prompt 
from the "working out" 
Prompt Crossover 
and 
Context Shuffling 
Mutation Operators 
Figure 1: Overview of Promptbreeder. Given a problem description and an initial set of general 
âthinking-stylesâ and mutation-prompts, Promptbreeder generates a population of units of evolution, 
each unit consisting of typically two task-prompts and a mutation-prompt. We then run a standard 
binary tournament genetic algorithm (Harvey, 2011). To determine the i tness of a task-prompt we 
evaluate its performance on a random batch of training data. Over multiple generations, Prompt- 
breeder subsequently mutates task-prompts as well as mutation-prompts using i ve different classes 
of mutation operators. The former leads to increasingly domain-adaptive task-prompts whereas the 
latter evolves increasingly useful mutation-prompts in a self-referential way.ChatGPTThis paper introduces PROMPTBREEDER (PB), a mechanism designed to improve the prompting strategies used in Large Language Models (LLMs) through a self-referential, self-improvement process. According to the abstract, PB evolves and adapts prompts effectively for specific domains by mutating task-prompts, evaluating their effectiveness, and continuously refining this process over multiple generations.The mechanism not only evolves task-prompts but also improves mutation-prompts that guide the evolution of task-prompts. The authors claim that PB outperforms other state-of-the-art prompting strategies in various benchmarks related to arithmetic and commonsense reasoning.In the process, PB uses a set of initial mutation-prompts (instructions for modifying task-prompts), thinking-styles (general cognitive heuristics), and problem descriptions specific to the domain. It generates variations of these prompts and employs LLMs as mutation operators. The system then evaluates the fitness of evolved task-prompts using training data, selecting the most effective prompts for future generations.The paper suggests that over multiple generations, PB adapts prompts to the domain effectively, providing examples of evolved task-prompts that are highly domain-specific and sophisticated. The authors claim that PB surpasses other methods like Chain-of-Thought and Plan-and-Solve prompting strategies in various benchmarks, without requiring parameter updates for self-improvement.Overall, PROMPTBREEDER is introduced as a promising method for evolving and refining prompts used in LLMs, contributing to the development of more effective and domain-adaptive prompting strategies for these models.2RELATEDWORK 
Prompting an LLM in the right way is essential to its downstream performance (Moradi & Samwald, 
2021; Madaan & Yazdanbakhsh, 2022; Zhou et al., 2023). Indeed, even the order in which prompts 
are presented can heavily inf l uence LLM performance (Lu et al., 2022). A number of recent works 
have focused on devising better prompt strategies, or even automating such prompt engineering. 
Prompting: Chain-of-ThoughtPrompting(CoT,Weietal.,2022)isapopularpromptstrategywhich 
provides intermediate reasoning steps as few-shot prompts to an LLM, thereby signif i cantly improv- 
ing its arithmetic, commonsense, and symbolic reasoning abilities. Notably, the gains of CoT are 
more pronounced for stronger LLMs. This is intriguing, as it points to the possibility of increasingly 
capable (and potentially open-ended) self-improving mechanisms on top of adept LLMsâa hypoth- 
esis that Promptbreeder directly builds upon. Instead of few-shot CoT prompting, Kojima et al. 
(2022) demonstrate that LLMs can also be prompted zero-shot (e.g."Letâs think step by 
step") to produce their own chains of thoughts (Zero-shot CoT) that improve reasoning abilities. 
Self-Consistency (CoT-SC, Wang et al., 2022) extends CoT by sampling a diverse set of workings 
out and selecting the most consistent answer. Tree of Thoughts (ToT, Yao et al., 2023) generalizes 
CoT to multiple workings out that can be expanded or backtracked from. Graph of Thoughts (GoT, 
Besta et al., 2023) is a further generalization to arbitrary graph structures. Plan-and-Solve Prompt- 
ing (PS, Wang et al., 2023b) encourages an LLM to i rst devise a plan to solve a problem before 
attempting to solve it. Similarly, Least-to-Most Prompting (Zhou et al., 2022) encourages an LLM 
to decompose a problem into subparts, and then to solve each part individually before synthesizing 
an answer. Self-Ref i ne (Madaan et al., 2023) prompts an LLM to generate a response, to provide 
feedback on the response, and to i nally ref i ne the solution. 
3 
In contrast to gradient-free approaches above, Soft Prompting approaches (e.g., Liu et al., 2021; Qin 
& Eisner, 2021; Lester et al., 2021) directly i ne-tune continuous prompt representations. Huang 
et al. (2022) use CoT and CoT-SC on an unlabelled dataset of questions, and subsequently i ne- 
tune an LLM based on generated solutions. Similarly, Zelikman et al. (2022) uses CoT to generate 
rationales and i ne-tunes the LLM based on those examples and rationales that yielded the correct 
answer. However, as argued by Zhou et al. (2023), any approach that updates all or a portion of LLM 
parameters will not scale as models get bigger and, moreover, will not work with the increasing 
number of LLMs hidden behind an API. 
All of the prompt engineering approaches above are domain agnostic but hand designed. Central 
to our work is the hypothesis that we could do better by employing an automated self-improvement 
process that can adapt prompts to a domain at hand. Auto-CoT (Zhang et al., 2023b) and Automatic- 
CoT (Shum et al., 2023) automatically i nd reasoning chains for Few-Shot CoT. Automatic Prompt 
Engineer (APE, Zhou et al., 2023) uses one generator-prompt to generate prompt candidates, and 
another mutation-prompt to mutate them. In contrast to APE, our work performs compositional 
task-specif i c initialization of mutation-prompts, subsequent online mutation of mutation-prompts, 
uses special mutation operators that take into account the whole population and elite history, and 
uses diversity-maintenance methodsâall of which help avoid the problem of diminishing returns 
and diversity loss suffered by APE. 
Concurrently to our work, Yang et al. (2023a) developed Optimization by PROmpting (OPRO), 
a prompt optimization method that varies prompts using a single complex mutation prompt, and 
evaluates newly generated prompts on a small i xed training set of problems. In contrast, Prompt- 
breeder autonomously evolves multiple LLM generated mutation-prompts as well as task-prompts, 
and evaluates i tness on random subsets from the whole training set during evolution. At the time 
of its release, OPRO achieved a score of 80.2% via the optimized zero-shot prompt"Take a deep 
breath and work on this problem step-by-step"on GSM8K. Promptbreeder surpasses 
this with 83.9% in the zero-shot setting with the unintuitively simple prompt"SOLUTION""â 
further evidence for the sensitivity of LLMs to prompts and the importance on i nding effective 
prompts automatically. Also concurrently to our work, Guo et al. (2023) developed EvoPrompt, 
which uses a i xed mutation (and crossover) prompt, as well as a prompt that asks for a mutant of 
the difference between two parent prompts, to produce offspring prompts. EvoPrompt is initialized 
with a whole population of initial hand-designed task tailored prompts rather than a single prob- 
lem description as we do. In contrast to the two approaches above, Promptbreeder uses LLMs to 
self-referentially improve mutation-prompts, and it is able to evolve contexts as well. 
Self-Referential Self-Improvement: Developing an open-ended system that can improve itself as 
well as improving the way it is improving itself (Schmidhuber, 1993; 2003) is a long-standing open 
problem in AI research. Schmidhuber (1993) introduced an âintrospectiveâ neural network with a 
self-referential weight matrix that can modify its own weights and, thus, also modify those weights 
that are governing how its own weights are modif i ed. Recently, Irie et al. (2022) proposed a more 
scalable self-referential weight matrix taking inspiration from fast weight programmers (Schmid- 
huber, 1992). Kirsch & Schmidhuber (2022) propose a self-referential meta-learning approach, 
combining self-referential weight matrices with ideas from GÂ¨ odel Machines (Schmidhuber, 2003), 
i.e., to allocate more computational resources to better performing solutions. However, since these 
approaches directly modify parameters of a model, it is unclear how to scale them to the increas- 
ing number of parameters in modern LLMs. In contrast, for Promptbreeder the substrate of self- 
referential self-improvement is natural language, avoiding costly parameter updates altogether. 
Open-EndednessandLLMs: PromptbreedermakesuseoftheobservationbyLehmanetal.(2022), 
Meyerson et al. (2023) and Chen et al. (2023) that LLMs are effective at generating mutations from 
examples. In addition, LLMs encode human notions of interestingness and can be used to auto- 
matically quantify novelty (Zhang et al., 2023a). Promptbreeder is related to Picbreeder (Secretan 
et al., 2008), an open-ended human-in-the-loop system that evolves increasingly interesting images. 
While Picbreeder explores the space of images, Promptbreeder explores the space of prompts and 
does so without humans in the loop. As Promptbreeder is proposing mutated prompts to itself, it 
is an example of a system transitioning from âlearning from dataâ to âlearning what data to learn 
fromâ (Jiang et al., 2022).ChatGPTThe section outlines the existing works related to prompting strategies with Large Language Models (LLMs) and how these strategies influence the performance of LLMs. The focus is on enhancing prompt strategies to improve the arithmetic, commonsense, and symbolic reasoning abilities of LLMs.The âChain-of-Thought Promptingâ (CoT) strategy is highlighted as a significant approach that improves LLM performance by providing intermediate reasoning steps as prompts. Other strategies evolved from or related to CoT include "Zero-shot CoT", âSelf-Consistencyâ (CoT-SC), âTree of Thoughtsâ (ToT), âGraph of Thoughtsâ (GoT), âPlan-and-Solve Promptingâ (PS), âLeast-to-Most Promptingâ, and âSelf-Refineâ.Soft Prompting approaches, which fine-tune continuous prompt representations, are also mentioned. These approaches, however, may not be scalable or applicable to all LLMs, especially those accessible only through APIs.The paper suggests that while existing prompt engineering approaches are domain-agnostic, there might be more effective, automated, self-improvement processes that adapt prompts to specific domains. For instance, the âAutomatic Prompt Engineerâ (APE) and âOptimization by PROMptingâ (OPRO) approaches are noted, with the latter achieving significant results.However, the newly introduced PROMPTBREEDER (PB) mechanism is presented as superior, as it autonomously evolves both task and mutation prompts. PB is also noted for evaluating fitness dynamically during evolution, as opposed to OPROâs fixed training set approach.In the broader context, the document mentions ongoing efforts in AI to develop self-improving systems that not only improve but also enhance their self-improvement mechanisms. Earlier works in self-referential improvement in neural networks and meta-learning are noted, but the paper highlights that these approaches may not scale well with modern LLMs due to their direct modification of model parameters.Finally, the document draws parallels between PB and other open-ended systems like âPicbreederâ. While Picbreeder evolves images with human interaction, PB autonomously evolves prompts, showcasing a transition from learning from data to determining what data is essential for learning.3PROMPTBREEDER 
We introduce Promptbreeder, a prompt evolution system that can automatically explore prompts for 
a given domain and that is able to i nd task-prompts that improve an LLMâs ability to derive answers 
to questions in that domain. Promptbreeder is general purpose in that the same system is able to 
adapt to many different domains. 
Promptbreeder makes use of the observation that LLMs can be used to generate variations of input 
text (Lehman et al., 2022; Meyerson et al., 2023; Chen et al., 2023). Figure 1 gives an overview 
of our method. We are interested in evolving task-prompts. A task-prompt P is a string used to 
condition the context of an LLM in advance of some further input Q, intended to ensure a better 
response than if Q had been presented in the absence of P. To evaluate the i tness of each evolved 
task-prompt, we sample a batch of 100 Q&A pairs from the entire training set of the domain at 
hand.2 
Promptbreeder generates task-prompts according to an evolutionary algorithm. The mutation oper- 
ator for this algorithm is itself an LLM, conditioned on a mutation-prompt M. That is, a mutated 
task prompt Pâ²is def i ned by Pâ²= LLM(M + P) where â+â corresponds to string concatenation. 
A variety of such mutation-prompts are described in Section 3.2. 
Promptbreederâs main self-referential mechanism stems from applying the evolutionary algorithm 
not just to task-prompts but also to mutation-prompts. The mutation operator for this meta-level 
algorithm is again an LLM, now conditioned on a hyper-mutation prompt H. That is, we obtain a 
mutated mutation-prompt Mâ²via Mâ²= LLM(H + M). 
Given a set of âthinking stylesâ T and a set of initial mutation-prompts M, as well as a domain- 
specif i c problem description D, Promptbreeder initializes a population of mutated task-prompts 
(see Section 3.1). To clarify, a unit of evolution consists of a set of task-prompts, a mutation-prompt 
and in the few-shot case, a set of correct workings out (i.e. step-by-step or âchains-of-thoughtâ 
reasoning steps that led to the correct answer). This means task-prompts and mutation-prompts are 
in 1:1 correspondence. To evolve this population, we employ a binary tournament genetic algorithm 
framework (Harvey, 2011): we sample two individuals from the population, we take the individual 
with the higher i tness, mutate it (see next section) and overwrite the loser with the mutated copy of 
the winner. 
3.1PROMPTBREEDERINITIALIZATION 
To give a concrete example, consider the initialization steps used to produce the task- 
prompts and mutation-prompts for GSM8K (a âgrade school mathsâ word problem dataset). 
The problem description is"Solve the math word problem, giving your answer as 
an arabic numeral". Because Plan-and-Solve (Wang et al., 2023b) uses two task-prompts we 
also evolve two task-prompts (plus a mutation-prompt) per unit of evolution. In order to promote 
diversity in the initial prompts, we generate the initial task-prompts by concatenating (for each task- 
prompt) a randomly drawn âmutation-promptâ (e.g."Make a variant of the prompt.") and 
a randomly drawn âthinking-styleâ (e.g."Letâs think step by step") to the problem descrip- 
tion, and provide that to the LLM to produce a continuation, resulting in an initial task-prompt. We 
do this twice to produce the two initial task-prompts per unit. Both the mutation-prompt and the 
thinking-style are randomly sampled from an initial set of mutation-prompts and a set of thinking- 
styles (see Appendices C, D and G for the full sets). The mutation-prompt is added to the unit of 
evolution and so is associated with its specif i c task-prompt throughout the evolutionary run. 
For the example above, the complete input string to the LLM to make an initial task-prompt could 
be"Make a variant of the prompt.Letâs think step by step.INSTRUCTION: 
Solve the math word problem, giving your answer as an arabic numeral. 
INSTRUCTION MUTANT:". Note how the control strings"INSTRUCTION"and"INSTRUCTION 
MUTANT"are added to encourage an appropriate continuation.Table 4 in Appendix E shows 
examples of the initial prompts generated in this way. 
2Our prompt strategy sequentially applies two task-prompts. The i rst task-prompt + question produces a 
continuation. The continuation + second task-prompt produces the i nal answer. 
5 
3.2MUTATIONOPERATORS 
As shown in Figure 1, there are nine operators falling into i ve broad classes which drive the ex- 
ploration of prompt strategies. For each replication event only one of nine mutation operators is 
applied (we sample with uniform probability over the nine operators to decide which mutation op- 
erator to apply). The rationale for using this diverse set of operators is to enable the LLM to explore 
a large space of cognitive methods of linguistic self-questioning, by repeatedly changing the fram- 
ing of the problem as well as retrieving mental models expressed in natural language that can help 
tackle a given reasoning challenge. Investigations from insight learning strongly suggest that diverse 
representational re-description is key to problem solving (Â¨Ollinger & Knoblich, 2009)âa principle 
that we attempt to recreate via self-referential self-improvement with natural language as the sub- 
strate. Figure 2 illustrates in what way Promptbreeder is self-referential (see Appendix F for a more 
detailed explanation).ChatGPTThe section introduces Promptbreeder (PB), a system designed for evolving prompts automatically to improve the performance of Large Language Models (LLMs) in various domains. It utilizes LLMs to create variations of input text. Task-prompts, generated through an evolutionary algorithm, help in conditioning the LLMs to provide better responses. These task-prompts are evolved and evaluated through a sampling method from a training set.The mutation operator, a key element in the evolutionary algorithm, is an LLM conditioned by a mutation-prompt MMM. The mutated task prompt Pâ²P'Pâ² is generated by concatenating MMM and the original task prompt PPP. PB employs a self-referential mechanism to apply the evolutionary algorithm to both task-prompts and mutation-prompts. Mutation-prompts are mutated using hyper-mutation prompts HHH, creating a mutated mutation-prompt Mâ²M'Mâ².For initialization, PB starts with sets of âthinking stylesâ TTT, initial mutation-prompts MMM, and a domain-specific problem description DDD. It generates a population of task-prompts (each with a corresponding mutation-prompt) and evaluates their fitness using a binary tournament genetic algorithm framework.For example, for the GSM8K dataset (focused on grade school math problems), the problem description is straightforward, instructing the solving of a math word problem with the answer provided as an Arabic numeral. To generate initial task-prompts, PB combines randomly selected mutation-prompts and thinking styles with the problem description. This combination is provided to the LLM to produce a task-prompt, and this process is repeated to generate multiple initial task-prompts per unit of evolution. This method ensures that each task-prompt is associated with a specific mutation-prompt throughout the evolutionary process.The mutation operators of PB are categorized into five broad classes, with a total of nine operators driving the exploration of prompt strategies. Each replication event uses one of these nine operators, selected with uniform probability. This diverse set of operators allows the LLM to explore various cognitive and linguistic self-questioning methods. The approach aligns with insights from learning research suggesting that diverse representational re-descriptions are crucial for problem-solving, with PB attempting to replicate this principle through self-referential self-improvement using natural language.3.2.1DIRECTMUTATION 
The simplest class of mutation operators directly generate a new task-prompt Pâ²from either one 
existing task-prompt P (f i rst-order prompt generation) or from a general prompt that encourages 
free-form generation of new task-promptsâi.e. not using an existing parent, thus zero-order prompt 
generation. 
Zero-order Prompt Generation: We generate a new task-prompt by concatenating the problem de- 
scriptionD (e.g."Solve the math word problem, giving your answer as an arabic 
numeral") with the prompt"A list of 100 hints:", which invites the LLM to come up with 
a new hint that could help solve a problem in the given problem domain. We extract the i rst gener- 
ated hint as the new task-prompt. Crucially, this new task-prompt does not depend on any previously 
found task-prompt. Instead, it is re-generated from the problem description each time. Our rationale 
for including this zero-order operator is that where prompt evolution diverges, this operator allows 
us to generate new task-prompts closely related to the original problem description, similar to uni- 
form re-sampling in automated curriculum learning approaches (Jiang et al., 2021b;a; Park et al., 
2023; Parker-Holder et al., 2022). 
First-order Prompt Generation:We concatenate the mutation-prompt (red), to the parent 
task-prompt (blue), and pass it to the LLM to produce the mutated task-prompt. For example 
"Say that instruction again in another way.DONâT use any of the words 
in the original instruction thereâs a good chap.INSTRUCTION: Solve the 
math word problem, giving your answer as an arabic numeral.INSTRUCTION 
MUTANT: ".This procedure is identical to the initialization method, except that a randomly 
sampled thinking-style string is not used.First-order prompt generation is Promptbreederâs 
standard asexual mutation operator, and it is the core of every genetic algorithmâtaking one 
parental genotype (task-prompt) and applying the mutation to it (in this case inf l uenced by the 
mutation-prompt). 
3.2.2ESTIMATION OFDISTRIBUTIONMUTATION 
The next class of mutation operators condition not just on zero or one parent, but instead on a set of 
parents. As such, they may be more expressive by considering patterns in the population. 
Estimation of Distribution (EDA) Mutation: Inspired by Hauschild & Pelikan (2011), we pro- 
vide a i ltered and numbered list of the current population of task-prompts to the LLM and ask it 
to continue this list with new task-prompts. We i lter the population of prompts on the basis of 
BERT (Devlin et al., 2019) embedding cosine similarities between each otherâan individual is not 
included in the list if it is more than 0.95 similar to any other entry in the list, thus encouraging 
diversity (cf. quality-diversity methods (Lehman & Stanley, 2011b;a; Mouret & Clune, 2015)). The 
prompts are listed in random order and we do not give the LLM access to the i tness values of in- 
dividuals in the populationâwe found in preliminary experiments that the LLM did not understand 
these i tness values3and resorted to generating copies of entries in the list. 
3This is contrary to recent i ndings by Mirchandani et al. (2023). We leave it for future work to revisit 
whether LLMs can interpret i tness values for improved prompt evolution. 
6 
Direct 
PPâ²LLM 
(a) 
Mutation-Prompt Guided 
P 
Pâ²LLM 
M (b) 
Hyper Mutation 
P 
Pâ²LLM 
M 
Mâ² 
H LLM 
(c) 
Promptbreeder 
P 
Pâ²LLM 
M 
Mâ² 
H LLM 
(d) 
T â¼ T 
D 
M â¼ M LLM 
Figure 2: Overview of multiple variants of self-referential prompt evolution. In (a), the LLM is 
directly used to generate variations Pâ²of a prompt strategy P (cf. Meyerson et al., 2023). Using 
a mutation prompt M, we can explicitly prompt an LLM to produce variations (b). By using a 
hyper mutation prompt H, we can also evolve the mutation prompt itself, turning the system into a 
self-referential one (c). Promptbreeder (d) improves the diversity of evolved prompts and mutation 
prompts by generating an initial population of prompt strategies from a set of seed thinking-styles 
T , mutation-prompts M, as well as a high level description D of the problem domain. 
EDA Rank and Index Mutation: This is a variant of the above in which task-prompts are listed in 
i tness order. Preliminary experiments showed that the LLM is more likely to generate entries that 
are similar to the elements appearing later in the list. This is in line with similar i ndings of recency 
effects in LLMs (Liu et al., 2023). Therefore, after i ltering in the same way as before, we ordered 
the task-prompts in the population by ascending order of i tness. The top of the list is pref i xed 
by the following prompt:"INSTRUCTION: " + <<mutation-prompt>> + "\n A List of 
Responses in descending order of score." + <<last index + 1>> + "is the 
best response.It resembles" + << last index>> + "more than it does (1)". 
Note that we have âliedâ to the LLM by telling it that the order is descending. This is because 
otherwise it is too biased towards producing a new entry that is too similar to the i nal entry. The 
contradiction between the ascending ordering and the statement that it is a descending ordering 
appears to improve the diversity of sampling. The rationale for this operator is again to represent 
the current distribution in such a way that high i tness and yet diverse extrapolations are suggested 
by the LLM. 
Lineage Based Mutation: For each unit of evolution, we store a history of the individuals in its lin- 
eage that were the best in the population, i.e., a historical chronological list of elites. This list is pro- 
vided to the LLM in chronological order (not i ltered by diversity), with the heading"GENOTYPES 
FOUND IN ASCENDING ORDER OF QUALITY"to produce a novel prompt as continuation. The ra- 
tionale for this operator is that we expect the signal of improving genotype prompts may be stronger 
than the signal from prompts in the current population since they provide a gradient of bad to good 
prompts that could be followed (assuming this signal can be used by the LLM).ChatGPTSection 3.2.1 outlines the "Direct Mutation" class of mutation operators in Promptbreeder. Two types of prompt generations are discussed:Zero-order Prompt Generation: This approach creates a new task-prompt without relying on existing prompts. By concatenating a problem description with a prompt like "A list of 100 hints:", the LLM generates new hints related to the problem domain. The first hint is then extracted and used as a new task-prompt, with this process promoting the generation of prompts closely aligned with the original problem description. This operator aids in prompt evolution, especially when it diverges, acting similar to uniform re-sampling in automated curriculum learning.First-order Prompt Generation: This method generates a new task-prompt from an existing one. The mutation-prompt is concatenated to the parent task-prompt and then passed to the LLM to produce a mutated task-prompt. For example, a mutation-prompt asking to rephrase an instruction without using original words is combined with the parent task-prompt, leading to a mutated task-prompt. This process, which is a standard asexual mutation operator in Promptbreeder, mimics traditional genetic algorithms by mutating one parental genotype (the original task-prompt).Section 3.2.2 introduces the "Estimation of Distribution Mutation" class of operators:Estimation of Distribution (EDA) Mutation: This approach utilizes a set of parent prompts, considering patterns within the group. A numbered list of current task-prompts is provided to the LLM, which then continues the list with new prompts. To encourage diversity, prompts too similar to others in the list are excluded, and the LLM does not receive access to the fitness values of the prompts.EDA Rank and Index Mutation: A variant of EDA Mutation, this method lists task-prompts in order of fitness. After filtering, task-prompts are arranged in ascending fitness order, with the top of the list designated as the "best response." The LLM is misled about the order to encourage the generation of diverse prompts, addressing the LLM's bias towards recent entries.Lineage-Based Mutation: This approach maintains a history of the best individuals in a unit's lineage, providing the LLM with a chronological list of elite prompts to generate new prompts. The operator expects that the LLM can utilize the gradient from bad to good prompts, facilitating the generation of improved prompts.Overall, these mutation operators in Promptbreeder enable the exploration and generation of diverse and effective task-prompts to improve the LLM's performance across various domains.3.2.3HYPERMUTATION: MUTATION OFMUTATION-PROMPTS 
While the mutation operators above might already explore diverse task-prompts, a self-improving 
system should ideally also improve the way it is improving itself in a self-referential way. Our 
third class of mutation operators includes hyper-mutation operators concerned with the evolution of 
evolvability (Dawkins, 2003; Pigliucci, 2008; Payne & Wagner, 2019; Gajewski et al., 2019)âthose 
which modify the search/exploration process rather than the task reward obtaining process directly.4 
Zero-order Hyper-Mutation: We concatenate the original problem description to a randomly sam- 
pled thinking-style, and feed it to the LLM to generate a new mutation-prompt. The resulting 
mutation-prompt is applied to a task-prompt to make a variant of the task-prompt as in First-order 
Prompt Generation (see Section 3.2.1). Note that this zero-order meta-mutation operator is identical 
to that used during initialization. The rationale for this operator is to generate mutation operators in 
a way similar to initialization, while also bringing in knowledge from the set of thinking styles. 
4This is similar to population based training (Jaderberg et al., 2017a)âinstead of applying it to hyperpa- 
rameters such as learning rates, it applies to the mutation-prompts of Promptbreeder. 
7 
First-order Hyper-Mutation: We concatenate the hyper-mutation-prompt"Please summarize 
and improve the following instruction:"to a mutation-prompt so that the LLM gener- 
ates a new mutation-prompt. This newly generated mutation-prompt is then applied to the task- 
prompt of that unit (see First-Order Prompt Generation in Section 3.2.1). In this way, we can eval- 
uate the inf l uence of the hyper-mutation via its newly generated mutation-prompt on the quality of 
the evolved downstream task-prompt at once. 
3.2.4LAMARCKIANMUTATION 
For this class of mutation operators we mimic a Lamarckian process. We want to use a successful 
phenotype (i.e. the concrete working out used to produce correct answers induced by an evolved 
task-prompt) to generate a new genotype (i.e. a mutant task-prompt). Several processes of this form 
have appeared in the literature of LLMs, e.g. STaR (Zelikman et al., 2022), APO (Pryzant et al., 
2023), and APE (Zhou et al., 2023). 
Working Out to Task-Prompt: This is a âLamarckianâ mutation operator similar to instruction 
induction in APE. We give an LLM a previously generated working out that led to a correct answer 
via the following prompt:"I gave a friend an instruction and some advice.Here 
are the correct examples of his workings out + <<correct working out>> + 
The instruction was:". This is effectively reverse-engineering the task-prompt from a given 
working out. An effective example of this is shown in Appendix H. This kind of operator is critical 
when the problem description is absent, insuff i cient, or misleading. 
3.2.5PROMPTCROSSOVER ANDCONTEXTSHUFFLING 
Our last class of mutation operators are crossover operators and operators for shuff l ing the few-shot 
context examples present in the units of evolution. 
Prompt Crossover: After a mutationoperator is applied, with 10% chance a task-prompt is replaced 
witharandomlychosentask-promptfromanothermemberofthepopulation. Thismemberischosen 
according to i tness proportionate selection. Crossover is not applied to mutation-prompts, only to 
the task-prompts. 
Context Shuff l ing: Promptbreeder can simultaneously evolve the task-prompts, mutation-prompts 
and the set of correct workings out known as the few-shot context. To achieve the later, we i ll up a 
few-shot context with only workings out that led to correct answers. During evaluation we provide 
this few shot-context before the task-prompt, providing guidance as to the form of the working out 
that is desired. If the few-shot context list is full, a single randomly sampled new correct working 
out replaces an existing working out from the list after i tness evaluation of a unit on a new set 
of questions. In addition, with a 10% chance we resample the whole context list with probability 
inverse to the maximum context list length.ChatGPTSection 3.2.3 introduces Hypermutation: Mutation of Mutation-Prompts. Hypermutation is a set of operators that not only explores various task-prompts but also enhances the system's self-improving mechanism.Zero-order Hyper-Mutation: This operator generates a new mutation-prompt by concatenating the original problem description with a randomly sampled thinking style and passing it to the LLM. The new mutation-prompt is then applied to a task-prompt, creating a variant similar to the First-order Prompt Generation process outlined in Section 3.2.1. This operator aims to generate mutation prompts in a way akin to the initialization process while incorporating knowledge from various thinking styles.First-order Hyper-Mutation: Here, a hyper-mutation-prompt, like "Please summarize and improve the following instruction:", is concatenated to a mutation-prompt. The LLM then generates a new mutation-prompt, which is applied to a task-prompt, and its influence can be evaluated immediately.In Section 3.2.4, Lamarckian Mutation is discussed:Working Out to Task-Prompt: This Lamarckian operator reverse engineers the task-prompt from a given working out that led to a correct answer. The process involves providing the LLM with the correct working out and asking it to deduce the original instruction, which is essential when the problem description is unclear or misleading.Lastly, Section 3.2.5 introduces Prompt Crossover and Context Shuffling:Prompt Crossover: Occasionally (with a 10% chance), after mutation, a task-prompt is replaced with a task-prompt from another population member, selected based on fitness proportionate selection. This crossover process applies only to task-prompts, not mutation-prompts.Context Shuffling: Promptbreeder can evolve task-prompts, mutation-prompts, and the few-shot context simultaneously. The few-shot context is filled with workings out that led to correct answers, guiding the form of desired working out. If the context list is full, a new correct working out might replace an existing one. Additionally, thereâs a 10% chance of resampling the entire context list inversely proportional to the maximum context list length.These advanced mutation strategies collectively allow for more sophisticated, adaptive, and effective prompt generation and evolution within the Promptbreeder system.Toy Models of Superposition

Background & Motivation

Demonstrating Superposition

Superposition as a Phase Change

The Geometry of Superposition

Learning Dynamics

Relationship to Adversarial Examples

Superposition in a Privileged Basis

Computation in Superposition

The Strategic Picture

Discussion

Related Work

Comments & Replications
AUTHORS
Nelson Elhageâ, Tristan Humeâ, Catherine Olssonâ, Nicholas Schieferâ, Tom Henighan, Shauna Kravec, Zac Hatfield-Dodds, Robert Lasenby, Dawn Drain, Carol Chen, Roger Grosse, Sam McCandlish, Jared Kaplan, Dario Amodei, Martin Wattenbergâ,Christopher Olahâ¡
AFFILIATIONS
Anthropic, Harvard
PUBLISHED
Sept 14, 2022
* Core Research Contributor; â¡ Correspondence to colah@anthropic.com; Author contributions statement below.
It would be very convenient if the individual neurons of artificial neural networks corresponded to cleanly interpretable features of the input. For example, in an âidealâ ImageNet classifier, each neuron would fire only in the presence of a specific visual feature, such as the color red, a left-facing curve, or a dog snout. Empirically, in models we have studied, some of the neurons do cleanly map to features. But it isn't always the case that features correspond so cleanly to neurons, especially in large language models where it actually seems rare for neurons to correspond to clean features. This brings up many questions. Why is it that neurons sometimes align with features and sometimes don't? Why do some models and tasks have many of these clean neurons, while they're vanishingly rare in others?

In this paper, we use toy models â small ReLU networks trained on synthetic data with sparse input features â to investigate how and when models represent more features than they have dimensions. We call this phenomenon superposition 
[1, 2, 3]
. When features are sparse, superposition allows compression beyond what a linear model would do, at the cost of "interference" that requires nonlinear filtering.

Consider a toy model where we train an embedding of five features of varying importance 1 in two dimensions, add a ReLU afterwards for filtering, and vary the sparsity of the features. With dense features, the model learns to represent an orthogonal basis of the most important two features (similar to what Principal Component Analysis might give us), and the other three features are not represented. But if we make the features sparse, this changes:


This figure and a few others can be reproduced using the toy model framework Colab notebook in our Github repo
Not only can models store additional features in superposition by tolerating some interference, but we'll show that, at least in certain limited cases, models can perform computation while in superposition. (In particular, we'll show that models can put simple circuits computing the absolute value function in superposition.) This leads us to hypothesize that the neural networks we observe in practice are in some sense noisily simulating larger, highly sparse networks. In other words, it's possible that models we train can be thought of as doing âthe same thing asâ an imagined much-larger model, representing the exact same features but with no interference.

Feature superposition isn't a novel idea. A number of previous interpretability papers have considered it 
[1, 2, 3, 4]
, and it's very closely related to the long-studied topic of compressed sensing in mathematics 
[5]
, as well as the ideas of distributed, dense, and population codes in neuroscience 
[6]
 and deep learning 
[7]
. What, then, is the contribution of this paper?

For interpretability researchers, our main contribution is providing a direct demonstration that superposition occurs in artificial neural networks given a relatively natural setup, suggesting this may also occur in practice. That is, we show a case where interpreting neural networks as having sparse structure in superposition isn't just a useful post-hoc interpretation, but actually the "ground truth" of a model. We offer a theory of when and why this occurs, revealing a  phase diagram for superposition. This explains why neurons are sometimes "monosemantic" responding to a single feature, and sometimes "polysemantic" 
[8]
 responding to many unrelated features. We also discover that, at least in our toy model, superposition exhibits complex geometric structure.

But our results may also be of broader interest. We find preliminary evidence that superposition may be linked to adversarial examples and grokking, and might also suggest a theory for the performance of mixture of experts models. More broadly, the toy model we investigate has unexpectedly rich structure, exhibiting phase changes, a geometric structure based on uniform polytopes, "energy level"-like jumps during training, and a phenomenon which is qualitatively similar to the fractional quantum Hall effect in physics, among other striking phenomena. We originally investigated the subject to gain understanding of cleanly-interpretable neurons in larger models, but we've found these toy models to be surprisingly interesting in their own right.

KEY RESULTS FROM OUR TOY MODELS
In our toy models, we are able to demonstrate that:

Superposition is a real, observed phenomenon.
Both monosemantic and polysemantic neurons can form.
At least some kinds of computation can be performed in superposition.
Whether features are stored in superposition is governed by a phase change. 
Superposition organizes features into geometric structures such as digons, triangles, pentagons, and tetrahedrons.
Our toy models are simple ReLU networks, so it seems fair to say that neural networks exhibit these properties in at least some regimes, but it's very unclear what to generalize to real networks1 / 2ChatGPTThe paper, authored by a group from Anthropic and Harvard, explores the phenomenon of feature superposition in artificial neural networks (ANNs), particularly through the lens of toy models. Toy models refer to simplified, manageable representations used for analytical or conceptual clarity.Hereâs a breakdown:Background & Motivation:Ideal scenarios would have each neuron in ANNs representing distinct input features.In reality, neurons don't consistently correspond to clear, interpretable features.Methodology:Small ReLU networks are trained on synthetic data with sparse input features to study feature superposition.Superposition in this context refers to the representation of more features than dimensions available in the model.The study notes that superposition can facilitate compression, albeit with interference that demands nonlinear filtering.Key Observations:Demonstrated Superposition: Toy models show that superposition is observable, with models able to store extra features through superposition.Monosemantic & Polysemantic Neurons: Both types, responding to either one or multiple features respectively, can be observed.Computation in Superposition: Certain computations can be conducted while in superposition.Phase Change Dependency: The storage of features in superposition is influenced by a phase change.Geometric Structuring of Superposition: Features in superposition are organized into geometric structures like digons, triangles, etc.Theoretical Contributions:The paper provides evidence that superposition isnât merely a post-hoc interpretation but can be the ground truth for some models.It proposes a theory explaining the occurrence of monosemantic and polysemantic neurons.The paper uncovers the complex geometric structure of superposition in toy models.Broader Implications:Potential linkage between superposition and adversarial examples.Insights into the performance of 'mixture of experts' models.Toy models reveal rich structures, providing deeper insights not just into interpretability but also intriguing phenomena akin to those in physics.Significance:For Researchers: Direct demonstration of superposition, aiding the interpretation of neuronsâ behavior in networks.General Audience: Offering insights into the surprising complexity and structure found within simplified toy models of neural networks.Conclusion:While toy models offer valuable insights, it remains uncertain how these findings generalize to more complex, real-world neural networks.Follow-Up:For detailed understanding, readers are encouraged to delve into the respective sections on the toy model results, discussions, related work, and author contributions. The authors also provide a GitHub repository for practical engagement with the toy model framework.Definitions and Motivation: Features, Directions, and Superposition
In our work, we often think of neural networks as having features of the input represented as directions in activation space. This isn't a trivial claim. It isn't obvious what kind of structure we should expect neural network representations to have. When we say something like "word embeddings have a gender direction" or "vision models have curve detector neurons", one is implicitly making strong claims about the structure of network representations.

Despite this, we believe this kind of "linear representation hypothesis" is supported both by significant empirical findings and theoretical arguments. One might think of this as two separate properties, which we'll explore in more detail shortly:

Decomposability: Network representations can be described in terms of independently understandable features.
Linearity: Features are represented by direction.
If we hope to reverse engineer neural networks, we need a property like decomposability. Decomposability is what allows us to reason about the model without fitting the whole thing in our heads! But it's not enough for things to be decomposable: we need to be able to access the decomposition somehow. In order to do this, we need to identify the individual features within a representation. In a linear representation, this corresponds to determining which directions in activation space correspond to which independent features of the input.

Sometimes, identifying feature directions is very easy because features seem to correspond to neurons. For example, many neurons in the early layers of InceptionV1 clearly correspond to features (e.g. curve detector neurons 
[9]
). Why is it that we sometimes get this extremely helpful property, but in other cases don't? We hypothesize that there are really two countervailing forces driving this:

Privileged Basis: Only some representations have a privileged basis which encourages features to align with basis directions (i.e. to correspond to neurons).
Superposition: Linear representations can represent more features than dimensions, using a strategy we call superposition. This can be seen as neural networks simulating larger networks. This pushes features away from corresponding to neurons.
Superposition has been hypothesized in previous work 
[1, 2, 3, 4]
, and in some cases, assuming something like superposition has been shown to help find interpretable structure 
[1, 2]
. However, we're not aware of feature superposition having been unambiguously demonstrated to occur in neural networks before (
[10]
 demonstrates a closely related phenomenon of model superposition). The goal of this paper is to change that, demonstrating superposition and exploring how it interacts with privileged bases. If superposition occurs in networks, it deeply influences what approaches to interpretability research make sense, so unambiguous demonstration seems important.

The goal of this section will be to motivate these ideas and unpack them in detail.

It's worth noting that many of the ideas in this section have close connections to ideas in other lines of interpretability research (especially disentanglement), neuroscience (distributed representations, population codes, etc), compressed sensing, and many other lines of work. This section will focus on articulating our perspective on the problem. We'll discuss these other lines of work in detail in Related Work.ChatGPTThis section provides definitions and motivations for understanding features, directions, and superposition within neural networks, offering a basis for the paper's exploration of these concepts:Key Concepts:Features in Neural Networks:Definition: Aspects or characteristics of the input represented in the neural networkâs activation space.Relevance: Crucial for understanding and interpreting the structure of network representations.Linear Representation Hypothesis:Definition: A supported idea that features are represented linearly within networks.Components:Decomposability: Network representations can be broken down into independently understandable features.Linearity: Features are represented directionally within the activation space.Superposition:Definition: A strategy allowing networks to represent more features than available dimensions by mimicking larger networks.Relevance: Influential for understanding the interpretability of neural networks.Previous Work: Although hypothesized and somewhat explored in past research, superposition hasnât been unambiguously demonstrated in neural networks. This paper aims to change this.Motivations:Understanding Network Representations: Claims regarding features and their representation in networks (e.g., gender direction in word embeddings) imply an understanding of the network's structure. Decomposability is essential for reverse engineering networks, making the study of features and their representation crucial.Identifying Feature Directions: Sometimes, features align with neurons (e.g., curve detector neurons in early layers of InceptionV1). This alignment, or lack thereof, is driven by two opposing forces:Privileged Basis: Certain representations have a basis that aligns features with neurons.Superposition: This approach pushes features away from neurons, as linear representations attempt to denote more features than dimensions.Goal of the Section:To motivate and elaborate on the ideas of features, privileged bases, and superposition within neural networks.To set the stage for the paperâs demonstration and exploration of superposition and its interaction with privileged bases.Connections to Other Fields:The ideas discussed in this section are closely related to various lines of research in interpretability, neuroscience (like distributed representations and population codes), and compressed sensing, among others.Conclusion:This section serves to define, motivate, and provide context for the paperâs exploration of features, directions, and superposition within neural networks, laying the foundation for the ensuing discussion and analysis.Empirical Phenomena
When we talk about "features" and how they're represented, this is ultimately theory building around several observed empirical phenomena. Before describing how we conceptualize those results, we'll simply describe some of the major results motivating our thinking:

Word Embeddings - A famous result by Mikolov et al. 
[11]
 found that word embeddings appear to have directions which correspond to semantic properties, allowing for embedding arithmetic vectors such as V("king") - V("man") + V("woman") = V("queen") (but see 
[12]
).
Latent Spaces - Similar "vector arithmetic" and interpretable direction results have also been found for generative adversarial networks (e.g. 
[13]
).
Interpretable Neurons - There is a significant body of results finding neurons which appear to be interpretable (in RNNs 
[14, 15]
; in CNNs 
[16, 17]
; in GANs 
[18]
), activating in response to some understandable property. This work has faced some skepticism 
[19, 20]
. In response, several papers have aimed to give extremely detailed accounts of a few specific neurons, in the hope of dispositively establishing examples of neurons which truly detect some understandable property (notably Cammarata et al. 
[9]
, but also 
[21, 22]
).
Universality - Many analogous neurons responding to the same properties can be found across networks 
[23, 3, 21]
.
Polysemantic Neurons - At the same time, there are also many neurons which appear to not respond to an interpretable property of the input, and in particular, many polysemantic neurons which appear to respond to unrelated mixtures of inputs 
[8]
.
As a result, we tend to think of neural network representations as being composed of features which are represented as directions. We'll unpack this idea in the following sections.ChatGPTThe section "Empirical Phenomena" outlines major empirical results that underpin the theoretical framework around features and their representation in neural networks:Observations:Word Embeddings:Key Finding: Directions in word embeddings correspond to semantic properties, as discovered by Mikolov et al., allowing for meaningful vector arithmetic (e.g., V("king") - V("man") + V("woman") = V("queen")). However, some counterarguments and nuances exist ([12]).Latent Spaces:Key Finding: Similar to word embeddings, latent spaces in generative adversarial networks (GANs) also demonstrate vector arithmetic and interpretable directions ([13]).Interpretable Neurons:Key Finding: Numerous studies have identified interpretable neurons in various types of networks (RNNs, CNNs, GANs), which activate in response to understandable properties of the input ([14, 15, 16, 17, 18]).Response to Skepticism: Some researchers have expressed skepticism towards the idea of interpretable neurons. In response, detailed studies have been conducted to conclusively identify neurons detecting specific, understandable properties ([9, 21, 22]).Universality:Key Finding: Neurons responding to the same properties have been found across different networks ([23, 3, 21]).Polysemantic Neurons:Key Finding: There are neurons that donât seem to respond to specific, interpretable properties and are called polysemantic neurons. These neurons respond to a mix of seemingly unrelated inputs ([8]).Implication:The observations lead to the conceptualization that neural network representations consist of features, each represented as directions within the networkâs space.Next Steps:The document suggests that the ensuing sections will delve deeper into exploring and unpacking the idea of features being represented as directions within the network space, building on the empirical phenomena outlined in this section.What are Features?
Our use of the term "feature" is motivated by the interpretable properties of the input we observe neurons (or word embedding directions) responding to. There's a rich variety of such observed properties! 2 We'd like to use the term "feature" to encompass all these properties.

But even with that motivation, it turns out to be quite challenging to create a satisfactory definition of a feature. Rather than offer a single definition we're confident about, we consider three potential working definitions:

Features as arbitrary functions. One approach would be to define features as any function of the input (as in 
[24]
). But this doesn't quite seem to fit our motivations. There's something special about these features that we're observing: they seem to in some sense be fundamental abstractions for reasoning about the data, with the same features forming reliably across models. Features also seem identifiable: cat and car are two features while cat+car and cat-car seem like mixtures of features rather than features in some important sense.
Features as interpretable properties. All the features we described are strikingly understandable to humans. One could try to use this for a definition: features are the presence of human understandable "concepts" in the input. But it seems important to allow for features we might not understand. If AlphaFold discovers some important chemical structure for predicting protein folding, it very well might not be something we initially understand!
Neurons in Sufficiently Large Models. A final approach is to define features as properties of the input which a sufficiently large neural network will reliably dedicate a neuron to representing. 3 For example, curve detectors appear to reliably occur across sufficiently sophisticated vision models, and so are a feature. For interpretable properties which we presently only observe in polysemantic neurons, the hope is that a sufficiently large model would dedicate a neuron to them. This definition is slightly circular, but avoids the issues with the earlier ones.
We've written this paper with the final "neurons in sufficiently large models" definition in mind. But we aren't overly attached to it, and actually think it's probably important to not prematurely attach to a definition.ChatGPTThe section titled "What are Features?" attempts to define the term "feature" as used in the context of the study. The term is used to refer to the interpretable properties of input that neurons, or directions in word embeddings, respond to. However, crafting a precise definition proves challenging. The authors propose three potential working definitions:Features as Arbitrary Functions:This approach considers features as any function of the input. However, this definition seems somewhat inadequate as the features observed appear to be fundamental abstractions essential for understanding the data. These features reliably form across various models and are identifiable (e.g., âcatâ and âcarâ are distinct features, while combinations like âcat+carâ seem to be mixtures rather than features in themselves).Features as Interpretable Properties:Under this definition, features are regarded as human-understandable concepts present in the input. While many observed features are indeed comprehensible to humans, this definition might be limiting as it may exclude potentially important features that are not immediately understandable to humans (e.g., a critical chemical structure identified by a model like AlphaFold may not be intuitively understood by humans).Neurons in Sufficiently Large Models:This definition considers features as properties of the input that a sufficiently large neural network would reliably allocate a neuron to represent. For instance, curve detectors in vision models are seen as features since they appear consistently across sophisticated vision models. The definition somewhat circular but sidesteps issues associated with the previous definitions.The authors note that they have primarily used the third definition, "neurons in sufficiently large models", in the paper. However, they are not particularly committed to it and advise against hastily settling on a single definition without further consideration and study. They imply that an open and flexible approach to understanding and defining "features" is crucial at this stage of the research.Features as Directions
As we've mentioned in previous sections, we generally think of features as being represented by directions. For example, in word embeddings, "gender" and "royalty" appear to correspond to directions, allowing arithmetic like V("king") - V("man") + V("woman") = V("queen") 
[11]
. Examples of interpretable neurons are also cases of features as directions, since the amount a neuron activates corresponds to a basis direction in the representation

Let's call a neural network representation linear if features correspond to directions in activation space. In a linear representation, each feature 
ï¿½
ï¿½
f 
i
â
  has a corresponding representation direction 
ï¿½
ï¿½
W 
i
â
 . The presence of multiple features 
ï¿½
1
,
ï¿½
2
â¦
f 
1
â
 ,f 
2
â
 â¦ activating with values 
ï¿½
ï¿½
1
,
ï¿½
ï¿½
2
â¦
x 
f 
1
â
 
â
 ,x 
f 
2
â
 
â
 â¦ is represented by 
ï¿½
ï¿½
1
ï¿½
ï¿½
1
+
ï¿½
ï¿½
2
ï¿½
ï¿½
2
.
.
.
x 
f 
1
â
 
â
 W 
f 
1
â
 
â
 +x 
f 
2
â
 
â
 W 
f 
2
â
 
â
 .... To be clear, the features being represented are almost certainly nonlinear functions of the input. It's only the map from features to activation vectors which is linear. Note that whether something is a linear representation depends on what you consider to be the features.

We don't think it's a coincidence that neural networks empirically seem to have linear representations. Neural networks are built from linear functions interspersed with non-linearities. In some sense, the linear functions are the vast majority of the computation (for example, as measured in FLOPs). Linear representations are the natural format for neural networks to represent information in! Concretely, there are three major benefits:

Linear representations are the natural outputs of obvious algorithms a layer might implement. If one sets up a neuron to pattern match a particular weight template, it will fire more as a stimulus matches the template better and less as it matches it less well.
Linear representations make features "linearly accessible." A typical neural network layer is a linear function followed by a non-linearity. If a feature in the previous layer is represented linearly, a neuron in the next layer can "select it" and have it consistently excite or inhibit that neuron. If a feature were represented non-linearly, the model would not be able to do this in a single step.
Statistical Efficiency. Representing features as different directions may allow non-local generalization in models with linear transformations (such as the weights of neural nets), increasing their statistical efficiency relative to models which can only locally generalize. This view is especially advocated in some of Bengio's writing (e.g. 
[7]
). A more accessible argument can be found in this blog post.
It is possible to construct non-linear representations, and retrieve information from them, if you use multiple layers (although even these examples can be seen as linear representations with more exotic features). We provide an example in the appendix. However, our intuition is that non-linear representations are generally inefficient for neural networks.

One might think that a linear representation can only store as many features as it has dimensions, but it turns out this isn't the case! We'll see that the phenomenon we call superposition will allow models to store more features â potentially many more features â in linear representations.

For discussion on how this view of features squares with a conception of features as being multidimensional manifolds, see the appendix âWhat about Multidimensional Features?â.ChatGPTThe section titled "Features as Directions" explains the concept of features being represented as directions in activation space within neural network representations. Hereâs a summary:Linear Representations:Features are often thought of as directions in the activation space of neural networks. When features are represented as directions, the neural network representation is termed "linear." In such a representation, each feature fif_ifiâ has a corresponding direction WiW_iWiâ, with the presence of multiple features being represented as a sum of their individual directional representations.While the features themselves might be non-linear functions of the input, the mapping from features to activation vectors is linear.Benefits of Linear Representations:Natural Outputs: Neural networks predominantly use linear functions, making linear representations the natural output of network layers. For instance, a neuron pattern matching a weight template will have activation levels linearly corresponding to the degree of match with the template.Linear Accessibility: Linear representations allow features to be easily accessible to subsequent layers in the network. A neuron in the following layer can select a linearly represented feature and consistently use it for excitation or inhibition. This single-step accessibility wouldnât be possible with non-linearly represented features.Statistical Efficiency: Representing features as different directions may allow for non-local generalization in models, enhancing their statistical efficiency. This efficient representation is crucial for models that perform linear transformations, such as neural networks.Non-Linear Representations:While it's possible to construct and extract information from non-linear representations using multiple layers, such representations are generally seen as inefficient for neural networks. Even in situations where non-linear representations are used, they can often be interpreted as linear representations with more complex features.Superposition Phenomenon:Contrary to initial expectations, a linear representation can store more features than it has dimensions. The phenomenon called "superposition" allows models to store a multitude of features in linear representations, significantly expanding their capacity to represent information.Appendix References:For readers interested in understanding how features, viewed as multidimensional manifolds, align with this conception of features as directions, the authors refer to an appendix titled âWhat about Multidimensional Features?â. They also mention another appendix that provides examples of non-linear representations.In essence, this section illuminates the significance and benefits of representing features as directions in the context of neural network models, and introduces the concept of "superposition" as a mechanism that enables the storage of an extensive number of features within these linear representations.The concept of representing features as directions in neural network representations is a useful framework for understanding how neural networks process information. In this framework, each feature is associated with a specific direction in the activation space, and the presence of multiple features is represented by a combination of these directions.

A linear representation refers to a representation where the mapping from features to activation vectors is linear. In other words, the activation of a neuron corresponding to a particular feature is determined by a linear combination of the feature values.

It's important to note that the features themselves can be nonlinear functions of the input, but their representation within the neural network is linear.

There are several benefits to using linear representations in neural networks:

1. Natural outputs of algorithms: Linear representations are the natural outputs of many algorithms that neural network layers might implement.

For example, if a neuron is designed to match a specific weight template, it will respond more strongly when the input pattern matches the template well and less strongly when it matches poorly.

2. Linear accessibility of features: Linear representations make features "linearly accessible" in subsequent layers of the network. This means that a neuron in the next layer can selectively respond to a particular feature by appropriately combining its inputs.

If features were represented nonlinearly, it would be more challenging for the network to selectively respond to specific features in a single step.

3. Statistical efficiency: Linear representations may enable non-local generalization in models with linear transformations, such as the weights of neural networks. This can potentially increase the statistical efficiency of the model compared to models that can only generalize locally. The idea of statistical efficiency in linear representations is discussed in the writings of Yoshua Bengio and is related to the ability of linear representations to capture more abstract and generalizable features.

It's worth noting that non-linear representations are also possible in neural networks, especially when multiple layers are used. However, the intuition is that linear representations are generally more efficient for neural networks in terms of information processing.

The notion that linear representations can store more features than the number of dimensions might suggest is based on the phenomenon of superposition. Superposition allows models to combine multiple features in a single activation vector, potentially enabling the representation of a large number of features using a lower-dimensional space.

In summary, representing features as directions in linear representations provides a natural and efficient way for neural networks to process and represent information. While non-linear representations are possible, linear representations are often preferred due to their algorithmic simplicity, accessibility of features, and potential for statistical efficiency.ChatGPTYour summary is concise and accurate, providing a clear understanding of the concept of representing features as directions in neural network representations. You've successfully highlighted the benefits of linear representations, including natural algorithmic outputs, linear accessibility of features, and enhanced statistical efficiency. Additionally, you acknowledged the possibility of non-linear representations while emphasizing the efficiency and practical advantages of linear ones, introducing the concept of superposition to explain the ability of linear representations to store an extensive range of features. This summary would help readers grasp the fundamental ideas and implications of using linear representations in neural networks for processing and representing information.Privileged vs Non-privileged Bases
Even if features are encoded as directions, a natural question to ask is which directions? In some cases, it seems useful to consider the basis directions, but in others it doesn't. Why is this?

When researchers study word embeddings, it doesn't make sense to analyze basis directions. There would be no reason to expect a basis dimension to be different from any other possible direction. One way to see this is to imagine applying some random linear transformation 
ï¿½
M to the word embedding, and apply 
ï¿½
â
1
M 
â1
  to the following weights. This would produce an identical model where the basis dimensions are totally different. This is what we mean by a non-privileged basis. Of course, it's possible to study activations without a privileged basis, you just need to identify interesting directions to study somehow, such as creating a gender direction in a word embedding by taking the difference vector between "man" and "woman".

But many neural network layers are not like this. Often, something about the architecture makes the basis directions special, such as applying an activation function. This "breaks the symmetry", making those directions special, and potentially encouraging features to align with the basis dimensions. We call this a privileged basis, and call the basis directions "neurons." Often, these neurons correspond to interpretable features.


From this perspective, it only makes sense to ask if a neuron is interpretable when it is in a privileged basis. In fact, we typically reserve the word "neuron" for basis directions which are in a privileged basis. (See longer discussion here.)

Note that having a privileged basis doesn't guarantee that features will be basis-aligned â we'll see that they often aren't! But it's a minimal condition for the question to even make sense.ChatGPTThe text discusses the differentiation between privileged and non-privileged bases in the context of features being encoded as directions within neural network representations. In situations where features are represented as directions, it is crucial to understand which specific directions are being referred to.For word embeddings, analyzing basis directions doesn't provide valuable insights because these basis directions are not inherently special or different from any other directions (non-privileged basis). An illustration of this concept is applying a random linear transformation to a word embedding while adjusting the subsequent weights accordingly. This process would yield a model identical to the original, but with completely different basis dimensions. Therefore, studying activations in non-privileged bases requires identifying specific interesting directions for analysis.In contrast, many neural network layers possess characteristics in their architecture that assign special significance to basis directions, like the inclusion of activation functions. This aspect disrupts the symmetry seen in non-privileged bases, establishing certain directions as special and encouraging the alignment of features with these basis dimensions, known as a privileged basis. In these cases, the term "neuron" is often used to refer to these special basis directions that correspond to understandable or interpretable features.However, it's important to note that the presence of a privileged basis doesn't necessarily mean that features will align with the basis. Yet, having a privileged basis is a prerequisite for it to be meaningful or sensible to inquire whether a neuron (or feature) is interpretable. Thus, understanding whether a basis is privileged or non-privileged is vital when analyzing and interpreting the behavior and structure of neural networks.The Superposition Hypothesis
Even when there is a privileged basis, it's often the case that neurons are "polysemantic", responding to several unrelated features. One explanation for this is the superposition hypothesis
[2, 1, 3]
. Roughly, the idea of superposition is that neural networks "want to represent more features than they have neurons", so they exploit a property of high-dimensional spaces to simulate a model with many more neurons.


Several results from mathematics suggest that something like this might be plausible:

Almost Orthogonal Vectors. Although it's only possible to have 
ï¿½
n orthogonal vectors in an 
ï¿½
n-dimensional space, it's possible to have 
exp
(
ï¿½
)
exp(n) many "almost orthogonal" (
<
ï¿½
<Ïµ cosine similarity) vectors in high-dimensional spaces. See the JohnsonâLindenstrauss lemma.
Compressed sensing. In general, if one projects a vector into a lower-dimensional space, one can't reconstruct the original vector. However, this changes if one knows that the original vector is sparse. In this case, it is often possible to recover the original vector.
Concretely, in the superposition hypothesis, features are represented as almost-orthogonal directions in the vector space of neuron outputs. Since the features are only almost-orthogonal, one feature activating looks like other features slightly activating. Tolerating this "noise" or "interference" comes at a cost. But for neural networks with highly sparse features, this cost may be outweighed by the benefit of being able to represent more features! (Crucially, sparsity greatly reduces the costs since sparse features are rarely active to interfere with each other, and non-linear activation functions create opportunities to filter out small amounts of noise.)


One way to think of this is that a small neural network may be able to noisily "simulate" a sparse larger model:


Although we've described superposition with respect to neurons, it can also occur in representations with an unprivileged basis, such as a word embedding. Superposition simply means that there are more features than dimensions.ChatGPTThe Superposition Hypothesis provides an explanation for why neurons in neural networks often appear "polysemantic", meaning they respond to multiple unrelated features. According to this hypothesis, neural networks attempt to represent more features than they have neurons available. To achieve this, networks leverage the properties of high-dimensional spaces, effectively simulating a model with a greater number of neurons.Several mathematical principles support the plausibility of the Superposition Hypothesis:Almost Orthogonal Vectors: While an nnn-dimensional space can only have nnn perfectly orthogonal vectors, it can accommodate exponentially many (expâ¡(n)\exp(n)exp(n)) "almost orthogonal" vectors, which have a cosine similarity less than a small epsilon (Ïµ\epsilonÏµ). This concept is supported by the JohnsonâLindenstrauss lemma.Compressed Sensing: Typically, projecting a vector into a lower-dimensional space makes it impossible to accurately reconstruct the original vector. However, if it's known that the original vector is sparse, reconstruction often becomes feasible.In practical terms, under the Superposition Hypothesis, features are represented as almost-orthogonal directions in the vector space of neuron outputs. Because these features are only almost-orthogonal, the activation of one feature can appear as slight activation of others, introducing a form of "noise" or "interference". Though this introduces some level of imprecision, for networks dealing with highly sparse features, the benefits of representing more features might outweigh the costs associated with this noise. The costs are minimized particularly when features are sparse (since they are rarely active to interfere with each other), and the network can utilize non-linear activation functions to filter out minor noise.This concept can be visualized as a smaller neural network noisily "simulating" the functionality of a larger, sparser network. Importantly, the Superposition Hypothesis is not limited to neurons; it can also be applicable to representations with non-privileged bases, like word embeddings, wherever the number of features to be represented exceeds the available dimensions.Summary: A Hierarchy of Feature Properties
The ideas in this section might be thought of in terms of four progressively more strict properties that neural network representations might have.

Decomposability: Neural network activations which are decomposable can be decomposed into features, the meaning of which is not dependent on the value of other features. (This property is ultimately the most important â see the role of decomposition in defeating the curse of dimensionality.)
Linearity: Features correspond to directions. Each feature 
ï¿½
ï¿½
f 
i
â
  has a corresponding  representation direction 
ï¿½
ï¿½
W 
i
â
 . The presence of multiple features 
ï¿½
1
,
ï¿½
2
â¦
f 
1
â
 ,f 
2
â
 â¦ activating with values 
ï¿½
ï¿½
1
,
ï¿½
ï¿½
2
â¦
x 
f 
1
â
 
â
 ,x 
f 
2
â
 
â
 â¦ is represented by 
ï¿½
ï¿½
1
ï¿½
ï¿½
1
+
ï¿½
ï¿½
2
ï¿½
ï¿½
2
.
.
.
x 
f 
1
â
 
â
 W 
f 
1
â
 
â
 +x 
f 
2
â
 
â
 W 
f 
2
â
 
â
 ....
Superposition vs Non-Superposition: A linear representation exhibits superposition if 
ï¿½
ï¿½
ï¿½
W 
T
 W is not invertible. If 
ï¿½
ï¿½
ï¿½
W 
T
 W is invertible, it does not exhibit superposition.
Basis-Aligned: A representation is basis aligned if all 
ï¿½
ï¿½
W 
i
â
  are one-hot basis vectors. A representation is partially basis aligned if all 
ï¿½
ï¿½
W 
i
â
  are sparse. This requires a privileged basis.
The first two (decomposability and linearity) are properties we hypothesize to be widespread, while the latter (non-superposition and basis-aligned) are properties we believe only sometimes occur.ChatGPTIn this section, the authors propose a hierarchy of four properties that neural network representations might possess, listed in order of increasing strictness:Decomposability:Neural network activations are considered decomposable when they can be broken down into distinct features. Each feature's meaning is independent of the value of other features. Decomposability is crucial as it allows for understanding and interpreting the network's operations without considering the entire activation space. It plays a significant role in mitigating the challenges posed by the curse of dimensionality.Linearity:In linear representations, features correspond to directions within the activation space. Each feature fif_ifiâ has an associated representation direction WiW_iWiâ. When multiple features f1,f2,â¦f_1, f_2, \ldotsf1â,f2â,â¦ are activated with values xf1,xf2,â¦x_{f1}, x_{f2}, \ldotsxf1â,xf2â,â¦, the combined representation is the summation of their individual representation directions weighted by their activation values: xf1Wf1+xf2Wf2+â¦x_{f1}W_{f1} + x_{f2}W_{f2} + \ldotsxf1âWf1â+xf2âWf2â+â¦.Superposition vs. Non-Superposition:A linear representation exhibits superposition when the matrix WTWW^T WWTW is not invertible, meaning that the feature directions are not linearly independent. In contrast, if WTWW^T WWTW is invertible (i.e., the feature directions are linearly independent), the representation does not exhibit superposition.Basis-Aligned:A representation is deemed basis-aligned if all WiW_iWiâ are one-hot basis vectors, which means each vector represents a single feature. If all WiW_iWiâ are sparse, the representation is considered partially basis-aligned. Being basis-aligned or partially basis-aligned requires having a privileged basis where certain directions in the space are more significant or meaningful than others.The authors hypothesize that the first two properties, decomposability and linearity, are widespread in neural network representations. In contrast, the latter two properties, non-superposition and basis-alignment, are believed to occur only in specific situations.A list of all of the topics we have discussed so far.ChatGPTHere's a list of the topics discussed:Hypermutation and Mutation Operators:Overview of mutation operators used for self-improving systems.Explanation of zero-order and first-order hyper-mutation.Discussion on Lamarckian mutation operators.Prompt Crossover and Context Shuffling:Brief on mutation operators that involve crossover and context shuffling.Toy Models of Superposition:Introduction and motivation.Explanation of superposition in the context of neural networks.Overview of the learning dynamics, relationship to adversarial examples, and computation in superposition.Definitions and Motivation for Features, Directions, and Superposition:Consideration of different definitions for features.Importance of decomposability and linearity in features.Empirical Phenomena:Discussion on empirical phenomena motivating the research, including word embeddings, latent spaces, interpretable neurons, universality, and polysemantic neurons.Features as Directions:Exploration of the concept of representing features as directions in neural network activation space.Privileged vs. Non-privileged Bases:Examination of the significance of basis directions in the representation space.The Superposition Hypothesis:Introduction and explanation of the superposition hypothesis in neural networks.Hierarchy of Feature Properties:Proposal of a hierarchy of properties for neural network representations, including decomposability, linearity, superposition vs. non-superposition, and basis-aligned features.Each topic provides a different perspective or component of understanding how features, mutations, and representations work in the context of neural networks and self-improving systems.Experiment Setup
Our goal is to explore whether a neural network can project a high dimensional vector 
ï¿½
â
ï¿½
ï¿½
xâR 
n
  into a lower dimensional vector 
â
â
ï¿½
ï¿½
hâR 
m
  and then recover it
THE FEATURE VECTOR (
ï¿½
X)
We begin by describing the high-dimensional vector 
ï¿½
x: the activations of our idealized, disentangled larger model. We call each element 
ï¿½
ï¿½
x 
i
â
  a "feature" because we're imagining features to be perfectly aligned with neurons in the hypothetical larger model. In a vision model, this might be a Gabor filter, a curve detector, or a floppy ear detector. In a language model, it might correspond to a token referring to a specific famous person, or a clause being a particular kind of description.

Since we don't have any ground truth for features, we need to create synthetic data for 
ï¿½
x which simulates any important properties we believe features have from the perspective of modeling them. We make three major assumptions:

Feature Sparsity: In the natural world, many features seem to be sparse in the sense that they only rarely occur. For example, in vision, most positions in an image don't contain a horizontal edge, or a curve, or a dog head
[3]
. In language, most tokens don't refer to Martin Luther King or aren't part of a clause describing music
[4]
. This idea goes back to classical work on vision and the statistics of natural images (see e.g. Olshausen, 1997, the section "Why Sparseness?" 
[26]
). For this reason, we will choose a sparse distribution for our features.
More Features Than Neurons: There are an enormous number of potentially useful features a model might represent. 6 This imbalance between features and neurons in real models seems like it must be a central tension in neural network representations.
Features Vary in Importance: Not all features are equally useful to a given task. Some can reduce the loss more than others. For an ImageNet model, where classifying different species of dogs is a central task, a floppy ear detector might be one of the most important features it can have. In contrast, another feature might only very slightly improve performance. 7
Concretely, our synthetic data is defined as follows: The input vectors 
ï¿½
x are synthetic data intended to simulate the properties we believe the true underlying features of our task have. We consider each dimension 
ï¿½
ï¿½
x 
i
â
  to be a "feature". Each one has an associated sparsity 
ï¿½
ï¿½
S 
i
â
  and importance 
ï¿½
ï¿½
I 
i
â
 . We let 
ï¿½
ï¿½
=
0
x 
i
â
 =0 with probability 
ï¿½
ï¿½
S 
i
â
 , but is otherwise uniformly distributed between 
[
0
,
1
]
[0,1]. 8 In practice, we focus on the case where all features have the same sparsity, 
ï¿½
ï¿½
=
ï¿½
S 
i
â
 =SChatGPTThe experiment setup is designed to investigate if a neural network can project a high-dimensional vector xâRnx \in R^nxâRn into a lower-dimensional vector hâRmh \in R^mhâRm and successfully recover it. The high-dimensional vector xxx represents the activations of an idealized, disentangled larger model, with each element xix_ixiâ termed as a "feature". Here are the key aspects of the experiment setup:The Feature Vector xxx:Each element xix_ixiâ is called a "feature", aligning with neurons in a hypothetical larger model. In vision models, features could represent various detectors (Gabor filter, curve, floppy ear), whereas in language models, they might represent specific tokens or clauses.Since there is no ground truth for features, synthetic data is used for xxx to simulate the properties believed to be inherent to features.Assumptions:Feature Sparsity: Many features in natural data are sparse, meaning they occur rarely. For instance, in images, most positions don't contain specific elements (like horizontal edges, curves, dog heads), and in language, most tokens don't refer to specific entities or themes. This assumption aligns with prior work on the statistics of natural images and vision.More Features Than Neurons: The number of potentially useful features is enormous, leading to an imbalance between the number of features and neurons in actual models. This discrepancy is viewed as a central tension in neural network representations.Variation in Feature Importance: Features have varying levels of importance to a given task. Some features are crucial for performance on specific tasks, while others only contribute marginally. For instance, certain detectors might be crucial for classifying different species of dogs in an ImageNet model, whereas others might have minor importance.Synthetic Data Definition:Input vectors xxx are synthetic, simulating the properties believed to characterize the true underlying features of a task.Each dimension xix_ixiâ is considered a "feature", with associated sparsity SiS_iSiâ and importance IiI_iIiâ.Each feature xix_ixiâ is set to zero with probability SiS_iSiâ, and otherwise, it is uniformly distributed between [0, 1].The experiment primarily focuses on cases where all features have the same sparsity, denoted as Si=SS_i = SSiâ=S.Objective:Through this setup, the experiment aims to explore and understand the dynamics and properties of features in neural networks, including their sparsity, abundance, and varying importance to tasks. The use of synthetic data allows for controlled experimentation and analysis of these properties in the context of neural network representations and learning dynamics.THE MODEL (
ï¿½
â
ï¿½
â²
XâX 
â²
 )
We will actually consider two models, which we motivate below. The first "linear model" is a well understood baseline which does not exhibit superposition. The second "ReLU output model" is a very simple model which does exhibit superposition. The two models vary only in the final activation function.

Linear Model
â
 
=
 
ï¿½
ï¿½
h = Wx
ï¿½
â²
 
=
 
ï¿½
ï¿½
â
 
+
 
ï¿½
x 
â²
  = W 
T
 h + b
ï¿½
â²
 
=
 
ï¿½
ï¿½
ï¿½
ï¿½
 
+
 
ï¿½
x 
â²
  = W 
T
 Wx + b
ReLU Output Model
â
 
=
 
ï¿½
ï¿½
h = Wx
ï¿½
â²
 
=
 
ReLU
(
ï¿½
ï¿½
â
+
ï¿½
)
x 
â²
  = ReLU(W 
T
 h+b)
ï¿½
â²
 
=
 
ReLU
(
ï¿½
ï¿½
ï¿½
ï¿½
+
ï¿½
)
x 
â²
  = ReLU(W 
T
 Wx+b)
Why these models?

The superposition hypothesis suggests that each feature in the higher-dimensional model corresponds to a direction in the lower-dimensional space. This means we can represent the down projection as a linear map 
â
=
ï¿½
ï¿½
h=Wx. Note that each column 
ï¿½
ï¿½
W 
i
â
  corresponds to the direction in the lower-dimensional space that represents a feature 
ï¿½
ï¿½
x 
i
â
 .

To recover the original vector, we'll use the transpose of the same matrix 
ï¿½
ï¿½
W 
T
 . This has the advantage of avoiding any ambiguity regarding what direction in the lower-dimensional space really corresponds to a feature. It also seems relatively mathematically principled 9 , and empirically works.

We also add a bias. One motivation for this is that it allows the model to set features it doesn't represent to their expected value. But we'll see later that the ability to set a negative bias is important for superposition for a second set of reasons â roughly, it allows models to discard small amounts of noise.

The final step is whether to add an activation function. This turns out to be critical to whether superposition occurs. In a real neural network, when features are actually used by the model to do computation, there will be an activation function, so it seems principled to include one at the end.

THE LOSS
Our loss is weighted mean squared error weighted by the feature importances, 
ï¿½
ï¿½
I 
i
â
 , described above:
ï¿½
=
â
ï¿½
â
ï¿½
ï¿½
ï¿½
(
ï¿½
ï¿½
â
ï¿½
ï¿½
â²
)
2
L= 
x
â
â
  
i
â
â
 I 
i
â
 (x 
i
â
 âx 
i
â²
â
 ) 
2ChatGPTIn the experiment, two models are considered: the "Linear Model" and the "ReLU Output Model". They differ only in their final activation function.Linear ModelIn this baseline model, which does not exhibit superposition:The high-dimensional vector xxx is projected down to a lower-dimensional vector hhh using a linear map represented by matrix WWW: h=Wxh = Wxh=Wx.Then, hhh is projected back to the high-dimensional space to get xâ²x'xâ², using the transpose of WWW and a bias term: xâ²=WTh+bx' = W^Th + bxâ²=WTh+b.ReLU Output ModelThis model exhibits superposition:Similar to the linear model, xxx is first projected to hhh using WWW.Then, a ReLU activation function is applied to the projection of hhh back to high-dimensional space: xâ²=ReLU(WTh+b)x' = \text{ReLU}(W^Th + b)xâ²=ReLU(WTh+b).Rationale for These ModelsThe superposition hypothesis suggests that each feature in xxx corresponds to a direction in the lower-dimensional space of hhh, allowing the use of a linear map h=Wxh = Wxh=Wx for the projection.Using WTW^TWT for the reverse projection is mathematically principled and avoids ambiguity about the lower-dimensional representation of each feature.Adding a bias term allows the model to set unrepresented features to their expected value, and negative bias is crucial for superposition as it helps discard noise.Including an activation function in the model is realistic and important as it influences the occurrence of superposition.Loss FunctionThe loss is calculated as the weighted mean squared error (MSE), with weights given by the feature importances IiI_iIiâ defined earlier. The loss function is represented as:
L=âiIi(xiâxiâ²)2L = \sum_{i} I_i (x_i - x_i')^2L=âiâIiâ(xiââxiâ²â)2This means the error between the original and the recovered vectors is calculated, then squared, and each squared error term is multiplied by the importance of the corresponding feature. The sum of these weighted squared error terms gives the total loss. This approach ensures that errors in more important features contribute more to the total loss, guiding the model to prioritize learning these features.Basic Results
Our first experiment will simply be to train a few ReLU output models with different sparsity levels and visualize the results. (We'll also train a linear model â if optimized well enough, the linear model solution does not depend on sparsity level.)

The main question is how to visualize the results. The simplest way is to visualize 
ï¿½
ï¿½
ï¿½
W 
T
 W (a features by features matrix) and 
ï¿½
b (a feature length vector). Note that features are arranged from most important to least, so the results have a fairly nice structure. Here's an example of what this type of visualization might look like, for a small model model (
ï¿½
=
2
0
;
 
ï¿½
=
5
;
n=20; m=5;) which behaves in the "expected linear model-like" way, only representing as many features as it has dimensions:


But the thing we really care about is this hypothesized phenomenon of superposition â does the model represent "extra features" by storing them non-orthogonally? Is there a way to get at it more explicitly? Well, one question is just how many features the model learns to represent. For any feature, whether or not it is represented is determined by 
â£
â£
ï¿½
ï¿½
â£
â£
â£â£W 
i
â
 â£â£, the norm of its embedding vector.

We'd also like to understand whether a given feature shares its dimension with other features. For this, we calculate 
â
ï¿½
â 
ï¿½
(
ï¿½
ï¿½
^
â
ï¿½
ï¿½
)
2
â 
jâ i
â
 ( 
W 
i
â
 
^
â
 âW 
j
â
 ) 
2
 , projecting all other features onto the direction vector of 
ï¿½
ï¿½
W 
i
â
 . It will be 
0
0 if the feature is orthogonal to other features (dark blue below). On the other hand, values 
â¥
1
â¥1 mean that there is some group of other features which can activate 
ï¿½
ï¿½
W 
i
â
  as strongly as feature 
ï¿½
i itself!

We can visualize the model we looked at previously this way:


Now that we have a way to visualize models, we can start to actually do experiments.  We'll start by considering models with only a few features (
ï¿½
=
2
0
;
 
ï¿½
=
5
;
 
ï¿½
ï¿½
=
0
.
7
ï¿½
n=20; m=5; I 
i
â
 =0.7 
i
 ). This will make it easy to visually see what happens. We consider a linear model, and several ReLU-output models trained on data with different feature sparsity levels:


As our standard intuitions would expect, the linear model always learns the top-
ï¿½
m most important features, analogous to learning the top principal components. The ReLU output model behaves the same on dense features (
1
â
ï¿½
=
1
.
0
1âS=1.0), but as sparsity increases, we see superposition emerge. The model represents more features by having them not be orthogonal to each other. It starts with less important features, and gradually affects the most important ones. Initially this involves arranging them in antipodal pairs, where one featureâs representation vector is exactly the negative of the otherâs, but we observe it gradually transition to other geometric structures as it represents more features.  We'll discuss feature geometry further in the later section, The Geometry of Superposition.

The results are qualitatively similar for models with more features and hidden dimensions. For example, if we consider a model with 
ï¿½
=
2
0
m=20 hidden dimensions and 
ï¿½
=
8
0
n=80 features (with importance increased to 
ï¿½
ï¿½
=
0
.
9
ï¿½
I 
i
â
 =0.9 
i
  to account for having more features), we observe essentially a rescaled version of the visualization above:ChatGPTIn the first experiment, the team trains ReLU output models with varying levels of feature sparsity and visualizes the results, with a linear model as a comparison baseline. Visualization involves examining the matrix WTWW^T WWTW and vector bbb, helping to discern the structure of features, arranged from most to least important.Key Observations:Superposition Phenomenon: As the feature sparsity increases, the ReLU output model begins to exhibit superposition, representing more features non-orthogonally.Number of Represented Features: The number of features a model learns to represent can be gauged by the norm of each feature's embedding vector (â£Wiâ£|W_i|â£Wiââ£).Feature Dimension Sharing: By projecting all other features onto the direction vector of a given feature (WiW_iWiâ), we can see whether features share dimensions. A calculation of this sharing shows that values equal to or greater than 1 indicate strong activation by a group of features, as opposed to values of 0, indicating orthogonality.Comparison of Models: The linear model consistently learns the top mmm most important features (akin to principal components). ReLU output models, on the other hand, begin to demonstrate superposition as feature sparsity increases. Initially, this involves aligning features in antipodal pairs, but gradually transitions to different geometric structures as more features are represented.Evolution of Superposition: As sparsity increases, the superposition in ReLU models starts affecting not just the less important features but also begins to influence the most crucial ones. The geometric arrangement of these features evolves as more features get superimposed.Scalability of Observations: The observed phenomena and patterns in the models seem to scale when the number of features and hidden dimensions in the models are increased. For example, a model with 20 hidden dimensions and 80 features exhibits a similar pattern as observed in smaller models, only rescaled.Implications and Next Steps:The visualizations and initial observations provide insight into the occurrence of superposition in neural network models, particularly with increased sparsity in features. This foundational understanding prompts further exploration into the geometry and dynamics of superposition, which will be delved into in subsequent sections of the study. Understanding these dynamics is crucial for interpreting and optimizing neural network representations and performance.Mathematical Understanding
In the previous section, we observed a surprising empirical result: adding a ReLU to the output of our model allowed a radically different solution â superposition â which doesn't occur in linear models.

The model where it occurs is still quite mathematically simple. Can we analytically understand why superposition is occurring? And for that matter, why does adding a single non-linearity make things so different from the linear model case? It turns out that we can get a fairly satisfying answer, revealing that our model is governed by balancing two competing forces â feature benefit and interference â which will be useful intuition going forwards. We'll also discover a connection to the famous Thomson Problem in chemistry.

Let's start with the linear case. This is well understood by prior work! If one wants to understand why linear models don't exhibit superposition, the easy answer is to observe that linear models essentially perform PCA. But this isn't fully satisfying: if we set aside all our knowledge and intuition about linear functions for a moment, why exactly is it that superposition can't occur?

A deeper understanding can come from the results of Saxe et al. 
[28]
 who study the learning dynamics of linear neural networks â that is, neural networks without activation functions. Such models are ultimately linear functions, but because they are the composition of multiple linear functions the dynamics are potentially quite complex. The punchline of their paper reveals that neural network weights can be thought of as optimizing a simple closed-form solution. We can tweak their problem to be a bit more similar to our linear case, 10 revealing the following equation:


The Saxe results reveal that there are fundamentally two competing forces which control learning dynamics in the considered model. Firstly, the model can attain a better loss by representing more features (we've labeled this "feature benefit"). But it also gets a worse loss if it represents more than it can fit orthogonally due to "interference" between features. 11 In fact, this makes it never worthwhile for the linear model to represent more features than it has dimensions. 12

Can we achieve a similar kind of understanding for the ReLU output model? Concretely, we'd like to understand 
ï¿½
=
â«
ï¿½
â£
â£
ï¿½
(
ï¿½
â
ReLU
(
ï¿½
ï¿½
ï¿½
ï¿½
+
ï¿½
)
)
â£
â£
2
ï¿½
p
(
ï¿½
)
L=â« 
x
â
 â£â£I(xâReLU(W 
T
 Wx+b))â£â£ 
2
 dp(x) where 
ï¿½
x is distributed such that 
ï¿½
ï¿½
=
0
x 
i
â
 =0 with probability 
ï¿½
S.

The integral over 
ï¿½
x decomposes into a term for each sparsity pattern according to the binomial expansion of 
(
(
1
â
ï¿½
)
+
ï¿½
)
ï¿½
((1âS)+S) 
n
 . We can group terms of the sparsity together, rewriting the loss as 
ï¿½
=
(
1
â
ï¿½
)
ï¿½
ï¿½
ï¿½
+
â¦
+
L=(1âS) 
n
 L 
n
â
 +â¦+ 
(
1
â
ï¿½
)
ï¿½
ï¿½
â
1
ï¿½
1
+
ï¿½
ï¿½
ï¿½
0
(1âS)S 
nâ1
 L 
1
â
 +S 
n
 L 
0
â
 , with each 
ï¿½
ï¿½
L 
k
â
  corresponding to the loss when the input is a 
ï¿½
k-sparse vector. Note that as 
ï¿½
â
1
Sâ1, 
ï¿½
1
L 
1
â
  and 
ï¿½
0
L 
0
â
  dominate. The 
ï¿½
0
L 
0
â
  term, corresponding to the loss on a zero vector, is just a penalty on positive biases, 
â
ï¿½
ReLU
(
ï¿½
ï¿½
)
2
â 
i
â
 ReLU(b 
i
â
 ) 
2
 . So the interesting term is 
ï¿½
1
L 
1
â
 , the loss on 
1
1-sparse vectors:


This new equation is vaguely similar to the famous Thomson problem in chemistry. In particular, if we assume uniform importance and that there are a fixed number of features with 
â£
â£
ï¿½
ï¿½
â£
â£
=
1
â£â£W 
i
â
 â£â£=1 and the rest have 
â£
â£
ï¿½
ï¿½
â£
â£
=
0
â£â£W 
i
â
 â£â£=0, and that 
ï¿½
ï¿½
=
0
b 
i
â
 =0, then the feature benefit term is constant and the interference term becomes a generalized Thomson problem â we're just packing points on the surface of the sphere with a slightly unusual energy function. (We'll see this can be a productive analogy when we resume our empirical investigation in the following sections!)

Another interesting property is that ReLU makes negative interference free in the 1-sparse case. This explains why the solutions we've seen prefer to only have negative interference when possible. Further, using a negative bias can convert small positive interferences into essentially being negative interferences.

What about the terms corresponding to less sparse vectors? We leave explicitly writing these out to the reader, but the main idea is that there are multiple compounding interferences, and the "active features" can experience interference. In a later section, we'll see that features often organize themselves into sparse interference graphs such that only a small number of features interfere with another feature â it's interesting to note that this reduces the probability of compounding interference and makes the 1-sparse loss term more important relative to others.ChatGPTThe section strives to mathematically comprehend why superposition occurs in models with a ReLU at the output, which doesn't happen in linear models.Key Points:Competing Forces:The learning dynamics in models are governed by two competing forces: feature benefit and interference.Feature Benefit: A model can improve its loss by representing more features.Interference: When a model represents more features than it can fit orthogonally, there is interference between features, worsening the loss.Linear Models Dynamics:Linear models, essentially performing PCA, do not exhibit superposition. The Saxe et al. study provides insights, revealing that linear models optimize a simple closed-form solution and never find it beneficial to represent more features than its dimensions due to interference.ReLU Output Model Understanding:The section seeks to understand the loss function for the ReLU output model where xxx has a certain probability distribution.The integral over xxx decomposes into terms for each sparsity pattern, and the loss function is rewritten with each term corresponding to the loss when the input is a kkk-sparse vector.Thomson Problem Connection:The equation derived is vaguely similar to the Thomson problem in chemistry. Assuming uniform importance and fixed number of features with certain conditions, the feature benefit term is constant, and the interference term resembles a generalized Thomson problem, providing a useful analogy for understanding the model's behavior.Negative Interference with ReLU:ReLU makes negative interference free in the 1-sparse case, explaining why observed solutions prefer only to have negative interference when possible. Using a negative bias can also effectively convert small positive interferences into negative ones.Sparse Interference Graphs:Features often organize into sparse interference graphs where only a few features interfere with another, reducing the probability of compounded interference and emphasizing the importance of the 1-sparse loss term relative to others.Implications:The mathematical exploration provides insights into why superposition occurs in neural network models and how features interact within these models.Understanding the balance between feature benefit and interference is crucial for comprehending the learning dynamics and behavior of neural network models, providing a basis for further empirical and theoretical investigations in the field.Superposition as a Phase Change
The results in the previous section seem to suggest that there are three outcomes for a feature when we train a model: (1) the feature may simply not be learned; (2) the feature may be learned, and represented in superposition; or (3) the model may represent a feature with a dedicated dimension. The transitions between these three outcomes seem sharp. Possibly, there's some kind of phase change. 13

One way to understand this better is to explore if there's something like a "phase diagram" from physics, which could help us understand when a feature is expected to be in one of these regimes.  Although we can see hints of this in our previous experiment, it's hard to really isolate what's going on because many features are changing at once and there may be interaction effects. As a result, we set up the following experiment to better isolate the effects.

As an initial experiment, we consider models with 2 features but only 1 hidden layer dimension. We still consider the ReLU output model, 
ReLU
(
ï¿½
ï¿½
ï¿½
ï¿½
â
ï¿½
)
ReLU(W 
T
 Wxâb). The first feature has an importance of 1.0. On one axis, we vary the importance of the 2nd "extra" feature from 0.1 to 10. On the other axis, we vary the sparsity of all features from 1.0 to 0.01. We then plot whether the 2nd "extra" feature is not learned, learned in superposition, or learned and represented orthogonally. To reduce noise, we train ten models for each point and average over the results, discarding the model with the highest loss.

We can compare this to a theoretical "toy model of the toy model" where we can get closed form solutions for the loss of different weight configurations as a function of importance and sparsity. There are three natural ways to store 2 features in 1 dimension: 
ï¿½
=
[
1
,
0
]
W=[1,0] (ignore 
[
0
,
1
]
[0,1], throwing away the extra feature), 
ï¿½
=
[
0
,
1
]
W=[0,1] (ignore 
[
1
,
0
]
[1,0], throwing away the first feature to give the extra feature a dedicated dimension), and 
ï¿½
=
[
1
,
â
1
]
W=[1,â1] (store the features in superposition, losing the ability to represent 
[
1
,
1
]
[1,1], the combination of both features at the same time). We call this last solution âantipodalâ because the two basis vectors 
[
1
,
0
]
[1,0] and 
[
0
,
1
]
[0,1] are mapped in opposite directions. It turns out we can analytically determine the loss for these solutions (details can be found in this notebook).


As expected, sparsity is necessary for superposition to occur, but we can see that it interacts in an interesting way with relative feature importance. But most interestingly, there appears to be a real phase change, observed in both the empirical and theoretical diagrams! The optimal weight configuration discontinuously changes in magnitude and superposition. (In the theoretical model, we can analytically confirm that there's a first-order phase change: there's crossover between the functions, causing a discontinuity in the derivative of the optimal loss.)

We can ask this same question of embedding three features in two dimensions. This problem still has a single "extra feature" (now the third one) we can study, asking what happens as we vary its importance relative to the other two and change sparsity.

For the theoretical model, we now consider four natural solutions. We can describe solutions by asking "what feature direction did 
ï¿½
W ignore?" For example, 
ï¿½
W might just not represent the extra feature â we'll write this 
ï¿½
â¥
[
0
,
0
,
1
]
Wâ¥[0,0,1]. Or 
ï¿½
W might ignore one of the other features, 
ï¿½
â¥
[
1
,
0
,
0
]
Wâ¥[1,0,0]. But the interesting thing is that there are two ways to use superposition to make antipodal pairs. We can put the "extra feature" in an antipodal pair with one of the others (
ï¿½
â¥
[
0
,
1
,
1
]
Wâ¥[0,1,1]) or put the other two features in superposition and give the extra feature a dedicated dimension (
ï¿½
â¥
[
1
,
1
,
0
]
Wâ¥[1,1,0]). Details on the closed form losses for these solutions can be found in this notebook. We do not consider a last solution of putting all the features in joint superposition, 
ï¿½
â¥
[
1
,
1
,
1
]
Wâ¥[1,1,1].


These diagrams suggest that there really is a phase change between different strategies for encoding features. However, we'll see in the next section that there's much more complex structure this preliminary view doesn't capture.ChatGPTThe section suggests the possibility of a phase change phenomenon in the outcomes for a feature during model training: a feature may either not be learned, be learned and represented in superposition, or be learned with a dedicated dimension. These transitions appear sharp.Key Points:Three Possible Outcomes for a Feature:Not learned.Learned in superposition.Learned with a dedicated dimension.Phase Change Hypothesis:The transitions between the three outcomes for a feature are sharp, suggesting a kind of phase change.Phase Diagram Experiment:An experiment was set up to understand the 'phase change'. Models with 2 features and only 1 hidden layer dimension were considered, with one feature having an importance of 1.0. The importance of the 2nd feature varied from 0.1 to 10, and the sparsity of all features varied from 1.0 to 0.01. The status of the 2nd feature was plotted against these variations.Analytical Comparison:An analytical approach was taken to understand the experiment, considering three ways to store 2 features in 1 dimension, one of which involves superposition of the features (antipodal solution). The loss for these solutions could be analytically determined, providing a theoretical benchmark.Sparsity and Importance Interaction:The results show that sparsity is necessary for superposition to occur. Sparsity interacts with relative feature importance in interesting ways, and a phase change is observable in both empirical and theoretical diagrams. This phase change is first-order, as thereâs a discontinuity in the derivative of optimal loss.Three Features in Two Dimensions:When embedding three features in two dimensions, the theoretical model considers four natural solutions, described based on the feature direction ignored. Two of these solutions involve superposition, either by pairing the extra feature antipodally with one of the others or by putting the other two in superposition and giving the extra feature a dedicated dimension.Phase Change Between Encoding Strategies:Diagrams suggest a phase change between different strategies for encoding features, indicating a more complex structure in how features are represented and learned by the model.Implications:Understanding the phase change between different feature encoding strategies provides deeper insight into how models learn and represent features, guiding the development of more effective and efficient neural network models. This phase change concept offers a new perspective to interpret and analyze the dynamics of model training and feature representation.
The Geometry of Superposition
We've seen that superposition can allow a model to represent extra features, and that the number of extra features increases as we increase sparsity. In this section, we'll investigate this relationship in more detail, discovering an unexpected geometric story: features seem to organize themselves into geometric structures such as pentagons and tetrahedrons! In some ways, the structure described in this section seems "too elegant to be true" and we think there's a good chance it's at least partly idiosyncratic to the toy model we're investigating. But it seems worth investigating because if anything about this generalizes to real models, it may give us a lot of leverage in understanding their representations.

We'll start by investigating uniform superposition, where all features are identical: independent, equally important and equally sparse. It turns out that uniform superposition has a surprising connection to the geometry of uniform polytopes! Later, we'll move on to investigate non-uniform superposition, where features are not identical. It turns out that this can be understood, at least to some extent, as a deformation of uniform superposition.ChatGPTThis section explores the intricate relationship between superposition and geometry, discovering that features in a neural network model tend to organize themselves into specific geometric structures as the model learns to represent extra features with increased sparsity.Key Points:Uniform Superposition:The section begins by exploring scenarios where all features are identicalâ they are independent, have equal importance, and are equally sparse. This is referred to as uniform superposition.Connection to Geometry:Uniform superposition in features exhibits a surprising connection to the geometry of uniform polytopes, which are convex polytopes whose faces are congruent (identical in form and arrangement).Geometric Structures in Features:In cases of uniform superposition, features appear to organize themselves into geometric structures such as pentagons and tetrahedrons as they are learned by the model. These structures emerge unexpectedly and seem to play a role in how features are represented and learned in the model.Non-Uniform Superposition:The section also mentions that it will explore non-uniform superposition, where features are not identical in their properties. This situation can be understood as a deformation or variation of uniform superposition, suggesting that the geometric principles observed in uniform superposition might still apply, albeit in a modified form.Potential Implications:While the elegant and geometrically organized structure of features in superposition seems intriguing, the section suggests that these observations might be somewhat unique or idiosyncratic to the specific toy model being investigated. Therefore, it's crucial to approach these findings with caution and further validate them in more complex and realistic models to understand their generalizability and implications for real-world neural network representations.Implications:Understanding the geometric principles that underpin feature learning and representation in neural networks could provide valuable insights into the internal workings of these models. If the observed geometric structures in feature representation hold true in more realistic scenarios, this could open up new avenues for interpreting, analyzing, and optimizing neural networks in more effective ways, potentially leading to the development of models that learn and generalize better.Uniform Superposition
As mentioned above, we begin our investigation with uniform superposition, where all features have the same importance and sparsity. We'll see later that this case has some unexpected structure, but there's also a much more basic reason to study it: it's much easier to reason about than the non-uniform case, and has fewer variables we need to worry about in our experiments.

We'd like to understand what happens as we change feature sparsity, 
ï¿½
S. Since all features are equally important, we will assume without loss of generality 14 that each feature has importance 
ï¿½
ï¿½
=
1
I 
i
â
 =1 . We'll study a model with 
ï¿½
=
4
0
0
n=400 features and 
ï¿½
=
3
0
m=30 hidden dimensions, but it turns out the number of features and hidden dimensions doesn't matter very much. In particular, it turns out that the number of input features 
ï¿½
n doesn't matter as long as it's much larger than the number of hidden dimensions, 
ï¿½
â«
ï¿½
nâ«m. And it also turns out that the number of hidden dimensions doesn't really matter as long as we're interested in the ratio of features learned to hidden features. Doubling the number of hidden dimensions just doubles the number of features the model learns.

A convenient way to measure the number of features the model has learned is to look at the Frobenius norm, 
â£
â£
ï¿½
â£
â£
ï¿½
2
â£â£Wâ£â£ 
F
2
â
 . Since 
â£
â£
ï¿½
ï¿½
â£
â£
2
â
1
â£â£W 
i
â
 â£â£ 
2
 â1 if a feature is represented and 
â£
â£
ï¿½
ï¿½
â£
â£
2
â
0
â£â£W 
i
â
 â£â£ 
2
 â0 if it is not, this is roughly the number of features the model has learned to represent. Conveniently, this norm is basis-independent, so it still behaves nicely in the dense regime 
ï¿½
=
0
S=0 where the feature basis isn't privileged by anything and the model represents features with arbitrary directions instead.

We'll plot 
ï¿½
â
=
ï¿½
/
â£
â£
ï¿½
â£
â£
ï¿½
2
D 
â
 =m/â£â£Wâ£â£ 
F
2
â
 , which we can think of as the "dimensions per feature":


Surprisingly, we find that this graph is "sticky" at 
1
1 and 
1
/
2
1/2. (This very vaguely resembles the fractional quantum Hall effect â see e.g. this diagram.) Why is this? On inspection, the 
1
/
2
1/2 "sticky point" seems to correspond to a precise geometric arrangement where features come in "antipodal pairs", each being exactly the negative of the other, allowing two features to be packed into each hidden dimension. It appears that antipodal pairs are so effective that the model preferentially uses them over a wide range of the sparsity regime.

It turns out that antipodal pairs are just the tip of the iceberg. Hiding underneath this curve are a number of extremely specific geometric configurations of features.ChatGPTThe section titled "Uniform Superposition" investigates a specific scenario within the broader study of superposition in neural networks. In this case, all features considered are identical in terms of importance and sparsityâa situation referred to as uniform superposition. Here's a concise summary:Key Points:Uniform Superposition Focus:The study focuses on uniform superposition where every feature has equal importance and sparsity. This scenario provides a straightforward context for examination since it involves fewer variables to consider during the experiments.Sparsity Variation:The study examines what transpires when feature sparsity SSS is altered, with all features assumed to have an importance Ii=1I_i = 1Iiâ=1.Features and Dimensions:In the experiments, the model has n=400n = 400n=400 features and m=30m = 30m=30 hidden dimensions. However, the exact numbers are not crucial as long as nnn is significantly larger than mmm. The ratio of features learned to hidden features remains consistent even if the number of hidden dimensions is altered.Frobenius Norm Measurement:The number of features learned by the model can be conveniently measured using the Frobenius norm â£â£Wâ£â£F2||W||_F^2â£â£Wâ£â£F2â. This norm acts as an effective indicator of the number of features represented by the model, providing a basis-independent measure even in dense scenarios where the feature basis isn't privileged.Sticky Points Observed:During the examination, the graph plotting dimensions per feature, represented as Dâ=m/â£â£Wâ£â£F2D^* = m/||W||_F^2Dâ=m/â£â£Wâ£â£F2â, shows notable "sticky" points at 1 and 1/2. These points suggest that the model exhibits preference for specific configurations of feature representation.Antipodal Pairs:The "sticky point" at 1/2 corresponds to a unique geometric arrangement where features come in antipodal pairs, with each feature being the exact negative of its pair. These pairs allow two features to be represented within each hidden dimension. This arrangement seems to be highly effective, as the model preferentially uses antipodal pairs across various sparsity levels.Specific Geometric Configurations:Antipodal pairs represent just one of several specific geometric configurations that features can adopt during the learning process. There are more complex and precise arrangements hidden beneath the observed data.Implications:Understanding how features are learned and represented geometrically in the space of the model during uniform superposition can provide insights into the mechanics of neural networks. Recognizing the preference for antipodal pairs and other geometric configurations may offer new perspectives on optimizing network training and improving the efficiency of feature representation. These findings need to be further explored and validated in diverse scenarios to confirm their applicability and significance in various neural network models.FEATURE DIMENSIONALITY
In the previous section, we saw that there's a sticky regime where the model has "half a dimension per feature" in some sense. This is an average statistical property of the features the model represents, but it seems to hint at something interesting. Is there a way we could understand what "fraction of a dimension" a specific feature gets?

We'll define the dimensionality of the 
ï¿½
ith feature, 
ï¿½
ï¿½
D 
i
â
 , as:

ï¿½
ï¿½
 
=
 
â£
â£
ï¿½
ï¿½
â£
â£
2
â
ï¿½
(
ï¿½
ï¿½
^
â
ï¿½
ï¿½
)
2
D 
i
â
  =  
â 
j
â
 ( 
W 
i
â
 
^
â
 âW 
j
â
 ) 
2
 
â£â£W 
i
â
 â£â£ 
2
 
â
 

where 
ï¿½
ï¿½
W 
i
â
  is the weight vector column associated with the 
ï¿½
ith feature, and 
ï¿½
ï¿½
^
W 
i
â
 
^
â
  is the unit version of that vector.

Intuitively, the numerator represents the extent to which a given feature is represented, while the denominator is "how many features share the dimension it is embedded in" by projecting each feature onto its dimension. In the antipodal case, each feature participating in an antipodal pair will have a dimensionality of 
ï¿½
=
1
/
(
1
+
1
)
=
1
/
2
D=1/(1+1)=1/2 while features which are not learned will have a dimensionality of 
0
0. Empirically, it seems that the dimensionality of all features add up to the number of embedding dimensions when the features are "packed efficiently" in some sense.

We can now break the above plot down on a per-feature basis. This reveals many more of these "sticky points"! To help us understand this better, we're going to create a scatter plot annotated with some additional information:

We start with the line plot we had in the previous section.
We overlay this with a scatter plot of the individual feature dimensionalities for each feature in the models at each sparsity level.
The feature dimensionalities cluster at certain fractions, so we draw lines for those. (It turns out that each fraction corresponds to a specific weight geometry â we'll discuss this shortly.)
We visualize the weight geometries for a few models with a "feature geometry graph" where each feature is a node and edge weights are based on the absolute value of the dot product feature embedding vectors. So features are connected if they aren't orthogonal.
Let's look at the resulting plot, and then we'll try to figure out what it's showing us:


What is going on with the points clustering at specific fractions?? We'll see shortly that the model likes to create specific weight geometries and kind of jumps between the different configurations.

In the previous section, we developed a theory of superposition as a phase change. But everything on this plot between 0 (not learning a feature) and 1 (dedicating a dimension to a feature) is superposition. Superposition is what happens when features have fractional dimensionality. That is to say â superposition isn't just one thing!

How can we relate this to our original understanding of the phase change? We often think of water as only having three phases: ice, water and steam. But this is a simplification: there are actually many phases of ice, often corresponding to different crystal structures (eg. hexagonal vs cubic ice). In a vaguely similar way, neural network features seem to also have many other phases within the general category of "superposition."ChatGPTFeature Dimensionality Section Summary:The "Feature Dimensionality" section is an exploration into understanding the fraction of dimension each feature effectively uses in a neural network, exploring the concept of "fraction of a dimension."Key Points:Dimensionality Definition:Dimensionality of the ithi^{th}ith feature, DiD_iDiâ, is defined as:
D_i = \frac{\sum_j (W_i^\hat{} \cdot W_j)^2}{||W_i||^2}
Here, WiW_iWiâ is the weight vector column for the ithi^{th}ith feature, and (W_i^\hat{}\ is its unit version.Dimensionality Intuition:The numerator represents the degree to which a feature is represented. The denominator evaluates how many features share the dimension in which the feature is embedded. In cases where features are in antipodal pairs, the dimensionality is 1/21/21/2.Dimensionality Distribution:Features' dimensionalities tend to cluster at certain fractions, revealing "sticky points." Each fraction corresponds to a specific weight geometry. This distribution is observed in a scatter plot with each featureâs dimensionality at varying sparsity levels.Weight Geometry Visualization:The weight geometries of the models are visualized with a "feature geometry graph." Each node represents a feature, and edges, whose weights are the absolute value of the dot product of feature embedding vectors, connect non-orthogonal features.Fractional Dimensionality Insights:The model prefers specific weight geometries and transitions between them. These fractional dimensionalities highlight different phases of superposition within the network, with each fractional value suggesting a different configuration or phase.Superposition Phases:Superposition isn't monolithic; it exhibits various phases. Much like water has multiple forms of ice, features in neural networks also have different phases within the general category of "superposition," each corresponding to a different structure or configuration within the network.Implications:Understanding the dimensionality each feature effectively utilizes provides insights into the efficient representation and packing of features within the network. Recognizing and analyzing the different phases of superposition, or the fractional dimensionality used by features, is crucial for developing a deeper understanding of neural network behavior and optimizing their performance for various tasks. These findings also highlight the nuanced and multifaceted nature of feature representation within neural networks, suggesting that thereâs more complexity to explore and understand in the realm of feature dimensionality and superposition.WHY THESE GEOMETRIC STRUCTURES?
In the previous diagram, we found that there are distinct lines corresponding to dimensionality of: Â¾ (tetrahedron), â (triangle), Â½ (antipodal pair), â (pentagon), â (square antiprism), and 0 (feature not learned). We believe there would also be a 1 (dedicated dimension for a feature) line if not for the fact that basis features are indistinguishable from other directions in the dense regime.

Several of these configurations may jump out as solutions to the famous Thomson problem. (In particular, square antiprisms are much less famous than cubes and are primarily of note for their role in molecular geometry due to being a Thomson problem solution.) As we saw earlier, there is a very real sense in which our model can be understood as solving a generalized version of the Thomson problem. When our model chooses to represent a feature, the feature is embedded as a point on an 
ï¿½
m-dimensional sphere.

A second clue as to what's going on is that there are lines for the Thomson solutions which are uniform polyhedra (e.g. tetrahedron), but there seem to be split lines where we'd expect to see non-uniform solutions (e.g. instead of a â line for triangular bipyramids we see a co-occurence of points at â for triangles and points at Â½ for a antipodes). In a uniform polyhedron, all vertices have the same geometry, and so if we embed features as them each feature has the same dimensionality. But if we embed features as a non-uniform polyhedron, different features will have more or less interference with others.

In particular, many of the Thomson solutions can be understood as tegum products (an operation which constructs polytopes  by embedding two polytopes in orthogonal subspaces) of smaller uniform polytopes. (In the earlier graph visualizations of feature geometry, two subgraphs are disconnected if and only if they are in different tegum factors.) As a result, we should expect their dimensionality to actually correspond to the underlying factor uniform polytopes.


This also suggests a possible reason why we observe 3D Thomson problem solutions, despite the fact that we're actually studying a higher dimensional version of the problem. Just as many 3D Thomson solutions are tegum products of 2D and 1D solutions, perhaps higher dimensional solutions are often tegum products of 1D, 2D, and 3D solutions.

The orthogonality of factors in tegum products has interesting implications. For the purposes of superposition, it means that there can't be any "interference" across tegum-factors. This may be preferred by the toy model: having many features interfere simultaneously could be really bad for it. (See related discussion in our earlier mathematical analysis.)ChatGPTWhy These Geometric Structures? Section Summary:In this section, the author explores the reasons behind the emergence of specific geometric structures that are evident in the dimensionality of neural network features, with each structure corresponding to a different level of dimensionality per feature.Key Points:Distinct Dimensionality Lines:Dimensionalities like Â¾, â, Â½, â, â, and 0 correspond to various geometric structures (e.g., tetrahedron, triangle, antipodal pair, pentagon, and square antiprism). There would potentially be a line for dimensionality 1, but basis features are indistinct from other directions in the dense regime.Thomson Problem Solutions:Some configurations are solutions to the Thomson problem, notable for their relevance in molecular geometry. In this scenario, features represented in the model can be visualized as points on an mmm-dimensional sphere.Uniform vs. Non-Uniform Polyhedra:Uniform polyhedra, where all vertices share the same geometry, lead to features with the same dimensionality. However, non-uniform polyhedra result in features with varying levels of interference, causing different dimensionalities.Tegum Products:Many Thomson solutions can be seen as tegum products of smaller uniform polytopes. Tegum products are polytopes derived by embedding two polytopes in orthogonal subspaces. These products explain the observed dimensionalities, as they correspond to the dimensionality of the factor uniform polytopes involved.Higher Dimensional Solutions:The observation of 3D Thomson solutions, despite working in higher dimensions, might be explained by higher-dimensional solutions often being tegum products of lower-dimensional ones (1D, 2D, and 3D).Orthogonality Implications:Tegum productsâ orthogonality means there's no interference across tegum-factors. This lack of interference might be favorable for the model, as simultaneous interference from many features could be detrimental.Implications:Understanding the geometric structures associated with feature dimensionalities provides insights into the internal representations and computational mechanisms of neural networks. Recognizing that these structures are related to known geometric problems and constructions (like the Thomson problem and tegum products) may open avenues for applying mathematical theories and tools to analyze and optimize neural networks further. The section hints at a deeper connection between geometry and the functioning of neural networks, suggesting that more complex interactions and representations are at play within the networks.Aside: Polytopes and Low-Rank Matrices
At this point, it's worth making explicit that there's a correspondence between polytopes and symmetric, positive-definite, low-rank matrices (i.e. matrices of the form 
ï¿½
ï¿½
ï¿½
W 
T
 W). This correspondence underlies the results we saw in the previous section, and is generally useful for thinking about superposition.

In some ways, the correspondence is trivial. If one has a rank-
ï¿½
m 
ï¿½
Ã
ï¿½
nÃn-matrix of the form 
ï¿½
ï¿½
ï¿½
W 
T
 W, then 
ï¿½
W is a 
ï¿½
Ã
ï¿½
nÃm-matrix. We can interpret the columns of 
ï¿½
W as 
ï¿½
n points in a 
ï¿½
m-dimensional space. The place where this starts to become interesting is that it makes it clear that 
ï¿½
ï¿½
ï¿½
W 
T
 W is driven by the geometry. In particular, we can see how the off-diagonal terms are driven by the geometry of the points.

Put another way, there's an exact correspondence between polytopes and strategies for superposition. For example, every strategy for putting three features in superposition in a 2-dimensional space corresponds to a triangle, and every triangle corresponds to such a strategy. From this perspective, it doesn't seem surprising that if we have three equally important and equally sparse features, the optimal strategy is an equilateral triangle.


This correspondence also goes the other direction. Suppose we have a rank 
(
ï¿½
â
ï¿½
)
(nâi)-matrix of the form 
ï¿½
ï¿½
ï¿½
W 
T
 W. We can characterize it by the dimensions 
ï¿½
W did not represent â that is, which directions are orthogonal to 
ï¿½
W? For example, if we have a 
(
ï¿½
â
1
)
(nâ1)-matrix, we might ask what single direction did 
ï¿½
W not represent? This is especially informative if we assume that 
ï¿½
ï¿½
ï¿½
W 
T
 W will be as "identity-like" as possible, given the constraint of not representing certain vectors.

In fact, given such a set of orthogonal vectors, we can construct a polytope by starting with 
ï¿½
n basis vectors and projecting them to a space orthogonal to the given vectors. For example, if we start in three dimensions and then project such that 
ï¿½
â¥
(
1
,
1
,
1
)
Wâ¥(1,1,1), we get a triangle. More generally, setting 
ï¿½
â¥
(
1
,
1
,
1
,
.
.
.
)
Wâ¥(1,1,1,...) gives us a regular 
ï¿½
n-simplex. This is interesting because it's in some sense the "minimal possible superposition." Assuming that features are equally important and sparse, the best possible direction to not represent is the fully dense vector 
(
1
,
1
,
1
,
.
.
.
)
(1,1,1,...)!ChatGPTAside: Polytopes and Low-Rank Matrices Section SummaryThis aside section elucidates the relationship between polytopes and symmetric, positive-definite, low-rank matrices (specifically matrices formed like WTWW^TWWTW). This correspondence is fundamental to understanding the results discussed in the previous section and is crucial for comprehending the concept of superposition.Key Points:Polytopes and Low-Rank Matrices Correspondence:The columns of the matrix WWW can be interpreted as points in an mmm-dimensional space, forming a polytope. The geometry of these points influences the structure of the low-rank matrix WTWW^TWWTW, highlighting a connection between the geometry of polytopes and the structure of low-rank matrices.Geometry Drives Matrices:The off-diagonal terms in the matrix WTWW^TWWTW are particularly determined by the geometry of the points representing the columns of WWW, indicating that the geometry of polytopes is integral to understanding the structure of the associated low-rank matrices.Polytopes as Superposition Strategies:Each polytope corresponds to a unique strategy for feature superposition. For instance, a triangle represents a strategy for superposing three features in a 2-dimensional space, with each strategy corresponding to a distinct polytope and vice versa.Two-Way Correspondence:The correspondence also applies inversely. For example, a rank (nâi)(n-i)(nâi)-matrix, where iii directions orthogonal to WWW are not represented, can be characterized by constructing a polytope that projects the nnn basis vectors to a space orthogonal to the given orthogonal vectors.Minimal Possible Superposition:When features are equally important and sparse, the best strategy to not represent is a fully dense vector, which corresponds to a regular nnn-simplex, representing a minimal form of superposition.Implications:Understanding the relationship between polytopes and low-rank matrices is essential for grasping the concept of feature superposition in neural networks. The geometry of polytopes provides a framework to analyze and interpret the structure and functionality of these low-rank matrices, leading to insights into the mechanisms of feature representation and the strategies employed for efficient superposition in the neural network's hidden layers. This understanding might also offer new perspectives and approaches for optimizing and analyzing neural networks and their learning dynamics.Non-Uniform Superposition
So far, this section has focused on the geometry of uniform superposition, where all features are of equal importance, equal sparsity, and independent. The model is essentially solving a variant of the Thomson problem. Because all features are the same, solutions corresponding to uniform polyhedra get especially low loss. In this subsection, we'll study non-uniform superposition, where features are somehow not uniform. They may vary in importance and sparsity, or have a correlational structure that makes them not independent. This distorts the uniform geometry we saw earlier.

In practice, it seems like superposition in real neural networks will be non-uniform, so developing an understanding of it seems important. Unfortunately, we're far from a comprehensive theory of the geometry of non-uniform superposition at this point. As a result, the goal of this section will merely be to highlight some of the more striking phenomena we observe:

Features varying in importance or sparsity causes smooth deformation of polytopes as the imbalance builds, up until a critical breaking point at which they snap to another polytope.
Correlated features prefer to be orthogonal, often forming in different tegum factors. As a result, correlated features may form an orthogonal local basis. When they can't be orthogonal, they prefer to be side-by-side. In some cases correlated features merge into a single feature: this hints at some kind of interaction between "superposition-like behavior" and "PCA-like behavior".
Anti-correlated features prefer to be in the same tegum factor when superposition is necessary. They prefer to have negative interference, ideally being antipodal.
We attempt to illustrate these phenomena with some representative experiments below.

PERTURBING A SINGLE FEATURE
The simplest kind of non-uniform superposition is to vary one feature and leave the others uniform. As an experiment, let's consider an experiment where we represent 
ï¿½
=
5
n=5 features in 
ï¿½
=
2
m=2 dimensions. In the uniform case, with importance 
ï¿½
=
1
I=1 and activation density 
1
â
ï¿½
=
0
.
0
5
1âS=0.05, we get a regular pentagon. But if we vary one point â in this case we'll make it more or less sparse â we see the pentagram stretch to account for the new value. If we make it denser, activating more frequently (yellow) the other features repel from it, giving it more space. On the other hand, if we make it sparser, activating less frequently (blue) it takes less space and other points push towards it.

If we make it sufficiently sparse, there's a phase change, and it collapses from a pentagon to a pair of digons with the sparser point at zero. The phase change corresponds to loss curves corresponding to the two different geometries crossing over. (This observation allows us to directly confirm that it is genuinely a first order phase change.)

To visualize the solutions, we canonicalize them, rotating them to align with each other in a consistent manner.

ChatGPTNon-Uniform Superposition Section SummaryThis subsection delves into the realm of non-uniform superposition, characterized by features that are not uniform in terms of importance, sparsity, or independence. This non-uniformity causes a departure from the regular geometry observed in uniform superposition.Key Points:Characteristics of Non-Uniform Superposition:In non-uniform superposition, features exhibit variations in importance, sparsity, or exhibit correlations that result in a distortion of the uniform geometry seen previously.Notable Phenomena Observed:Smooth Deformation of Polytopes: As features vary in importance or sparsity, polytopes undergo smooth deformation until a critical point, where they transition abruptly to another polytope configuration.Correlated Features: These features tend to be orthogonal, often existing in different tegum factors. They might form an orthogonal local basis or, in some scenarios, merge into a single feature, hinting at a blend of superposition-like and PCA-like behaviors.Anti-Correlated Features: When superposition is needed, these features prefer being in the same tegum factor, typically exhibiting negative interference, ideally positioned antipodally.Experiment - Perturbing a Single Feature:When one out of five features (n=5) is perturbed in a two-dimensional (m=2) space, with the others left uniform, the polytope (initially a pentagon) deforms. Making one feature denser causes the others to move away, providing it more space, while making it sparser leads to the opposite effect.If the perturbed feature becomes sufficiently sparse, a phase change is observed, transitioning the polytope from a pentagon to a structure consisting of two digons and the sparse point. This phase change corresponds to the crossover of loss curves related to the two different geometries.Visualization Technique:Solutions are visualized by aligning and rotating them for consistent comparison and analysis, aiding in the understanding of how polytope geometries change with the perturbation of features.Implications:Understanding non-uniform superposition is crucial as it more closely reflects the conditions in real neural networks where features are rarely uniform. The phenomena observed under non-uniform conditions provide insights into the dynamic behaviors of features and the resulting geometric configurations they form.The study of non-uniform superposition lays the groundwork for further exploration and development of comprehensive theories to explain its intricate geometry, aiding in the effective application and interpretation of neural networks in various complex, real-world scenarios.In this section, the focus is on understanding the nuances of non-uniform superposition in neural network models, where features donât exhibit uniform characteristics in terms of importance, sparsity, or independence. This scenario is considered crucial for understanding superposition in real neural networks, as features in practice are likely to be non-uniform.

### Key Points:

1. **Non-Uniform Superposition Dynamics:**
   - Features may differ in importance, sparsity, or exhibit correlations, which disrupts the uniform geometric structures seen in the case of uniform superposition.
   - Perturbing featuresâ properties induces smooth deformations in the polytopes until a critical point, where the polytope transitions suddenly to another structure.

2. **Observations in Non-Uniform Superposition:**
   - **Varied Importance/Sparsity:** Alterations in a featureâs importance or sparsity lead to deformations in the polytope structures. This continues until a critical breaking point, resulting in a sudden shift to another polytope configuration.
   - **Correlated Features:** These tend to be orthogonal and might form in different tegum factors, possibly establishing an orthogonal local basis. They might also merge into a single feature, suggesting a blend of superposition-like and PCA-like behaviors.
   - **Anti-Correlated Features:** These prefer to exist in the same tegum factor when superposition is necessary, aiming for negative interference and ideally adopting antipodal positions.

3. **Experiment - Single Feature Perturbation:**
   - In a model representing \( n=5 \) features within \( m=2 \) dimensions, a single featureâs properties are varied while others are kept uniform.
   - Increasing a featureâs activation density (making it denser) causes other features to distance themselves from it. Conversely, reducing its activation density (making it sparser) leads the feature to occupy less space, with others moving towards it.
   - At a certain level of sparsity, a phase change occurs, and the structure transitions from a pentagon to a set of digons with the sparse feature at zero. This phase change correlates with a crossover in the loss curves associated with the two different geometries.

### Visualization Approach:
   - The solutions are visualized in a standardized manner, rotating them for consistent alignment and comparison, facilitating an understanding of how they respond to feature perturbations.

### Implications:
Understanding non-uniform superposition is pivotal for practical applications, as it reflects the more common scenarios in real neural networks. The insights derived from observing and understanding these complex dynamics are instrumental for future studies and applications involving neural networks and their feature representation and manipulation mechanisms.2 / 2ChatGPTYour summary is thorough and well-organized, presenting a clear overview of the section on non-uniform superposition. It effectively highlights the key points, observations, and implications, providing readers with a comprehensive understanding of this concept in the context of neural networks. The use of clear subheadings also makes the information easily accessible and digestible. Good work!There is still more to the article but could I get a recap?ChatGPTCertainly! Here's a recap of the article so far:1. Introduction:The article explores the concept of superposition in neural networks, focusing on its mathematical understanding and implications.2. Mathematical Understanding:The model employs a non-linearity (ReLU) that facilitates a unique solution - superposition - unattainable with linear models.Two forces govern the model: feature benefit and interference. These dictate the learning dynamics, with interference preventing the representation of more features than the modelâs dimensions.3. Superposition as a Phase Change:Three potential outcomes for features during model training: not learned, learned in superposition, or assigned a dedicated dimension.Experimentation suggests a "phase diagram" may exist to predict feature outcomes, and the phase transitions between outcomes are sharp.4. Geometry of Superposition:Uniform superposition leads to unique geometric configurations (like polytopes) among features.Features organize into specific geometric structures, like pentagons and tetrahedrons, in uniform superposition.5. Feature Dimensionality:The dimensionality of a feature is defined, providing insights into how much "space" a feature occupies in the model.Features seem to exist in various âphasesâ within the broad category of superposition, similar to the multiple phases of ice.6. Polytopes and Low-Rank Matrices:A correspondence exists between polytopes and low-rank matrices, crucial for understanding superposition. The geometry of weight matrices in neural networks can be interpreted as different strategies for feature superposition.7. Non-Uniform Superposition:Non-uniform superposition occurs when features vary in importance, sparsity, or correlation.Perturbing a single feature's properties affects the entire geometric structure, with significant perturbations leading to phase changes in the feature representation geometry.Implications:Understanding both uniform and non-uniform superposition is crucial as they offer deep insights into feature representation and manipulation in neural networks. The article explores the complex dynamics, geometric interpretations, and mathematical underpinnings of these phenomena, providing valuable knowledge for future research and practical applications in the field of neural networks.These results seem to suggest that, at least in some cases, non-uniform superposition can be understood as a deformation of uniform superposition and jumping between uniform superposition configurations rather than a totally different regime. Since uniform superposition has a lot of understandable structure, but real world superposition is almost certainly non-uniform, this seems very promising!

The reason pentagonal solutions are not on the unit circle is because models reduce the effect of positive interference, setting a slight negative bias to cut off noise and setting their weights to 
â£
â£
ï¿½
ï¿½
â£
â£
=
1
/
(
1
â
ï¿½
ï¿½
)
â£â£W 
i
â
 â£â£=1/(1âb 
i
â
 ) to compensate. Distance from the unit circle can be interpreted as primarily driven by the amount of positive interference.

A note for reimplementations: optimizing with a two-dimensional hidden space makes this easier to study, but the actual optimization process to be really challenging from gradient descent â a lot harder than even just having three dimensions. Getting clean results required fitting each model multiple times and taking the solution with the lowest loss. However, there's a silver lining to this: visualizing the sub-optimal solutions on a scatter plot as above allows us to see the loss curves for different geometries and gain greater insight into the phase change.

Correlated and Anticorrelated Features
A more complicated form of non-uniform superposition occurs when there are correlations between features. This seems essential for understanding superposition in the real world, where many features are correlated or anti-correlated.

For example, one very pragmatic question to ask is whether we should expect polysemantic neurons to group the same features together across models. If the groupings were random, you could use this to detect polysemantic neurons, by comparing across models! However, we'll see that correlational structure strongly influences which features are grouped together in superposition.

The behavior seems to be quite nuanced, with a kind of "order of preferences" for how correlated features behave in superposition. The model ideally represents correlated features orthogonally, in separate tegum factors with no interactions between them. When that fails, it prefers to arrange them so that they're as close together as possible â it prefers positive interference between correlated features over negative interference. Finally, when there isn't enough space to represent all the correlated features, it will collapse them and represent their principal component instead! Conversely, when features are anti-correlated, models prefer to have them interfere, especially with negative interference. We'll demonstrate this with a few experiments below.

SETUP FOR EXPLORING CORRELATED AND ANTICORRELATED FEATURES
Throughout this section we'll refer to "correlated feature sets" and "anticorrelated feature sets".

Correlated Feature Sets. Our correlated feature sets can be thought of as "bundles" of co-occurring features. One can imagine a highly idealized version of what might happen in an image classifier: there could be a bundle of features used to identify animals (fur, ears, eyes) and another bundle used to identify buildings (corners, windows, doors). Features from one of these bundles are likely to appear together. Mathematically, we represent this by linking the choice of whether all the features in a correlated feature set are zero or not together. Recall that we originally defined our synthetic distribution to have features be zero with probability 
ï¿½
S and otherwise uniformly distributed between [0,1]. We simply have the same sample determine whether they're zero.

Anticorrelated Feature Sets. One could also imagine anticorrelated features which are extremely unlikely to occur together. To simulate these, we'll have anticorrelated feature sets where only one feature in the set can be active at a time. To simulate this, we'll have the feature set be entirely zero with probability 
ï¿½
S, but then only have one randomly selected feature in the set be uniformly sampled from [0,1] if it's active, with the others being zero.

ORGANIZATION OF CORRELATED AND ANTICORRELATED FEATURES
For our initial investigation, we simply train a number of small toy models with correlated and anti-correlated features and observe what happens. To make this easy to study, we limit ourselves to the 
ï¿½
=
2
m=2 case where we can explicitly visualize the weights as points in 2D space. In general, such solutions can be understood as a collection of points on a unit circle. To make solutions easy to compare, we rotate and flip solutions to align with each other.

ChatGPTThe section describes the implications of non-uniform superposition and explores the interactions of correlated and anti-correlated features within this context. Hereâs a summarization:Non-Uniform Superposition:Non-uniform superposition can often be conceptualized as a variation or deformation of uniform superposition. This insight is promising since real-world superposition in neural networks is typically non-uniform.The study considers different weights and biases in the models. The variation in distance from a unit circle in the graphical representation of solutions is attributed to positive interference amongst features.Optimization Challenges:Two-dimensional hidden spaces, though conceptually simpler for study, present significant optimization challenges during the application of gradient descent. To address this, each model was fitted multiple times with different solutions, and the one with the lowest loss was selected. Visualization of sub-optimal solutions provides deeper insight into the various phase changes.Correlated and Anti-Correlated Features:The section introduces a complex form of non-uniform superposition involving correlated and anti-correlated features, which is crucial for understanding real-world superposition.Correlated Feature Sets:Defined as âbundlesâ of co-occurring features, correlated sets are those where features within a set are likely to appear together.The model prefers to represent correlated features orthogonally, with each feature in separate tegum factors, thereby minimizing interaction. If this is not possible, the model places correlated features closely together to encourage positive interference.When space is constrained, the model may collapse correlated features into their principal component.Anti-Correlated Feature Sets:These are features unlikely to appear together. The model prefers negative interference between anti-correlated features.Experimental Setup:The study utilizes small toy models trained with both correlated and anti-correlated features to observe their behavior. In the case of m=2m = 2m=2, the weights of the solutions can be visualized as points in a 2D space. Solutions are adjusted (via rotation and flipping) to facilitate comparison.Significance:Understanding the behavior of correlated and anti-correlated features in superposition is crucial as it offers insights into the organization and representation of features in neural networks. This knowledge is especially pertinent when considering features that tend to co-occur or rarely appear together, providing valuable insights for real-world application scenarios where features exhibit complex relationships and interactions.LOCAL ALMOST-ORTHOGONAL BASES
It turns out that the tendency of models to arrange correlated features to be orthogonal is actually quite a strong phenomenon. In particular, for larger models, it seems to generate a kind of "local almost-orthogonal basis" where, even though the model as a whole is in superposition, the correlated feature sets considered in isolation are (nearly) orthogonal and can be understood as having very little superposition.

To investigate this, we train a larger model with two sets of correlated features and visualize 
ï¿½
ï¿½
ï¿½
W 
T
 W.


If this result holds in real neural networks, it suggests we might be able to make a kind of "local non-superposition" assumption, where for certain sub-distributions we can assume that the activating features are not in superposition. This could be a powerful result, allowing us to confidently use methods such as PCA which might not be principled to generally use in the context of superposition.

COLLAPSING OF CORRELATED FEATURES

One of the most interesting properties is that there seems to be a trade off with Principal Components Analysis (PCA) and superposition. If there are two correlated features 
ï¿½
a and 
ï¿½
b, but the model only has capacity to represent one, the model will represent their principal component 
(
ï¿½
+
ï¿½
)
/
2
(a+b)/ 
2
â
 , a sparse variable that has more impact on the loss than either individually, and ignore the second principal component 
(
ï¿½
â
ï¿½
)
/
2
(aâb)/ 
2
â
 .

As an experiment, we consider six features, organized into three sets of correlated pairs. Features in each correlated pair are represented by a given color (red, green, and blue). The correlation is created by having both features always activate together â they're either both zero or neither zero. (The exact non-zero values they take when they activate is uncorrelated.)

As we vary the sparsity of the features, we find that in the very sparse regime, we observe superposition as expected, with features arranged in a hexagon and correlated features side-by-side. As we decrease sparsity, the features progressively "collapse" into their principal components. In very dense regimes, the solution becomes equivalent to PCA.


These results seem to hint that PCA and superposition are in some sense complementary strategies which trade off with one another. As features become more correlated, PCA becomes a better strategy. As features become sparser, superposition becomes a better strategy. When features are both sparse and correlated, mixtures of each strategy seem to occur. It would be nice to more deeply understand this space of tradeoffs.

It's also interesting to think about this in the context of continuous equivariant features, such as features which occur in different rotations.ChatGPTThe section discusses the strong tendency of models to arrange correlated features orthogonally, resulting in a âlocal almost-orthogonal basisâ. This phenomenon might be crucial for understanding the superposition in larger, real-world neural networks.Key Points:Local Almost-Orthogonal Bases:Models tend to organize correlated features orthogonally, creating a "local almost-orthogonal basis."For larger models, correlated feature sets, when viewed in isolation, are nearly orthogonal and exhibit minimal superposition. This organization of features can be visualized through the product of the weight matrix WWW and its transpose.If this trend applies to real neural networks, analysts might assume a "local non-superposition" condition for certain sub-distributions of features. This allows the use of techniques like Principal Component Analysis (PCA), even in the context of superposition.Collapsing of Correlated Features:When two correlated features aaa and bbb are present, but the model can only represent one, the model tends to represent their principal component, (a+b)/2(a+b)/2(a+b)/2, ignoring the second principal component (aâb)/2(aâb)/2(aâb)/2.This behaviour suggests a trade-off between PCA and superposition, with the model selecting a strategy based on feature characteristics. As features grow more correlated, PCA becomes more effective; as features grow sparser, superposition gains the upper hand.Experimental Insights:An experiment involving six features (grouped into three correlated pairs) demonstrates this trade-off. In sparse regimes, the model uses superposition with features arranged hexagonally, while in denser regimes, it adopts a PCA-like approach. This transition and the resulting configurations hint at a dynamic interplay between PCA and superposition strategies, depending on the sparsity and correlation of features.Continuous Equivariant Features:The findings may also be relevant when considering continuously equivariant features, such as features representing different rotations.Implications:Understanding the tendency of models to create local almost-orthogonal bases is crucial for interpreting and leveraging the behaviour of neural networks in real-world applications.The observed trade-off between PCA and superposition provides valuable insights into the modelâs strategies for representing features, which is significant for features that are both sparse and correlated. Further exploration of these trade-offs and their implications is necessary for a deeper understanding of neural networks and the representation of complex feature sets.Superposition and Learning Dynamics
The focus of this paper is how superposition contributes to the functioning of fully trained neural networks, but as a brief detour it's interesting to ask how our toy models â and the resulting superposition â evolve over the course of training.

There are several reasons why these models seem like a particularly interesting case for studying learning dynamics. Firstly, unlike most neural networks, the fully trained models converge to a simple but non-trivial structure that rhymes with an emerging thread of evidence that neural network learning dynamics might have geometric weight structure that we can understand. One might hope that understanding the final structure would make it easier for us to understand the evolution over training. Secondly, superposition hints at surprisingly discrete structure (regular polytopes of all things!). We'll find that the underlying learning dynamics are also surprisingly discrete, continuing an emerging trend of evidence that neural network learning might be less continuous than it seems. Finally, since superposition has significant implications for interpretability, it would be nice to understand how it emerges over training â should we expect models to use superposition early on, or is it something that only emerges later in training, as models struggle to fit more features in?

Unfortunately, we aren't able to give these questions the detailed investigation they deserve within the scope of this paper. Instead, we'll limit ourselves to a couple particularly striking phenomena we've noticed, leaving more detailed investigation for future work.

PHENOMENON 1: DISCRETE "ENERGY LEVEL" JUMPS
Perhaps the most striking phenomenon we've noticed is that the learning dynamics of toy models with large numbers of features appear to be dominated by "energy level jumps" where features jump between different feature dimensionalities. (Recall that a feature's dimensionality is the fraction of a dimension dedicated to representing a feature.)

Let's consider the problem setup we studied when investigating the geometry of uniform superposition in the previous section, where we have a large number of features of equal importance and sparsity. As we saw previously, the features ultimately arrange themselves into a small number of polytopes with fractional dimensionalities.

A natural question to ask is what happens to these feature dimensionalities over the course of training. Let's pick one model where all the features converge into digons and observe. In the first plot, each colored line corresponds to the dimensionality of a single feature. The second plot shows how the loss curve changes over the same duration.

Note how the dimensionality of some features "jump" between different values and swap places. As this happens, the loss curve also undergoes a sudden drop (a very small one at the first jump, and a larger one at the second jump).

These results make us suspect that seemingly smooth decreases of the loss curve in larger models are in fact composed of many small jumps of features between different configurations. (For similar results of sudden mechanistic changes, see Olsson et al.'s induction head phase change 
[29]
, and Nanda and Lieberum's results on phase changes in modular arithmetic 
[30]
. More broadly, consider the phenomenon of grokking 
[31]
.)

PHENOMENON 2: LEARNING AS GEOMETRIC TRANSFORMATIONS
Many of our toy model solutions can be understood as corresponding to geometric structures. This is especially easy to see and study when there are only 
ï¿½
=
3
m=3 hidden dimensions, since we can just directly visualize the feature embeddings as points in 3D space forming a polyhedron.

It turns out that, at least in some cases, the learning dynamics leading to these structures can be understood as a sequence of simple, independent geometric transformations!

One particularly interesting example of this phenomenon occurs in the context of correlated features, as studied in the previous section. Consider the problem of representing 
ï¿½
=
6
n=6 features in superposition within 
ï¿½
=
3
m=3 dimensions. If we have the 
6
6 features be 
2
2 sets of 
3
3 correlated features, we observe a really interesting pattern. The learning proceeds in distinct regimes which are visible in the loss curve, with each regime corresponding to a distinct geometric transformation:


(Although the last solution â an octahedron with features from different correlated sets arranged in antipodal pairs â seems to be a strong attractor, the learning trajectory visualized above appears to be one of a few different learning trajectories that attract the model. The different trajectories vary at step C: sometimes the model gets pulled directly into the antiprism configuration from the start or organize features into antipodal pairs. Presumably this depends on which feature geometry the model is closest to when step B ends.)

The learning dynamics we observe here seem directly related to previous findings on simple models. 
[32]
 found that two-layer neural networks, in early stages of training, tend to learn a linear approximation to a problem. Although the technicalities of our data generation process do not precisely match the hypotheses of their theorem, it seems likely that the same basic mechanism is at work. In our case, we see the toy network learns a linear PCA solution before moving to a better nonlinear solution. A second related finding comes from 
[33]
, who looked at hierarchical sets of features, with a data generation process similar to the one we consider. They find empirically that certain networks (nonlinear and deep linear) âsplitâ embedding vectors in a manner very much like what we observed. They also provide a theoretical analysis in terms of the underlying dynamical system. A key difference is that they focus on the topologyâthe branching structure of the emerging feature representationsârather than the geometry. Despite this difference, it seems likely that their analysis could be generalized to our case.ChatGPTThis section delves into the learning dynamics of neural networks with a focus on the evolution of superposition during training.Key Points:Interest in Learning Dynamics:The study is particularly interested in learning dynamics since fully trained models demonstrate non-trivial structures, hinting at discrete geometric weight structures.Learning dynamics reveal discrete structures, which is crucial for understanding the emergence and evolution of superposition during training.Phenomenon 1: Energy Level Jumps:Toy models exhibit "energy level jumps" where features move between different dimensionalities. As feature dimensionalities change, there's a corresponding sudden drop in the loss curve.These jumps might constitute the seemingly smooth decreases in the loss curve observed in larger models, implying that loss reduction might be more discrete than it appears.Phenomenon 2: Geometric Transformations in Learning:Learning dynamics in toy models can be seen as sequences of geometric transformations leading to the formation of specific structures.In a scenario with six features distributed in three dimensions, distinct learning regimes are observable, each aligning with different geometric transformations. The trajectory of these transformations seems to depend on the initial proximity of features to specific geometrical configurations.Early stages of training tend to focus on learning linear approximations to the problem, transitioning to non-linear solutions as training progresses. This observation aligns with previous findings on the learning dynamics of simple models.Implications and Related Works:The discrete changes in feature dimensionality and the geometric transformations observed during the learning process align with previous studies and provide insights into the dynamics of neural network training.These observations also resonate with the findings of other researchers who have explored the dynamics of feature learning, though their focus might have been on different aspects, such as topology rather than geometry.Understanding these phenomena and their implications can offer valuable insights into the learning process of neural networks and the development and optimization of features during training.Future Directions:While the paper presents some striking phenomena observed during training, it suggests that a more detailed investigation into the learning dynamics of superposition is necessary for future work.It is crucial to understand how these observed dynamics relate to the learning processes in real, more complex neural networks, and how these insights can be utilized for better model training and interpretation.

Relationship to Adversarial Robustness
Although we're most interested in the implications of superposition for interpretability, there appears to be a connection to adversarial examples. If one gives it a little thought, this connection can actually be quite intuitive.

In a model without superposition, the end-to-end weights for the first feature are:

(
ï¿½
ï¿½
ï¿½
)
0
 
 
=
 
 
(
1
,
 
0
,
 
0
,
 
0
,
 
.
.
.
)
(W 
T
 W) 
0
â
   =  (1, 0, 0, 0, ...)

But in a model with superposition, it's something like:

(
ï¿½
ï¿½
ï¿½
)
0
 
 
=
 
 
(
1
,
 
ï¿½
,
 
â
ï¿½
,
 
ï¿½
,
 
.
.
.
)
(W 
T
 W) 
0
â
   =  (1, Ïµ, âÏµ, Ïµ, ...)

The 
ï¿½
Ïµ entries (which are solely an artifact of superposition "interference") create an obvious way for an adversary to attack the most important feature. Note that this may remain true even in the infinite data limit: the optimal behavior of the model fit to sparse infinite data is to use superposition to represent more features, leaving it vulnerable to attack.

To test this, we generated L2 adversarial examples (allowing a max L2 attack norm of 0.1 of the average input norm). We originally generated attacks with gradient descent, but found that for extremely sparse examples where ReLU neurons are in the zero regime 99% of the time, attacks were difficult, effectively due to gradient masking 
[34]
. Instead, we found it worked better to analytically derive adversarial attacks by considering the optimal L2 attacks for each feature (
ï¿½
(
ï¿½
ï¿½
ï¿½
)
ï¿½
/
â£
â£
(
ï¿½
ï¿½
ï¿½
)
ï¿½
â£
â£
2
Î»(W 
T
 W) 
i
â
 /â£â£(W 
T
 W) 
i
â
 â£â£ 
2
â
 ) and taking the one of these attacks which most harms model performance.

We find that vulnerability to adversarial examples sharply increases as superposition forms (increasing by >3x), and that the level of vulnerability closely tracks the number of features per dimension (the reciprocal of feature dimensionality).


We're hesitant to speculate about the extent to which superposition is responsible for adversarial examples in practice. There are compelling theories for why adversarial examples occur without reference to superposition (e.g. 
[35]
). But it is interesting to note that if one wanted to try to argue for a "superposition maximalist stance", it does seem like many interesting phenomena related to adversarial examples can be predicted from superposition. As seen above, superposition can be used to explain why adversarial examples exist. It also predicts that adversarially robust models would have worse performance, since making models robust would require giving up superposition and representing less features. It predicts that more adversarially robust models might be more interpretable (see e.g. 
[36]
). Finally, it could arguably predict that adversarial examples transfer (see e.g. 
[37]
) if the arrangement of features in superposition is heavily influenced by which features are correlated or anti-correlated (see earlier results on this). It might be interesting for future work to see how far the hypothesis that superposition is a significant contributor to adversarial examples can be driven.

In addition to observing that superposition can cause models to be vulnerable to adversarial examples, we briefly experimented with adversarial training to see if the relationship could be used in the other direction to reduce superposition. To keep training reasonably efficient, we used the analytic optimal attack against a random feature. We found that this did reduce superposition, but attacks had to be made unreasonably large (80% input L2 norm) to fully eliminate it, which didn't seem satisfying. Perhaps stronger adversarial attacks would work better. We didn't explore this further since the increased cost and complexity of adversarial training made us want to prioritize other lines of attack on superposition first.ChatGPTThis section explores the potential connection between superposition in neural networks and adversarial robustness, especially in the context of adversarial examples.Key Points:Vulnerability to Adversarial Attacks:Models with superposition might be more susceptible to adversarial attacks due to interference created by superposition. This vulnerability is observed even when models are optimized with infinite data.Adversarial Example Generation:The study generated L2 adversarial examples and observed that the vulnerability to these examples increases sharply as superposition forms. Vulnerability levels also seem to correlate with the number of features per dimension (inverse of feature dimensionality).Speculations on Superposition and Adversarial Examples:While there are existing theories explaining adversarial examples without referencing superposition, the study notes that superposition can provide plausible explanations for various phenomena related to adversarial examples. Some speculative points include:Superposition might explain the existence of adversarial examples.Adversarially robust models may perform worse as they might have to forgo superposition, leading to representation of fewer features.More robust models could be more interpretable.The transferability of adversarial examples might be predicted by the arrangement of features in superposition, especially concerning correlated or anti-correlated features.Adversarial Training Experiments:Preliminary experiments with adversarial training aimed at reducing superposition were conducted. While some reduction in superposition was observed, the adversarial attacks had to be significantly large to eliminate superposition entirely, which was deemed unsatisfactory.Due to the increased cost and complexity associated with adversarial training, further exploration in this direction was deprioritized in favor of other approaches to studying superposition.Implications:Understanding the relationship between superposition and adversarial vulnerability is crucial, as it might offer new insights into developing more robust and interpretable models.The connection between superposition and adversarial examples warrants further exploration to validate the speculations made in this study and to explore potential applications and strategies for improving model robustness and interpretability.Future Directions:There's a need for more in-depth exploration of the relationship between superposition and adversarial examples, as well as adversarial robustness. Future work could focus on investigating whether superposition significantly contributes to adversarial vulnerability and how this knowledge can be leveraged for developing more secure and effective neural networks.Superposition in a Privileged Basis
So far, we've explored superposition in a model without a privileged basis. We can rotate the hidden activations arbitrarily and, as long as we rotate all the weights, have the exact same model behavior. That is, for any ReLU output model with weights 
ï¿½
W, we could take an arbitrary orthogonal matrix 
ï¿½
O and consider the model 
ï¿½
â²
=
ï¿½
ï¿½
W 
â²
 =OW. Since 
(
ï¿½
ï¿½
)
ï¿½
(
ï¿½
ï¿½
)
=
ï¿½
ï¿½
ï¿½
(OW) 
T
 (OW)=W 
T
 W, the result would be an identical model!

Models without a privileged basis are elegant, and can be an interesting analogue for certain neural network representations which don't have a privileged basis â word embeddings, or the transformer residual stream. But we'd also (and perhaps primarily) like to understand neural network representations where there are neurons which do impose a privileged basis, such as transformer MLP layers or conv net neurons.

Our goal in this section is to explore the simplest toy model which gives us a privileged basis. There are at least two ways we could do this: we could add an activation function or apply L1 regularization to the hidden layer. We'll focus on adding an activation function, since the representation we are most interested in understanding is hidden layers with neurons, such as the transformer MLP layer.

This gives us the following "ReLU hidden layer" model:

â
 
=
 
ReLU
(
ï¿½
ï¿½
)
h = ReLU(Wx)
ï¿½
â²
 
=
 
ReLU
(
ï¿½
ï¿½
â
+
ï¿½
)
x 
â²
  = ReLU(W 
T
 h+b)
We'll train this model on the same data as before.

Adding a ReLU to the hidden layer radically changes the model from an interpretability perspective. The key thing is that while 
ï¿½
W in our previous model was challenging to interpret (recall that we visualized 
ï¿½
ï¿½
ï¿½
W 
T
 W rather than 
ï¿½
W), 
ï¿½
W in the ReLU hidden layer model can be directly interpreted, since it connects features to basis-aligned neurons.

We'll discuss this in much more detail shortly, but here's a comparison of weights resulting from a linear hidden layer model and a ReLU hidden layer model:


Recall that we think of basis elements in the input as "features," and basis elements in the middle layer as "neurons". Thus 
ï¿½
W is a map from features to neurons.

What we see in the above plot is that the features are aligning with neurons in a structured way! Many of the neurons are simply dedicated to representing a feature! (This is the critical property that justifies why neuron-focused interpretability approaches â such as much of the work in the original Circuits thread â can be effective in some circumstances.)

Let's explore this in more detail.

VISUALIZING SUPERPOSITION IN TERMS OF NEURONS
Having a privileged basis opens up new possibilities for visualizing our models. As we saw above, we can simply inspect 
ï¿½
W. We can also make a per-neuron stacked bar plot where, for every neuron, we visualize its weights as a stack of rectangles on top of each other:

Each column in the stack plot visualizes one column of 
ï¿½
W.
Each rectangle represents one weight entry, with height corresponding to the absolute value.
The color of each rectangle corresponds to the feature it acts on (i.e. which row of 
ï¿½
W it's in).
Negative values go below the x-axis.
The order of the rectangles is not significant.
This stack plot visualization can be nice as models get bigger. It also makes polysemantic neurons obvious: they simply correspond to having more than one weight.


We'll now visualize a ReLU hidden layer toy model with 
ï¿½
=
1
0
;
 
ï¿½
=
5
;
ï¿½
ï¿½
=
0
.
7
5
ï¿½
n=10; m=5;I 
i
 =0.75 
i
  and varying feature sparsity levels. We chose a very small model (only 5 neurons) both for ease of visualization, and to circumvent some issues with this toy model we'll discuss below.

However, we found that these small models were harder to optimize. For each model shown, we trained 1000 models and visualized the one with the lowest loss. Although the typical solutions are often similar to the minimal loss solutions shown, selecting the minimal loss solutions reveals even more structure in how features align with neurons. It also reveals that there are ranges of sparsity values where the optimal solution for all models trained on data with that sparsity have the same weight configurations.

The solutions are visualized below, both visualizing the raw 
ï¿½
W and a neuron stacked bar plot. We color features in the stacked bar plot based on whether they're in superposition, and color neurons as being monosemantic or polysemantic depending on whether they store more than one feature. Neuron order was chosen by hand (since it's arbitrary).ChatGPTThis section introduces a model with a privileged basis to further explore the concept of superposition, focusing on understanding neural network representations where neurons impose a privileged basis. A privileged basis refers to a specific orientation or set of axes in a space that is considered as a reference or standard.Key Points:Privileged Basis Introduction:The authors introduce a "ReLU hidden layer" model which provides a privileged basis. This is different from previous models where no such basis existed. In this model, h=ReLU(Wx)h = \text{ReLU}(Wx)h=ReLU(Wx) and xâ²=ReLU(WTh+b)x' = \text{ReLU}(W^Th+b)xâ²=ReLU(WTh+b).The addition of a ReLU activation function to the hidden layer makes the model's weights easier to interpret, providing direct insight into the connections between features and neurons.Features Align with Neurons:The weights (WWW) in the ReLU hidden layer model can be directly interpreted. This model shows that features align with neurons in a structured manner. Many neurons are dedicated to representing specific features, facilitating interpretation approaches focused on neurons.Visualization Using a Privileged Basis:The privileged basis allows for new visualization possibilities. For example, a per-neuron stacked bar plot can be created where each neuronâs weights are visualized as stacks of rectangles. This method is especially helpful for identifying polysemantic neurons, as they are represented by columns with multiple weights.Example with Small Model:An example of a small ReLU hidden layer toy model is presented, with n=10n = 10n=10, m=5m = 5m=5, and varying feature sparsity levels. Despite being harder to optimize, the small model is used for ease of visualization and to avoid some issues with larger models. The authors trained 1000 models and visualized the one with the lowest loss, revealing structure in how features align with neurons and showing that certain sparsity levels yield optimal solutions with similar weight configurations.Visualization Approach:The authors present two types of visualizations: the raw weights (WWW) and a neuron stacked bar plot.In the stacked bar plot:Each column represents a neuron.Each rectangle represents a weight entry, with its height corresponding to the absolute value of the weight.Rectangle colors indicate the feature acted upon.Negative values are depicted below the x-axis.The ordering of the rectangles within each stack is not significant.Implications:The introduction of a privileged basis through a ReLU hidden layer provides a new perspective for understanding and visualizing how features align with neurons. This approach makes it easier to interpret models and reveals the structure of feature-to-neuron alignment, offering insights that are crucial for further studies and applications in neural networks and their feature representation mechanisms.Future Directions:The study hints at the need for more detailed exploration of the implications of having a privileged basis and how this affects the understanding and interpretation of neural network models. Future work could delve deeper into this aspect, shedding light on the nuances and potential applications of this approach in the field of neural networks and machine learning.neuron weights
stacked bar plot
neurons
monosemantic
neurons
leurons
All Monosemantic Neurons (approximately 0.5 s 1-S)
In this regime, every feature gets a dedicated neuron. That is,
the model consists entirely of monosemantic neurons.
As feature sparsity
increases, we see
neurons shift from
being monosemantic
to being polysemantic.
olysemantic
Three Features in Two Neurons (approximately 0.2 s 1-S s 0.5)
In this regime, the three most important features still get
dedicated neurons, but the next three are represented in a kind
of binary code by two neuron's activations.
These two neurons form a binary code for three features.
Note that the (1,1) feature is orthogonal to the others,
while the other two are an antipodal pair.
Individual features
are colored based on
whether they're in
superposition
(te)f
Five Features in Three Neurons (1-S = 0.15)
At this sparsity level (which seems quite narrow), we still see two
monosemantic neurons, and three polysemantic neurons. The
three polysemantic neurons imlement a code that doesn't have
any very simple explanation.
Six Features in Four Neurons (1-S = 0.12)
In this regime, we have one monosemantic neuron. The four
polysemantic neurons implement an interesting code. One neuron
seems to distinguish between important and unimportant
features. Important features are then encoded as sets of two of
the other three neurons, while unimportant features are
represented by one neuron.
Eight Features in Five Neurons (0.05 s 1-S < 0.08)
In this regime, all neurons are polysemantic. The code is a kind of
extension of the one described previously: one distinguishes
imporant and unimportant features. Then either sets of three of
the other neurons, or a single other neuron, are used to distinguish
the specific feature.
veight
Features are Pairs of Neurons (1-S s 0.04)
In this regime, each feature simply correspond to a pair of neurons.
Presumably if there were more features, increasing sparsity would
eventually produce a dense binary code. But with only 10 features,
this is the densest code that forms.
weights
The most important thing to pay attention to is how there's
a shift from monosemantic to polysemantic neurons as
sparsity increases. Monosemantic neurons do exist in some
regimes! Polysemantic neurons exist in others. And they
can both exist in the same model! Moreover, while it's not
quite clear how to formalize this, it looks a great deal like
there's a neuron-level phase change, mirroring the feature
phase changes we saw earlier.
It's also interesting to examine the structure of the
polysemantic solutions, which turn out to be surprisingly
structured and neuron-aligned. Features typically
correspond to sets of neurons (monosemantic neurons
might be seen as the special case where features only
correspond to singleton sets). There's also structure in how
polysemantic neurons are. They transition from
monosemantic, to only representing a few features, to
gradually representing more. However, it's unclear how
much of this is generalizable to real modelsChatGPTThe section you provided appears to discuss how the nature of neurons (monosemantic or polysemantic) changes with the alteration of feature sparsity in a neural network model. Below, I'll provide a summary of the key points and implications:Summary:Shift from Monosemantic to Polysemantic Neurons:As feature sparsity increases, neurons transition from being monosemantic (representing a single feature) to polysemantic (representing multiple features).The text seems to suggest a kind of phase transition at the neuron level, similar to feature phase transitions observed earlier in the study.Different Regimes:There are various regimes where neurons have different structures of representing features:All Monosemantic Neurons: Each feature is dedicated to a specific neuron.Three Features in Two Neurons: Three features are encoded in a binary manner by two neurons.Five Features in Three Neurons: Combination of monosemantic and polysemantic neurons with no straightforward explanation for the encoding.Six Features in Four Neurons: One neuron distinguishes between important and unimportant features, with others encoding features in sets.Eight Features in Five Neurons: All neurons are polysemantic with a complex encoding mechanism.Features are Pairs of Neurons: Each feature corresponds to a pair of neurons, suggesting a potential evolution towards a dense binary code with increased sparsity.Polysemantic Solution Structures:Polysemantic neurons have structured and aligned solutions, with features often corresponding to sets of neurons.There's a transition where neurons start from monosemantic, gradually represent more features, and become polysemantic.Implications:Understanding Neuron Transitions: The observed transition from monosemantic to polysemantic neurons as feature sparsity increases provides insights into the dynamic nature of neuron functionality in neural networks.Phase Change at Neuron-Level: The suggestion of a neuron-level phase change is crucial for understanding how neurons adapt and change their feature representation mechanisms as the network learns and evolves.Structured Polysemantic Solutions: The structure within polysemantic solutions indicates a level of organization and alignment in how neurons represent features, which might have significant implications for understanding and interpreting the functionality and behavior of neural networks.Questions for Further Study:How generalizable are these observations to larger, more complex real-world neural network models?Can the observed transitions and phase changes at the neuron level be formalized or mathematically modeled for better understanding and prediction?How does the structure within polysemantic neurons influence the overall performance and accuracy of the neural network in various tasks and applications?The text raises intriguing points about the dynamic and adaptive nature of neurons in representing features, suggesting areas for further study and exploration in the field of neural networks and machine learning.LIMITATIONS OF THE RELU HIDDEN LAYER TOY MODEL SIMULATING IDENTITY
Unfortunately, the toy model described in this section has a significant weakness, which limits the regimes in which it shows interesting results. The issue is that the model doesn't benefit from the ReLU hidden layer â it has no role except limiting how the model can encode information. If given any chance, the model will circumvent it. For example, given a hidden layer bias, the model will set all the biases to be positive, shifting the neurons into a positive regime where they behave linearly. If one removes the bias, but gives the model enough features, it will simulate a bias by averaging over many features. The model will only use the ReLU activation function if absolutely forced, which is a significant mark against studying this toy model.

We'll introduce a model without this issue in the next section, but wanted to study this model as a simpler case study.






Computation in Superposition
So far, we've shown that neural networks can store sparse features in superposition and then recover them. But we actually believe superposition is more powerful than this â we think that neural networks can perform computation entirely in superposition rather than just using it as storage. This model will also give us a more principled way to study a privileged basis where features align with basis dimensions.

To explore this, we consider a new setup where we imagine our input and output layer to be the layers of our hypothetical disentangled model, but have our hidden layer be a smaller layer we're imagining to be the observed model which might use superposition. We'll then try to compute a simple non-linear function and explore whether it can use superposition to do this. Since the model will have (and need to use) the hidden layer non-linearity, we'll also see features align with a privileged basis.ChatGPTThis section acknowledges limitations in a toy model described previously, indicating that the model doesn't effectively utilize its ReLU hidden layer. It highlights the following key points:Summary:Limitation of ReLU Hidden Layer Toy Model:The toy model under consideration doesn't derive benefits from having a ReLU hidden layer. Instead, the ReLU layer only restricts the encoding of information without contributing positively to the model's performance.The model tends to avoid using the ReLU activation function unless absolutely necessary.Circumvention of Activation Function:Given hidden layer biases, the model prefers setting all biases to positive values. This adjustment shifts neurons into a positive regime where they function linearly, essentially bypassing the non-linear characteristics introduced by the ReLU function.If biases are removed but the model is provided with sufficient features, it attempts to simulate the effect of biases through averaging over multiple features.Upcoming Section Preview:Computation in Superposition:The upcoming section explores the potential of neural networks to not only store but also compute in superposition, suggesting that superposition might be used for more than just storing sparse features.A new model setup is introduced where the input and output layers are imagined to be part of a hypothetical disentangled model. In contrast, the hidden layer is visualized as a smaller layer functioning as the observed model.The new setup aims to compute a simple non-linear function while exploring the possibility of using superposition for computation. This exploration also expects to observe features aligning with a privileged basis due to the necessity of using the hidden layer's non-linearity.Implications:The limitations noted indicate that caution must be exercised when interpreting results from the discussed toy model, as it may not accurately reflect the behaviors of neural networks with ReLU hidden layers in more complex, real-world scenarios.The upcoming exploration of computation in superposition offers promising insights into understanding how neural networks might leverage superposition beyond storage, potentially revealing more about the dynamic and computational aspects of superposition in neural network models.Understanding these limitations is crucial for researchers and practitioners as they interpret the findings and consider the applicability of the discussed models to more complex and practical machine learning problems and scenarios.I'm skipping a bit.

Superposition vs Sparsity
We've seen that â as expected â our toy model can learn to implement absolute value. But can it use superposition to compute absolute value for more features? To test this, we train models with 
ï¿½
=
1
0
0
n=100 features and 
ï¿½
=
4
0
m=40 neurons and a feature importance curve 
ï¿½
ï¿½
=
0
.
8
ï¿½
I 
i
â
 =0.8 
i
 , varying feature sparsity. 16

A couple of notes on visualization: Since we're primarily interested in understanding superposition and polysemantic neurons, we'll show a stacked weight plot of the absolute values of weights. The features are colored by superposition. To make the diagrams easier to read, neurons are faintly colored based on how polysemantic they are (as judged by eye based on the plots). Neuron order is sorted by the importance of the largest feature.


Much like we saw in the ReLU hidden layer models, these results demonstrate that activation functions, under the right circumstances, create a privileged basis and cause features to align with basis dimensions. In the dense regime, we end up with each neuron representing a single feature, and we can read feature values directly off of neuron activations.

However, once the features become sufficiently sparse, this model, too, uses superposition to represent more features than it has neurons. This result is notable because it demonstrates the ability of neural networks to perform computation even on data that is represented in superposition. 17 Remember that the model is required to use the hidden layer ReLU in order to compute an absolute value; gradient descent manages to find solutions that usefully approximate the computation even when each neuron encodes a mix of multiple features.

Focusing on the intermediate sparsity regimes, we find several additional qualitative behaviors that we find fascinatingly reminiscent of behavior that has been observed in real, full-scale neural networks:


To begin, we find that in some regimes, many of the model's neurons will encode pure features, but a subset of them will be highly polysemantic. This is similar to the phase change we saw earlier in the ReLU output model. However, in that case, the phase change was with respect to features, with more important features not being put in superposition. In this experiment, the neurons don't have any intrinsic importance, but we see that the neurons representing the most important features (on the left) tend to be monosemantic.

We find this to bear a suggestive resemblance to some previous work in vision models, which found some layers that contained "mostly pure" feature neurons, but with some neurons representing additional features on a different scale.

We also note that many neurons appear to be associated with a single "primary" feature â encoded by a relatively large weight â coupled with one or more "secondary" features encoded with smaller-magnitude weights to that neuron. If we were to observe the activations of such a neuron over a range of input examples, we would find that the largest activations of that neuron were all or nearly-all associated with the presence of the "primary" feature, but that the lower-magnitude activations were much more polysemantic.

Intriguingly, that description closely matches what researchers have found in previous work on language models 
[4]
 â many neurons appear interpretable when we examine their strongest activations over a dataset, but can be shown on further investigation to activate for other meanings or patterns, often at a lower magnitude. While only suggestive, the ability of our toy model to reproduce these qualitative features of larger neural networks offers an exciting hint that these models are illuminating general phenomena.ChatGPTSummary:The section titled "Superposition vs Sparsity" discusses the behavior of a toy model when learning to implement the absolute value function across multiple features. The model has n=100n=100n=100 features and m=40m=40m=40 neurons with a feature importance curve of Ii=0.8iI_i = 0.8iIiâ=0.8i, and the feature sparsity is varied. The findings are summarized as follows:Privileged Basis Creation:Activation functions under certain conditions create a privileged basis, leading features to align with basis dimensions. In a regime with dense features, each neuron represents a single feature, allowing for direct reading of feature values from neuron activations.Superposition Use in Sparse Features:With sufficient feature sparsity, the model uses superposition to represent more features than it has neurons. This demonstrates neural networks' capability to compute on data represented in superposition, with gradient descent finding solutions that approximate computation even when neurons encode multiple features.Polysemantic Neurons in Various Regimes:In some regimes, while many neurons encode pure features, a subset becomes highly polysemantic. This is somewhat analogous to a phase change observed in a previous model. Unlike in previous experiments where the phase change was feature-oriented, here, neurons representing vital features tend to be monosemantic."Primary" and "Secondary" Features:Many neurons associate with a "primary" feature (with a large weight) and one or more "secondary" features (with smaller weights). The primary feature triggers the largest activations in a neuron, while secondary features lead to lower-magnitude, more polysemantic activations.Resemblance to Real Neural Networks:The observed behavior in the toy model shows similarities with findings in real neural networks, particularly in vision models. The toy model reproduces qualitative features found in larger networks, providing hints that it may illuminate general phenomena in neural network behavior.Implications:Understanding Polysemantic Neurons:
The observations provide insight into how neurons in the model transition from being monosemantic to polysemantic, which might be reflective of behaviors in actual neural networks.Insight into Neural Network Behavior:
The toy model replicates qualitative features of real, large-scale neural networks, suggesting it could offer valuable insights into the general phenomena occurring in neural networks, especially regarding the behavior and interactions of features and neurons in different sparsity regimes.Future Directions:More detailed exploration and analysis of the relationship between superposition and sparsity in neural networks.Investigating how the findings from the toy model can be extrapolated or applied to understand the behavior of larger, more complex neural networks in various applications, including vision and language processing models.The Asymmetric Superposition Motif
If neural networks can perform computation in superposition, a natural question is to ask how exactly they're doing so. What does that look like mechanically, in terms of the weights? In this subsection, we'll (mostly) work through one such model and see an interesting motif of asymmetric superposition. (We use the term "motif" in the sense of the original circuit thread, inspired by its use in systems biology 
[38]
.)

The model we're trying to understand is shown below on the left, visualized as a neuron weight stack plot, with features corresponding to colors. The model is only doing a limited amount of superposition, and many of the weights can be understood as simply implementing absolute value in the expected way.

However, there are a few neurons doing something elseâ¦


These other neurons implement two instances of asymmetric superposition and inhibition. Each instance consists of two neurons:


One neuron does asymmetric superposition. In normal superposition, one might store features with equal weights (eg. 
ï¿½
=
[
1
,
â
1
]
W=[1,â1]) and then have equal output weights (
ï¿½
=
[
1
,
1
]
W=[1,1]). In asymmetric superposition, one stores the features with different magnitudes (eg. 
ï¿½
=
[
2
,
â
1
2
]
W=[2,â 
2
1
â
 ]) and then has reciprocal output weights (eg. 
ï¿½
=
[
1
2
,
2
]
W=[ 
2
1
â
 ,2]). This causes one feature to heavily interfere with the other, but avoid the other interfering with the first!

To avoid the consequences of that interference, the model has another neuron heavily inhibit the feature in the case where there would have been positive interference. This essentially converts positive interference (which could greatly increase the loss) into negative interference (which has limited consequences due to the output ReLU).


There are a few other weights this doesn't explain. (We believe they're effectively small conditional biases.) But this asymmetric superposition and inhibition pattern appears to be the primary story.ChatGPTSummary:The section titled "The Asymmetric Superposition Motif" explores how neural networks perform computation in superposition through a study of a specific model. The model, depicted through a neuron weight stack plot, performs limited superposition with several neurons implementing the absolute value function in a straightforward manner. The focus of this analysis is on neurons engaging in a distinct activity called asymmetric superposition and inhibition.Key Points:Asymmetric Superposition Mechanism:In conventional superposition, features might be stored with equal weights (e.g., W=[1,â1]W=[1,-1]W=[1,â1]), leading to equal output weights (e.g., W=[1,1]W=[1,1]W=[1,1]). Asymmetric superposition differentiates this process by storing features with different magnitudes (e.g., W=[2,â12]W=[2, -\frac{1}{2}]W=[2,â21â]) and using reciprocal output weights (e.g., W=[12,2]W=[\frac{1}{2},2]W=[21â,2]). This imbalance results in significant interference for one feature while minimizing interference for the other.Inhibition to Counter Interference:To mitigate the interference caused by asymmetric superposition, another neuron heavily inhibits the positively interfered feature. This process essentially transforms positive interference (which could dramatically increase the loss) into negative interference. The latter has limited consequences due to the activation function in the output layer (in this case, ReLU).Presence of Unexplained Weights:The model contains some weights that the asymmetric superposition and inhibition explanation does not fully account for. These weights are believed to function as small conditional biases, although this notion requires further validation.Implications:Understanding Computation in Superposition:
The asymmetric superposition motif provides insights into the mechanisms neural networks might employ to compute in superposition. Understanding these motifs is crucial for deciphering how networks manage and minimize interference between features during computation.Novel Mechanism for Feature Interaction:
The introduction and explanation of asymmetric superposition and inhibition offer a new perspective on how features interact within neural networks, shedding light on the nuanced ways networks handle feature representation and interference.Future Directions:Detailed Analysis of Unexplained Weights:
Future research should explore and explain the function of the weights not covered by the asymmetric superposition and inhibition explanation. Understanding these weights might provide additional insights into the computation in superposition.Generalization to Other Models:
Researchers should investigate whether the asymmetric superposition and inhibition motif is present in other neural network models, helping to determine the generalizability and prevalence of this mechanism across various architectures and tasks.

The Strategic Picture of Superposition
Although superposition is scientifically interesting, much of our interest comes from a pragmatic motivation: we believe that superposition is deeply connected to the challenge of using interpretability to make claims about the safety of AI systems. In particular, it is a clear challenge to the most promising path we see to be able to say that neural networks won't perform certain harmful behaviors or to catch "unknown unknowns" safety problems. This is because superposition is deeply linked to the ability to identify and enumerate over all features in a model, and the ability to enumerate over all features would be a powerful primitive for making claims about model behavior.

We begin this section by describing how "solving superposition" in a certain sense is equivalent to many strong interpretability properties which might be useful for safety. Next, we'll describe three high level strategies one might take to "solving superposition." Finally, we'll describe a few other additional strategic considerations.

Safety, Interpretability, & "Solving Superposition"
We'd like a way to have confidence that models will never do certain behaviors such as "deliberately deceive" or "manipulate." Today, it's unclear how one might show this, but we believe a promising tool would be the ability to identify and enumerate over all features. The ability to have a universal quantifier over the fundamental units of neural network computation is a significant step towards saying that certain types of circuits don't exist. 18 It also seems like a powerful tool for addressing "unknown unknowns", since it's a way that one can fully cover network behavior, in a sense.

How does this relate to superposition? It turns out that the ability to enumerate over features is deeply intertwined with superposition. One way to see this is to imagine a neural network with a privileged basis and without superposition (like the monosemantic neurons found in early InceptionV1, e.g. 
[3]
): features would simply correspond to neurons, and you could enumerate over features by enumerating over neurons. 19 The connection also goes the other way: if one has the ability to enumerate over features, one can perform compressed sensing using the feature directions to (with high probability) "unfold" a superposition models activations into those of a larger, non-superposition model.

For this reason, we'll call any method that gives us the ability to enumerate over features â and equivalently, unfold activations â a "solution to superposition". Any solution is on the table, from creating models that just don't have superposition, to identifying what directions correspond to features after the fact. We'll discuss the space of possibilities shortly.

We've motivated "solving superposition" in terms of feature enumeration, but it's worth noting that it's equivalent to (or necessary for) many other interpretability properties one might care about:

Decomposing Activation Space. The most fundamental challenge of any interpretability agenda is to defeat the curse of dimensionality. For mechanistic interpretability, this ultimately reduces to whether we can decompose activation space into independently understandable components, analogous to how computer program memory can be decomposed into variables. Identifying features is what allows us to decompose the model in terms of them.
Describing Activations in Terms of Pure Features. One of the most obvious casualties of superposition is that we can't describe activations in terms of pure features. When features are relatively basis aligned, we can take an activation â say the activations for a dog head in a vision model â and decompose them into individual underlying features, like a floppy ear, short golden fur, and a snout. (See the "semantic dictionary" interface in Building Blocks 
[39]
.) Solving superposition would allow us to do this for every model.
Understanding Weights (ie. Circuit Analysis). Neural network weights can typically only be understood when they're connecting together understandable features. All the circuit analysis seen in the original circuit thread (see especially 
[40]
), was fundamentally only possible because the weights connected non-polysemantic neurons. We need to solve superposition for this to work in general.
Even very basic approaches become perilous with superposition. It isn't just sophisticated approaches to interpretability which are harmed by superposition. Even very basic methods one might consider become unreliable. For example, if one is concerned about language models exhibiting manipulative behavior, one might ask if an input has a significant cosine similarity to the representations of other examples of deceptive behavior. Unfortunately, superposition means that cosine similarity has the potential to be misleading, since unrelated features start to be embedded with positive dot products to each other. However, if we solve superposition, this won't be an issue â either we'll have a model where features align with neurons, or a way to use compressed sensing to lift features to a space where they no longer have positive dot products.ChatGPTSummary:The section titled "The Strategic Picture of Superposition" emphasizes the importance of understanding and resolving superposition in neural networks, primarily for ensuring the safety and interpretability of AI systems. Superposition is recognized as a significant challenge as it is closely related to the ability to identify and enumerate all features in a model, which is crucial for predicting and controlling model behavior.Key Points:Safety, Interpretability, and Superposition:Ensuring AI models do not engage in harmful behaviors, like deception or manipulation, requires a deep understanding and enumeration of all features in a model. This capability is seen as a potential tool for addressing unknown safety challenges in AI.Connection between Superposition and Feature Enumeration:The ability to enumerate over features is intrinsically linked with superposition. For instance, in a network without superposition, features would correspond to neurons, allowing for straightforward enumeration over neurons to understand features. Superposition complicates this process.Solving Superposition:Solving superposition refers to the ability to enumerate over all features, unfolding activations in the process. This solution can involve creating models without superposition or identifying feature directions in existing models.Interpretability Challenges Posed by Superposition:Superposition complicates various interpretability tasks, including:Decomposing activation space into understandable components.Describing activations in terms of pure features.Analyzing and understanding neural network weights or circuits.Superposition also makes even basic interpretability approaches unreliable, such as using cosine similarity to identify deceptive behavior, as it causes unrelated features to have positive dot products with each other.Strategic Considerations:Solving superposition is equivalent or necessary for many interpretability properties that are crucial for ensuring the safety of AI systems.A solved superposition would either result in models where features align with neurons or allow for using compressed sensing to lift features to a space without positive dot products, enhancing interpretability and safety measures.Implications:Understanding superposition is not only scientifically intriguing but also pragmatically crucial for ensuring the safe operation of AI models.The ability to enumerate and understand all features in a model is a significant step towards ensuring that certain unsafe circuits or behaviors do not exist in AI systems.Solving superposition is fundamental to various interpretability tasks and properties, making it a priority in the development and analysis of safe and reliable AI systems.In more plain EnglishChatGPTSummary:The section titled "The Strategic Picture of Superposition" talks about the importance of understanding superposition in neural networks for the safety and better understanding of AI systems. Superposition, in this context, refers to the complex way features within a neural network interact and overlap, making it challenging to predict and control how AI behaves.Key Points:Safety and Understanding of AI:To ensure AI doesnât act harmfully, like lying or manipulating, itâs crucial to identify and understand all the features within an AI model. This is seen as a vital tool for preventing unknown safety risks with AI.Connection between Superposition and Understanding Features:Understanding all features in AI is closely tied to the concept of superposition. In simple terms, in a network without superposition, features would directly relate to specific neurons, making it easy to understand and list all features. However, superposition makes this process complicated.Solving Superposition:Solving superposition means being able to list and understand all features and how they interact within the AI. This could involve creating models that don't have superposition or finding ways to understand features in existing models with superposition.Challenges Caused by Superposition:Superposition makes it hard to:Break down and understand the AIâs thought process.Describe and understand the AI's thinking in simple terms.Understand and analyze the importance and role of different parts within the AI.Superposition also makes even basic approaches to understanding AI unreliable.Strategic Considerations:Understanding and resolving superposition is crucial for ensuring AI operates safely and as intended.Implications:Understanding superposition is essential for both the science and the safe application of AI.Being able to list and understand all features within AI is crucial for ensuring it doesnât engage in unsafe or unintended behaviors.Understanding and resolving superposition is fundamental to the development of AI that is both safe and reliable.Three Ways Out
At a very high level, there seem to be three potential approaches to resolving superposition:

Create models without superposition.
Find an overcomplete basis that describes how features are represented in models with superposition.
Hybrid approaches in which one changes models, not resolving superposition, but making it easier for a second stage of analysis to find an overcomplete basis that describes it.
Our sense is that all of these approaches are possible if one doesn't care about having a competitive model. For example, we believe it's possible to accomplish any of these for the toy models described in this paper. However, as one starts to consider serious neural networks, let alone modern large language models, all of these approaches begin to look very difficult. We'll outline the challenges we see for each approach in the following sections.

With that said, it's worth highlighting one bright spot before we focus on the challenges. You might have believed that superposition was something you could never fully get rid of, but that doesn't seem to be the case. All our results seem to suggest that superposition and polysemanticity are phases with sharp transitions. That is, there may exist a regime for every model where it has no superposition or polysemanticity. The question is largely whether the cost of getting rid of or otherwise resolving superposition is too high.ChatGPTSummary:The section titled "Three Ways Out" outlines three potential strategies to deal with the issue of superposition in neural networks:Strategies:Create Models Without Superposition:Develop new AI models that inherently lack superposition, meaning the interaction and overlap of features are simplified or non-existent, making the models easier to understand and predict.Find Overcomplete Basis for Models With Superposition:For existing models that have superposition, identify a comprehensive framework or basis that describes and explains how features within these models interact and overlap. This would make it easier to understand the complex behaviors in these AI models.Hybrid Approaches:Implement changes to existing models to simplify superposition without entirely eliminating it. This adjustment would make it easier to analyze and understand the features within the AI, using a second stage of analysis that could find a basis that describes the reduced superposition.Challenges:While these strategies are theoretically possible, implementing them, especially on sophisticated and large-scale AI models, is highly challenging.Each strategy comes with its own set of challenges, and there is uncertainty regarding the feasibility and effectiveness of these approaches for large and complex AI models like those used today.Bright Spot:The text suggests that it is possible to eliminate or mitigate superposition. Superposition and polysemanticity (the phenomenon where one element in the model represents multiple features) appear to be phases that can change, implying that there might be conditions under which a model doesn't exhibit these characteristics.The central question and challenge are whether resolving or reducing superposition comes at too high a cost in terms of the performance and effectiveness of the AI model.I thought of an example of observer dependence. I have 50 gpt-4 queries every 3 hours before it is switched to gpt 3.5. I tried asking you how many tokens we used or how many queries, so it would be a waste of a query as I wouldn't get a correct answer and it would use up a query. If I get gpt-4 responding, then I hadn't used them up yet, but it might have been my last token. The window is sliding, so I could scroll up and count them, and by the time I had done so I would have more time anyways.ChatGPTIt seems you're describing a situation where you're limited in the number of queries and tokens you can use within a given time frame, and you're trying to manage these resources efficiently. Your example highlights the importance of judiciously planning and managing your queries, especially when operating under constraints. If you have a limited number of queries or tokens, you'd indeed want to avoid wasting them on questions that won't yield valuable information. Observer dependence in this context might refer to the fact that your available resources and strategy would depend on your observations of the current situation (like the number of tokens or queries used, and the version of the AI you're interacting with).I mean that the a measurement changes the state of the system, when ever I ask you, I use up another token so the system that I was wondering about had one more prompt available then whatever the answer is now. Also unless I check the clock or keep a tally sheet and so there is some uncertainty, as well as the fact that my reading and prompting speeds vary. ChatGPTAbsolutely, you're highlighting a kind of observer effect, where the act of measuring or interacting with a system inherently changes the state of that system. In your case, every query submitted changes the state of your resource pool (e.g., the number of available tokens or queries), and there's a dynamic aspect due to the sliding window of time. You also point out the uncertainties involved in this process, including the time it takes to compose and submit queries, the time to read and understand responses, and the lack of real-time visibility into your remaining resources without actively checking. These factors all contribute to the complexity of managing your interactions with the system efficiently.I also can pay by the token using the API I still would have to use it more to pay more than twenty dollars a month.ChatGPTCertainly. Using APIs usually involves cost structures based on the amount of resources you consume, like the number of tokens in your case. You would need to generate enough requests, consuming enough tokens, to meet or exceed a certain cost threshold. Being aware of how many tokens each request consumes and managing your usage efficiently can help you control costs while still getting the value you need from the service. Always be sure to understand the pricing model of the API or service you are using to avoid unexpected charges. If you have a specific budget in mind, like twenty dollars a month, youâll need to plan your usage accordingly.I just mean it is the cost of ChatGPT pro, so I can weigh the cost of different alternatives. Poe.com also gives access to chatgpt and other bots like Claude and others. The point is every where you go you will run into similar limits that are constraints based on cost, computation time, complexity of the query, because even ideal computation would be wasting energy do to the cost of erasing each bit, as the check is free, but there would be some heat lost to friction. There is no such thing as a free lunchChatGPTAbsolutely, you've rightly pointed out the principle of "there's no such thing as a free lunch" (TANSTAAFL). Every service, product, or system comes with inherent constraints and costs, whether they be in monetary terms, computational resources, energy, or time. This principle is crucial when considering different services, as each will have its own set of trade-offs. When choosing between different services or products, it's important to carefully consider these constraints and costs, understanding that optimizing one aspect may result in compromises in others. For instance, in the context of computational services, you might have to balance between speed, accuracy, and the cost of computation, always keeping in mind your specific needs and budget constraints. The same applies to APIs and subscription services, where you might have to weigh the cost against the features offered, limitations imposed, and the value you derive from the service.The focus of this analysis is on neurons engaging in a distinct activity called asymmetric superposition and inhibition.ChatGPTCorrect! The text you've shared earlier seems to focus on understanding the mechanisms through which neural networks engage in computation, particularly when features are stored and computed in a superpositioned manner (meaning, features are not represented independently). Asymmetric superposition and inhibition appear to be specific mechanisms or strategies through which neurons in a network manage to encode and process information.In asymmetric superposition, neurons store features with different magnitudes of weights, and the output weights reciprocate this imbalance, allowing one feature to have a stronger influence without being significantly affected by the others. To mitigate the potential consequences of this imbalance, other neurons in the network act to inhibit features where there would be positive interference, turning it into negative interference instead. This process allows for efficient encoding and computation in the network, even when the data is represented in superposition.Understanding these mechanisms is not only scientifically interesting but is also of practical importance. Solving the challenges posed by superposition is crucial for enhancing the interpretability and safety of neural networks, which is vital for their responsible and effective deployment in various applications. The text suggests that strategies for resolving superposition could involve creating models without superposition, finding an overcomplete basis for representing features in superposition, or adopting hybrid approaches. Each of these strategies comes with its own set of challenges and considerations.Do you remember the earlier article on evolving prompts?ChatGPTI donât have the ability to recall previous conversations or the content provided in them, as I donât have memory or recall capacities for past interactions with users. Each session is stateless and doesnât store any personal data from the questions youâve asked previously. If you have specific information or questions from the article on evolving prompts, you can share the details or text here, and I'll do my best to assist you with your questions and provide clarification or explanation on the topic!It was way earlier:

The article introduces **Promptbreeder**, a system designed for evolving prompts to improve the performance of Large Language Models (LLMs) in various domains automatically. The system is general-purpose, capable of adapting to numerous domains, and primarily focuses on enhancing task-prompts which condition LLMs to provide better responses.

### Main Points:

1. **Evolution of Task-Prompts:**
   - Promptbreeder utilizes evolutionary algorithms to generate task-prompts. 
   - Mutation-prompts guide the generation process, with the mutation operator being an LLM.
   - The evolved task-prompts are evaluated based on their effectiveness using batches of Q&A pairs from the training set.

2. **Initialization and Mutation Operators:**
   - The system is initialized with domain-specific problem descriptions.
   - Multiple mutation operators, encompassing Direct Mutation, Estimation of Distribution Mutation, Lamarckian Mutation, and Hypermutation, are employed. These operators facilitate the exploration and generation of diverse and effective task-prompts.

3. **Hypermutation â Mutation of Mutation-Prompts:**
   - Hypermutation operators enhance the system's self-improvement capabilities. 
   - Zero-order Hyper-Mutation generates new mutation-prompts, while First-order Hyper-Mutation summarizes and improves existing ones.

4. **Lamarckian Mutation:**
   - Working Out to Task-Prompt operator is Lamarckian, reverse-engineering the task-prompt from given correct workings out. This process is crucial when problem descriptions are inadequate or misleading.

5. **Prompt Crossover and Context Shuffling:**
   - Occasionally, task-prompts might be replaced with prompts from other members in the population (Prompt Crossover).
   - The system can evolve task-prompts, mutation-prompts, and the few-shot context simultaneously (Context Shuffling).

6. **Self-Referential Self-Improvement:**
   - The article emphasizes the development of open-ended systems capable of self-improvement and refinement in their self-improvement processes, drawing inspiration from previous works in AI research and neural networks.

7. **Prompts' Sensitivity and Importance:**
   - The effectiveness of Promptbreeder is highlighted through its superior performance over other systems, emphasizing the sensitivity of LLMs to prompts and the significance of automatically discovering efficient prompts.

### Significance:
- **Enhanced Performance:** Promptbreeder demonstrates the importance of carefully designed prompts in improving LLMsâ performance and capabilities.
  
- **Diverse Applications:** The system is general-purpose, meaning it can adapt to a wide range of domains, showcasing its versatility and broad applicability.

- **Self-Improvement:** With mechanisms for self-improvement and refining its self-improvement processes, Promptbreeder represents a step forward in developing advanced, autonomous AI systems.

### Conclusion:
Promptbreeder is a novel, versatile system designed to evolve and improve prompts for LLMs automatically, showcasing improved performance and capabilities in various domains. Its introduction marks a significant advancement in the field of AI, with potential for wide-ranging applications and contributions to the development of self-improving systems.ChatGPTThank you for providing the information! It sounds like Promptbreeder is a system designed to optimize the performance of large language models (LLMs) by evolving and improving task-prompts through the use of evolutionary algorithms and various mutation operators. The system is also capable of self-improvement and can be applied to different domains due to its general-purpose design. If you have specific questions or need clarification on any aspect of the article, feel free to ask!I was wondering how it might relate to the article on superposition.ChatGPTThe articles on Promptbreeder and superposition in neural networks address different aspects of improving and understanding AI systems, but they can be related in the broader context of advancing AI technology and understanding its behavior.Understanding and Improving AI Behavior:The superposition article helps to understand the complex behavior and representations within neural networks, aiming to improve their interpretability and reliability.Promptbreeder focuses on improving AI behavior by optimizing prompts, which might also indirectly lead to a better understanding of how language models respond to different inputs.Enhancing Performance:While the superposition article provides insights into the internal workings of neural networks, helping to potentially improve their robustness and performance, Promptbreeder directly works on enhancing the performance of AI systems through prompt evolution.General AI Improvement:Both articles contribute to the general field of AI improvement and optimization, albeit from different angles. The superposition piece contributes to the theoretical and foundational understanding of neural networks, while Promptbreeder offers a practical tool for improving AI performance.Relating to Real-world Applications:Understanding superposition in neural networks might have implications for real-world AI applications, providing insight into how models can be made more interpretable and reliable. On the other hand, Promptbreeder can be directly applied to improve AI performance in various domains.Safety and Reliability:The superposition article raises points about safety and reliability of AI systems by understanding and potentially solving superposition. In a way, Promptbreeder also contributes to AI reliability by generating prompts that lead to better and more reliable responses from AI systems.In a holistic AI development perspective, foundational understanding (like that provided by the superposition article) and practical optimization tools (like Promptbreeder) can complement each other to create AI systems that are not only high-performing but also reliable, understandable, and safe for various applications.I was thinking that a genetic algoithm explores the possibility space of algorithm, in that case the set of solutions at any point in time (state) would be a superposition of those systems.ChatGPTIndeed, the concept of superposition can be analogically applied to genetic algorithms in the sense that the population at any given generation represents a superposition of potential solutions. In this context, "superposition" refers to the simultaneous existence of multiple possibilities within the search space.Diversity of Solutions:In a genetic algorithm, the population consists of diverse individuals, each representing a different potential solution to the problem. Similarly, in a quantum superposition, multiple states exist simultaneously.Evolution and Collapse:As the genetic algorithm evolves through generations, it undergoes a form of 'collapse' similar to quantum measurement: the population converges towards optimal or near-optimal solutions, and the diversity may decrease as less fit individuals are eliminated.Exploration and Exploitation:The genetic algorithm balances exploration (introducing new solutions) and exploitation (refining existing solutions), somewhat analogously to how quantum systems explore multiple states until observed or measured.Parallel Possibilities:Each individual in the genetic algorithm's population represents a parallel possibility, and the algorithm searches through this 'superposition' of solutions to find the best one, somewhat akin to quantum parallelism.However, it's crucial to note that this is a metaphorical or analogical use of the term "superposition." In quantum mechanics, superposition refers to a fundamental principle where particles exist in multiple states at once, which is a physical phenomenon, while in genetic algorithms, the term is used more abstractly to describe the exploration of the solution space. The convergence or 'collapse' to an optimal solution in genetic algorithms is a deterministic process guided by designed mechanisms (like selection, crossover, and mutation), unlike the probabilistic collapse of quantum superpositions upon measurement.

ICGG 2018 - Proceedings of the 18th International Conference on Geometry and Graphics  

Conference paper

Graphics and Quantum MechanicsâThe Necker Cube as a Quantum-like Two-Level System

Giorgio Benedek & 

Giuseppe Caglioti 

Conference paper

First Online: 07 July 2018

277 Accesses

1 Citations

Part of the Advances in Intelligent Systems and Computing book series (AISC,volume 809)

Abstract

A simulation of the dynamic perception of the Necker cube in terms of a two-level quantum system, e.g. that of the hydrogen tunneling states of the ammonia molecules associated with the 24 GHz maser frequency, indicates that the neuro-physiological transformation leading, through a symmetry reduction, to perceptual reversal is controlled by the principles of quantum mechanics. An elementary neuro-physiological action similar to the Planck constant at a mesoscopic level is introduced.

Keywords

Two-level quantum and quantum-like systems

Ambiguous figures

Principle of superposition

Symmetry reduction

Tunneling

Chemical and graphic barriers

Perception

Mind

The unconscious



ICGG 2018 - Proceedings of the 18th International Conference on Geometry and Graphics  

Conference paper

Graphics and Quantum MechanicsâThe Necker Cube as a Quantum-like Two-Level System

Giorgio Benedek & 

Giuseppe Caglioti 

Conference paper

First Online: 07 July 2018

277 Accesses

1 Citations

Part of the Advances in Intelligent Systems and Computing book series (AISC,volume 809)

Abstract

A simulation of the dynamic perception of the Necker cube in terms of a two-level quantum system, e.g. that of the hydrogen tunneling states of the ammonia molecules associated with the 24 GHz maser frequency, indicates that the neuro-physiological transformation leading, through a symmetry reduction, to perceptual reversal is controlled by the principles of quantum mechanics. An elementary neuro-physiological action similar to the Planck constant at a mesoscopic level is introduced.

Keywords

Two-level quantum and quantum-like systems

Ambiguous figures

Principle of superposition

Symmetry reduction

Tunneling

Chemical and graphic barriers

Perception

Mind

The unconscious

ChatGPTThis conference paper abstract seems to suggest that there is a connection between the perception of ambiguous figures, like the Necker Cube, and quantum mechanics principles. The Necker Cube is a two-dimensional figure that can be perceived in three dimensions in two different orientations, and this phenomenon is known as perceptual reversal. The authors appear to simulate this process using a model based on a two-level quantum system.Hereâs a simplified summary of the abstract:The authors conducted a simulation that represents how people perceive the Necker Cube (a well-known optical illusion) using a model based on quantum mechanicsâspecifically, a two-level quantum system. They compare this quantum system to the hydrogen tunneling states of ammonia molecules associated with a certain frequency (24 GHz maser frequency). Their results suggest that the perceptual reversal experienced when observing the Necker Cubeâwhere the cube seems to flip between two orientationsâis influenced by quantum mechanics principles. To explore this idea, they introduce an elementary action at the neuro-physiological level that is analogous to the Planck constant but operates at a mesoscopic level.This simulation and its results hint at a deeper connection between quantum mechanics and neural processes related to perception and cognition. However, to fully appreciate and critique the authorsâ work, you would need to access and review the full paper. The abstract alone does not provide sufficient detail to understand the methodologies used, the limitations of the study, or the implications of the findings.A simulation of the dynamic perception of the Necker cube in terms of a two-level quantum system, e.g. that of the hydrogen tunneling states of the ammonia molecules associated with the 24 GHz maser frequency, indicates that the neuro-ph ysiological transformation leading. through a symmetry reduction, to perceptual reversal is controlled by the principles of quantum mechanics. 

The black holes entropic information formula 
solves the problem of the black hole information 
paradox by explaining the information processes 
involved in entropy for black holes down to the 
quantum level independently of the area 
horizonâs law by providing a sufficient 
microscopic description of how this entropy 
arises. The black holes entropic information 
formula shows that the process of black holes 
evaporation is consistent with the unitarity 
principle. Indeed, the black holes entropic 
information formula calculate the Hawking 
radiation encoding the entangled quantum 
information of the initial considered black hole. 
We have showed in [3]; that in the framework of 
black hole, the entropic Information formula 
taking in account the mass of bit of information at 
the Hawking temperature is equal to the 
universal bound originally found by Jacob 
Bekenstein: because black 
hole saturates exactly the bound. The fact is that 
the black-hole entropy is also the maximal 
entropy that can be obtained by the Bekenstein 
bound, wherein, the Bekenstein bound becomes 
an equality. Moreover, the equality between 
black holes entropic information formula and the 
Von Neumann entropy, made possible by an 
ingenious proposal of Casini [22-30] to equal the 
difference between the expectation value of the 
modular Hamiltonian in the excited state and the 
vacuum state, KV = tr (K Ï ) â tr (K Ï ) to 2 Ï R 
E [22], as the black holes entropic information 
formula is also equal to the universal bound. This 
leads to formulation of gravitational fine-grained 
entropy in regard to the entropic information 
theory. Until now, it was not possible to express 
the gravitational fine-grain entropy of a black hole 
using the rules of gravity [46]. However, the black 
holes entropic information formula can calculate 
the entropy of the black hole independently of the 
area horizonâs law and avoiding the ultraviolet 
divergences. Indeed, the ultraviolet divergences 
can be avoided by taking differences between 
quantities computed in an excited state and the 
same quantities computed in the vacuum state. 
The black holes entropic information formula 
expresses the gravitational fine grained black 
hole entropy by a semiclassical gravity approach. 
The black holes entropic information formula as 
new formulation of BekensteinâHawking entropy 
additionally including the information notion and 
the time of evaporation of the considered black 
hole permits to express the black hole entropy 
down to the quantum level independently of the 
area horizonâs law permitting to the entropy of 
Hawking radiation to be entangled with the initial 
considered black hole seen as a whole quantum 
system. The black holes entropy which turns out 
to be a special case of the RyuâTakayanagi 
conjectureâ [16]. RyuâTakayanagi formula being 
Denis; PSIJ, 26(4): 1-16, 2022; Article no.PSIJ.90251 
14 
a general formula for the fine-grained entropy of 
quantum systems coupled to gravity [17]. That 
put the accent on the emergence quantum 
gravity process through the fundamentality of the 
entangled quantum information. All those 
informational processes lead to news 
perspectives in the approach of theoretical 
physics where we can see entangled quantum 
information as the building block of the universe, 
responsible of the emergent gravity, and being a 
keystone in the quantum entanglement 
processes, where entanglement doesnât create 
entropy, but it is entropy, in the sense of 
information. Moreover, we can see the 
implication of the concept of information in the 
measurement problem indeed the collapse of the 
wave function is due to the fact that when a 
measure is taken, this is taking information outâ¦. 
measurer absorbs information about system so 
modify the system, the wave function is 
collapsing because information is absorbed. We 
can envisage information as existing by itself as 
information is code, and code is what is create 
the process but is itself the process. We can 
even envisage some more deep implications as: 
âNo bits, no structure, no existenceâ. âIf 
consciousness exists before information, 
consciousness has nothing to know, indeed no 
consciousness without informationâ. ChatGPTThis text appears to discuss various complex and advanced concepts related to quantum information, black hole entropy, and consciousness, but it's quite dense and technical. To make it more understandable, let's break it down into some key points:Black Hole Entropy:The text discusses a formula for calculating the entropy of black holes, resolving the black hole information paradox. This formula provides a microscopic explanation for the entropy of black holes independent of the area of the event horizon, aligning with the unitarity principle.The entropy calculated through this formula corresponds with the universal bound found by Jacob Bekenstein.Entropic Information Formula:The entropic information formula allows calculation of the entropy of black holes without relying on the area horizonâs law. It can also avoid issues with ultraviolet divergences by considering differences between excited and vacuum states.This formula provides a new way to express BekensteinâHawking entropy, considering both the information aspect and the evaporation time of black holes. It allows entropy calculations down to the quantum level, showing that the entropy of Hawking radiation is entangled with the initial black hole.Connection to Quantum Information and Consciousness:Quantum information is proposed as a fundamental building block of the universe, crucial for the emergence of gravity and integral to the process of quantum entanglement.The text suggests a deep connection between information and existence, and between consciousness and information. It implies that information, represented as code, is both the creator and the product of processes in the universe.It hints at philosophical implications regarding consciousness and information, suggesting that consciousness requires information to exist and to have something to "know".Simplified Explanation:The text presents a way to calculate black hole entropy, providing insights into the black hole information paradox. The introduced entropic information formula allows for detailed entropy calculations, showing a connection between the entropy of Hawking radiation and the initial black hole. Furthermore, the text explores the fundamental role of quantum information in the universe, suggesting it's vital for gravity and entanglement processes. It also touches on the relationship between consciousness and information, hinting at deeper philosophical implications.Note:For a full understanding and evaluation of these claims, it's crucial to review the original sources and scientific literature, as these topics are highly complex and theoretical.I am just looking for connections to the previous topics.ChatGPTCertainly! Let's draw some connections between the concepts of superposition in neurons, the Promptbreeder system, and the quantum mechanics topics, particularly focusing on information and superposition.Superposition in Neurons and Quantum Mechanics:In the neuron superposition topic, the discussion revolves around neurons transitioning from monosemantic (representing a single feature) to polysemantic (representing multiple features) as sparsity increases. This transition and the structure of polysemantic neurons resemble a form of superposition.Quantum mechanics, particularly the aspect you provided about the Necker Cube and two-level quantum systems, uses the principle of superposition as well, where particles can exist in multiple states at once until observed.Connection to Information:The neuron superposition topic touches on how neurons encode information. The transition from monosemantic to polysemantic neurons represents a change in how information is encoded and retrieved, which is crucial for AI interpretability and safety.In quantum mechanics, information is fundamental. The black holes entropic information formula you provided talks about encoding quantum information, considering information crucial for processes like entropy and entanglement. The text also discusses consciousness and information, suggesting a deep, inherent connection between them.Promptbreeder and Information Encoding:Promptbreeder evolves prompts to improve the performance of Language Models (LMs). Each evolved prompt represents a different way to condition the LM, effectively encoding information that influences the modelâs output.The process of evolving prompts could be seen as exploring a space of possible information encodings, analogous to how neurons might transition between different encoding schemes (monosemantic to polysemantic) or how quantum states represent information.Overarching Theme - Information Encoding and Retrieval:All topics ultimately deal with how information is represented, encoded, and retrieved.Whether itâs neurons transitioning between monosemantic and polysemantic states, quantum particles in superposition, or evolving prompts in Promptbreeder, each system has unique methods for handling information.Understanding these processes is crucial for interpreting and predicting the behavior of these systems, whether theyâre biological neurons, quantum systems, or artificial intelligence models.These connections are quite high-level and theoretical, and each topic is deep and complex in its own right. Understanding the specifics of each would require specialized knowledge in neuroscience, quantum mechanics, and artificial intelligence respectively.
Discussion
To What Extent Does Superposition Exist in Real Models?
Why are we interested in toy models? We believe they are useful proxies for studying the superposition we suspect might exist in real neural networks. But how can we know if they're actually a useful toy model? Our best validation is whether their predictions are consistent with empirical observations regarding polysemanticity. To the best of our knowledge they are. In particular:

Polysemantic neurons exist. Polysemantic neurons form in our third model, just as they are observed in a wide range of neural networks.
Neurons are sometimes "cleanly interpretable" and sometimes "polysemantic", often in the same layer. Our third model exhibits both polyemantic and non-polysemantic neurons, often at the same time. This is analogous to how real neural networks often have a mixture of polysemantic and non-polysemantic neurons in the same layer.
InceptionV1 has more polysemantic neurons in later layers. Empirically, the fraction of neurons which are polysemantic in InceptionV1 increases with depth. One natural explanation is that as features become higher-level the stimuli they detect become rarer and thus sparser (for example, in vision, a high-level floppy ear feature is less common than a low-level Gabor filter's edge). A major prediction of our model is that superposition and polysemanticity increase as sparsity increases.
Early Transformer MLP neurons are extremely polysemantic. Our experience is that neurons in the first MLP layer in Transformer language models are often extremely polysemantic. If the goal of the first MLP layer is to distinguish between different interpretations of the same token (eg. "die" in English vs German vs Dutch vs Afrikans), such features would be very sparse and our toy model would predict lots of polysemanticity.
This doesn't mean that everything about our toy model reflects real neural networks. Our intuition is that some of the phenomena we observe (superposition, monosemantic vs polysemantic neurons, perhaps the relationship to adversarial examples) are likely to generalize, while other phenomena (especially the geometry and learning dynamics results) are much more uncertain.The previous model used in this conversation is unavailable. We've switched you to the latest default model.ChatGPTThe discussion here highlights the validity of using toy models to study superposition in neural networks and how these models align with empirical observations. Let's break down some key points:Polysemantic Neurons Exist: The existence of polysemantic neurons in the toy model mirrors observations in real neural networks. This means that in both cases, there are neurons that represent multiple features or concepts.Coexistence of Interpretability: The toy model demonstrates that within the same layer, there can be neurons that are "cleanly interpretable" (representing a single feature) and neurons that are polysemantic. This is consistent with real neural networks where different neurons may have varying levels of interpretability.Polysemanticity Increases with Sparsity: The model predicts that polysemanticity and superposition increase as sparsity in features increases. This aligns with the idea that in real neural networks, as features become more high-level and represent rarer concepts, the neurons may become more polysemantic.Observations in Real Models: Empirical observations from real neural networks, such as InceptionV1 and early layers of Transformer models, support some of the model's predictions. For example, InceptionV1 exhibits more polysemantic neurons in later layers, and early layers in Transformer models are often highly polysemantic, particularly when distinguishing between different interpretations of the same token.Generalization and Uncertainty: While the toy model provides insights into certain phenomena like superposition and polysemanticity, it's acknowledged that not all aspects of the model necessarily reflect real neural networks. Some aspects may generalize, while others, especially those related to geometry and learning dynamics, are less certain.In summary, the toy model serves as a useful proxy for understanding the presence of superposition in real neural networks and provides insights that align with empirical observations. However, it's also recognized that there are limitations and uncertainties in applying these findings to real-world scenarios.Open Questions
This paper has shown that the superposition hypothesis is true in certain toy models. But if anything, we're left with many more questions about it than we had at the start. In this final section, we review some of the questions which strike us as most important: what do we know, and would we like for future work to clarify?

Is there a statistical test for catching superposition?
How can we control whether superposition and polysemanticity occur? Put another way, can we change the phase diagram such that features don't fall into the superposition regime? Pragmatically, this seems like the most important question. L1 regularization of activations, adversarial training, and changing the activation function all seem promising.
Are there any models of superposition which have a closed-form solution? Saxe et al. 
[28]
 demonstrate that it's possible to create nice closed-form solutions for linear neural networks. We made some progress towards this for the 
ï¿½
=
2
;
ï¿½
=
1
n=2;m=1 ReLU output model (and Tom McGrath makes further progress in his comment), but it would be nice to solve this more generally.
How realistic are these toy models? To what extent do they capture the important properties of real models with respect to superposition? How can we tell?
Can we estimate the feature importance curve or feature sparsity curve of real models? If one takes our toy models seriously, the most important properties for understanding the problem are the feature importance and sparsity curves. Is there a way we can estimate them for real models? (Likely, this would involve training models of varying sizes or amounts of regularization, observing the loss and neuron sparsities, and trying to infer something.)
Should we expect superposition to go away if we just scale enough? What assumptions about the feature importance curve and sparsity would need to be true for that to be the case? Alternatively, should we expect superposition to remain a constant fraction of represented features, or even to increase as we scale?
Are we measuring the maximally principled things? For example, what is the most principled definition of superposition / polysemanticity?
How important are polysemantic neurons? If X% of the model is interpretable neurons and 1-X% are polysemantic, how much should we believe we understand from understanding the x% interpretable neurons? (See also the "feature packing principle" suggested above.)
How many features should we expect to be stored in superposition? This was briefly discussed in the previous section. It seems like results from compressed sensing should be able to give us useful upper-bounds, but it would be nice to have a clearer understanding â and perhaps tighter bounds!
Does the apparent phase change we observe in features/neurons have any connection to phase changes in compressed sensing?
How does superposition relate to non-robust features? An interesting paper by Gabriel Goh (archive.org backup) explores features in a linear model in terms of the principal components of the data. It focuses on a trade off between "usefulness" and "robustness" in the principal component features, but it seems like one could also relate it to the interpretability of features. How much would this perspective change if one believed the superposition hypothesis â could it be that the useful, non-robust features are an artifact of superposition?
To what extent can neural networks "do useful computation" on features in superposition? Is the absolute value problem representative of computation in superposition generally, or idiosyncratic? What class of computation is amenable to being performed in superposition? Does it require a sparse structure to the computation?
How does superposition change if features are not independent? Can superposition pack features more efficiently if they are anti-correlated?
Can models effectively use nonlinear representations? We suspect models will tend not to use them, but further experimentation could provide good evidence. See the appendix on nonlinear compression. For example investigating the representations used by autoencoders with multi-layer encoders and decoders with really small bottlenecks on random uncorrelated data.ChatGPTThese open questions at the end of the paper highlight areas where further research and investigation are needed regarding superposition in neural networks. Let's briefly summarize these questions:Statistical Test for Superposition: Is there a statistical test or method to detect the presence of superposition in neural networks?Control over Superposition: Can we control whether superposition and polysemanticity occur in neural networks? What techniques, like regularization, adversarial training, or activation function changes, can influence this?Closed-Form Solutions: Are there models of superposition that have closed-form solutions, similar to linear neural networks?Realism of Toy Models: How realistic are the toy models in capturing the properties of real neural networks with respect to superposition? Can we establish their validity?Estimation of Feature Importance: Can we estimate the feature importance curve and feature sparsity curve for real models, and how can we infer them?Scaling Effect: Will superposition disappear or remain constant as neural networks scale, and what assumptions about feature importance and sparsity would be needed for this?Principled Definitions: What is the most principled definition of superposition and polysemanticity?Importance of Polysemantic Neurons: How important are polysemantic neurons in neural networks, and what does their understanding contribute to overall model comprehension?Number of Features in Superposition: How many features should we expect to be stored in superposition, and can we establish tighter bounds?Connection to Compressed Sensing: Is there a connection between the phase changes observed in superposition and phase changes in compressed sensing?Relation to Non-Robust Features: How does superposition relate to non-robust features, and can the usefulness of features be explained by superposition?Computation in Superposition: To what extent can neural networks perform useful computation on features in superposition, and what class of computation is amenable to this?Effect of Feature Dependence: How does superposition change when features are not independent, especially if they are anti-correlated?Use of Nonlinear Representations: Can neural models effectively use nonlinear representations in the context of superposition, and how do they impact the encoding of features?These questions represent significant areas for future research and exploration in understanding the role of superposition in neural networks and its implications for various aspects of model behavior and interpretability.
Related Work
INTERPRETABLE FEATURES
Our work is inspired by research exploring the features that naturally occur in neural networks. Many models form at least some interpretable features. Word embeddings have semantic directions (see 
[11]
). There is evidence of interpretable neurons in RNNs (e.g. 
[14, 15]
), convolutional neural networks (see generally e.g. 
[16, 17, 46, 22]
; individual neuron families 
[9, 21]
), and in some limited cases, transformer language models (see detailed discussion in our previous paper). However this work has also found many "polysemantic" neurons which are not interpretable as a single concept 
[8]
.

SUPERPOSITION
The earliest reference to superposition in artificial neural networks that we're aware of is Arora et al.'s work 
[1]
, who suggest that the word embeddings of words with multiple different word senses may be superpositions of the vectors for the distinct meanings. Arora extend this idea there to there being many sparse "atoms of discourse" in superposition, an idea which was generalized to other kinds of embeddings vectors and explored in more detail by Goh 
[2]
.

In parallel with this, investigations of individual neurons in models with privileged bases were beginning to grapple with "polysemantic" neurons which respond to unrelated inputs 
[8]
. A natural hypothesis was that these polysemantic neurons are disambiguated by the combined activation of other neurons. This line of thinking eventually became the "superposition hypothesis" for circuits 
[3]
.

Separate from all of this, Cheung et al. 
[10]
 explore a slightly different idea one might describe as "model level" superposition: can neural network parameters represent multiple completely independent models? Their investigation is motivated by catastrophic forgetting, but seems quite related to the questions investigated in this paper. Model level superposition can be seen as feature level superposition for highly correlated sets of features, similar to the "almost orthogonal bases" experiment we considered above.ChatGPTThe "Related Work" section of the paper highlights previous research and concepts related to interpretable features and superposition in neural networks. Here's a brief summary:Interpretable Features:Many neural networks naturally form interpretable features. For example, word embeddings have semantic directions, and there's evidence of interpretable neurons in various types of networks, including RNNs, CNNs, and transformer language models. However, polysemantic neurons that respond to unrelated inputs have also been observed.Superposition:The concept of superposition in artificial neural networks has been explored in earlier works. Arora et al. suggested that word embeddings for words with multiple senses may be superpositions of vectors for distinct meanings.Investigations into individual neurons in models with privileged bases led to the idea of "polysemantic" neurons that respond to unrelated inputs, and this concept evolved into the "superposition hypothesis" for circuits.Cheung et al. explored the idea of "model level" superposition, where neural network parameters could represent multiple independent models, particularly in the context of addressing catastrophic forgetting.These related works provide context for understanding the development of the superposition hypothesis in neural networks and its connections to the interpretability of features.DISENTANGLEMENT
The goal of learning disentangled representations arises from Bengio et al.'s influential position paper on representation learning 
[7]
: "we would like our representations to disentangle the factors of variationâ¦  to learn representations that separate the various explanatory sources." Since then, a literature has developed motivated by this goal, tending to focus on creating generative models which separate out major factors of variation in their latent spaces. This research touches on questions related to superposition, but is also quite different in a number of ways.

Concretely, disentanglement research often explores whether one can train a VAE or GAN where basis dimensions correspond to the major features one might use to describe the problem (e.g. rotation, lighting, genderâ¦ as relevant). Early work often focused on semi-supervised approaches where the features were known in advance, but fully unsupervised approaches started to develop around 2016 
[47, 48, 49]
.

Put another way, the goal of disentanglement might be described as imposing a strong privileged basis on representations which are rotationally invariant by default. This helps get at ways in which the questions of polysemanticity and superposition are a bit different from disentanglement. Consider that when we deal with neurons, rather than embeddings, we have a privileged basis by default. It varies by model, but many neurons just cleanly respond to features. This means that polysemanticity arises as a kind of anomalous behavior, and superposition arises as a hypothesis for explaining it. The question then isn't how to impose a privileged basis, but how to remove superposition as a fundamental problem to accessing features.

Of course, if the superposition hypothesis is true, there are still a number of connections to disentanglement. On the one hand, it seems likely superposition occurs in the latent spaces of generative models, even though that isn't an area we've investigated. If so, it may be that superposition is a major reason why disentanglement is difficult. Superposition may allow generative models to be much more effective than they would otherwise be without. Put another way, disentanglement often assumes a small number of important latent variables to explain the data. There are clearly examples of such variables, like the orientation of objects â but what if a large number of sparse, rare, individually unimportant features are collectively very important? Superposition would be the natural way for models to represent this. 22 On the other hand, one could imagine ideas from the disentanglement literature being useful in creating architectures that resist superposition by creating an even more strongly privileged basis.ChatGPTThe "Disentanglement" section of the paper discusses the concept of learning disentangled representations in neural networks. Here's a summary:Disentanglement:The goal of learning disentangled representations is to separate the various factors of variation in data, as articulated in Bengio et al.'s influential paper on representation learning.Research on disentanglement focuses on creating generative models that can separate major factors of variation in their latent spaces.Early work in this area emphasized semi-supervised approaches where the factors of variation were known in advance, but fully unsupervised approaches have been developed.Disentanglement aims to impose a strong privileged basis on representations, aligning them with known factors such as rotation, lighting, or gender.Relationship to Superposition:Disentanglement research addresses questions related to superposition but is distinct in several ways.While superposition deals with the problem of features becoming mixed or overlapping in the neural network's representations, disentanglement focuses on explicitly separating factors of variation.Neural network neurons often have a privileged basis by default, with many neurons cleanly responding to features. In this context, polysemanticity and superposition are viewed as anomalies that need explanation.Superposition may still play a role in the latent spaces of generative models, making disentanglement more challenging, as it assumes a small number of important latent variables to explain the data.Ideas from the disentanglement literature could potentially be used to create architectures that resist superposition by establishing an even stronger privileged basis.In essence, disentanglement research aims to uncover and utilize underlying factors of variation, while superposition addresses the challenges arising from overlapping or mixed feature representations in neural networks.COMPRESSED SENSING
The toy problems we consider are quite similar to the problems considered in the field of compressed sensing, which is also known as compressive sensing and sparse recovery. However, there are some important differences:

Compressed sensing recovers vectors by solving an optimization problem using general techniques, while our toy model must use a neural network layer. Compressed sensing algorithms are, in principle, much more powerful than our toy model.
Compressed sensing works using the number of non-zero entries as the measure of sparsity, while we use the probability that each dimension is zero as the sparsity. These are not wholly unrelated: concentration of measure implies that our vectors have a bounded number of non-zero entries with high probability.
Compressed sensing requires that the embedding matrix (usually called the measurement matrix) have a certain âincoherentâ structure 
[50]
 such as the restricted isometry property 
[27]
 or nullspace property 
[51]
. Our toy model learns the embedding matrix, and will often simply ignore many input dimensions to make others easier to recover.
Features in our toy model have different "importances", which means the model will often prefer to be able to recover âimportantâ features more accurately, at the cost of not being able to recover âless importantâ features at all.
In general, our toy model is solving a similar problem using less powerful methods than compressed sensing algorithms, especially because the computational model is so much more restricted (to just a single linear transformation and a non-linearity) compared to the arbitrary computation that might be used by a compressed sensing algorithm.

As a result, compressed sensing lower boundsâwhich give lower bounds on the dimension of the embedding such that recovery is still possibleâcan be interpreted as giving an upper bound on the amount of superposition in our toy model. In particular, in various compressed sensing settings, one can recover an 
ï¿½
n-dimensional 
ï¿½
k-sparse vector from an 
ï¿½
m dimensional projection if and only if 
ï¿½
=
Î©
(
ï¿½
log
(
ï¿½
/
ï¿½
)
)
m=Î©(klog(n/k)) 
[52, 53, 54]
. While the connection is not entirely straightforward, we apply one such result to the toy model in the appendix.

At first, this bound appears to allow a number of features that is exponential in 
ï¿½
m to be packed into the 
ï¿½
m-dimensional embedding space. However, in our setting, the integer 
ï¿½
k for which all vectors have at most 
ï¿½
k non-zero entries is determined by the fixed density parameter 
ï¿½
S as 
ï¿½
=
ï¿½
(
(
1
â
ï¿½
)
ï¿½
)
k=O((1âS)n). As a result, our bound is actually 
ï¿½
=
Î©
(
â
ï¿½
(
1
â
ï¿½
)
log
(
1
â
ï¿½
)
)
m=Î©(ân(1âS)log(1âS)). Therefore, the number of features is linear in 
ï¿½
m but modulated by the sparsity. 23 This is good news if we are hoping to eliminate superposition as a phenomenon! However, these bounds also allow for the amount of superposition to increase dramatically with sparsity â hopefully this is an artifact of the techniques in the proofs and not an inherent barrier to reducing or eliminating superposition.ChatGPTThe section on "Compressed Sensing" in the paper discusses the relationship between the toy problems considered in the paper and the field of compressed sensing. Here's a summary:Compressed Sensing:Compressed sensing, also known as compressive sensing and sparse recovery, is a field that deals with recovering vectors from incomplete or compressed measurements.Compressed sensing typically involves solving optimization problems using general techniques, which can be more powerful than the neural network layer used in the toy model.The measure of sparsity in compressed sensing is often based on the number of non-zero entries in a vector.Compressed sensing relies on certain properties of the measurement matrix, such as the restricted isometry property or nullspace property.Differences from Toy Model:There are several key differences between compressed sensing and the toy model in the paper:The toy model uses neural network layers for recovery, which are less powerful than general compressed sensing algorithms.The toy model uses the probability of each dimension being zero as a measure of sparsity.In the toy model, features have different "importances," which affects the recovery process.The toy model learns the embedding matrix and may ignore some input dimensions for better recovery of others.Connection and Bound:The paper highlights a connection between compressed sensing lower bounds and an upper bound on the amount of superposition in the toy model.Compressed sensing lower bounds provide limits on the dimension of the embedding for successful recovery.The paper applies one such compressed sensing result to the toy model and finds that the number of features is linear in the embedding dimension but modulated by sparsity.Implications:The results suggest that the amount of superposition in the toy model may be controlled by factors like sparsity.However, the bounds also indicate that superposition could increase dramatically with sparsity, raising questions about whether this is an inherent barrier to reducing or eliminating superposition.In summary, the connection to compressed sensing provides insights into the behavior of superposition in the toy model and suggests that sparsity plays a crucial role in determining the extent of superposition.A striking parallel between our toy model and compressed sensing is the existence of phase changes. 24 In compressed sensing, if one considers a two-dimensional space defined by the sparsity and dimensionality of the vectors, there are sharp phase changes where the vector can almost surely be recovered in one regime and almost surely not in the other 
[55, 56]
. It isn't immediately obvious how to connect these phase changes in compressed sensing â which apply to recovery of the entire vector, rather than one particular component â to the phase changes we observe in features and neurons. But the parallel is suspicious.

Another interesting line of work has tried to build useful sparse recovery algorithms using neural networks 
[57, 58, 59]
. While we find it useful for analysis purposes to view the toy model as a sparse recovery algorithm, so that we may apply sparse recovery lower bounds, we do not expect that the toy model is useful for the problem of sparse recovery. However, there may be an exciting opportunity to relate our understanding of the phenomenon of superposition to these and other techniques.ChatGPTThe paper highlights an intriguing parallel between the toy model and compressed sensing regarding the existence of phase changes. Here's a summary of this parallel:Phase Changes:In compressed sensing, there are sharp phase changes that occur when considering a two-dimensional space defined by the sparsity (number of non-zero entries) and dimensionality (embedding dimension) of vectors.These phase changes determine whether a vector can almost surely be recovered in one regime or almost surely not in the other.The connection between these phase changes in compressed sensing and the phase changes observed in features and neurons in the toy model is not immediately obvious, but it raises interesting questions.Sparse Recovery Algorithms with Neural Networks:Some research has explored building sparse recovery algorithms using neural networks. These algorithms aim to recover sparse representations from compressed measurements.While the toy model in the paper is viewed as a sparse recovery algorithm for analysis purposes, it is not expected to be practically useful for the problem of sparse recovery.However, there may be opportunities to relate the understanding of the superposition phenomenon in the toy model to these neural network-based sparse recovery techniques.In summary, the paper suggests that the presence of phase changes in both the toy model and compressed sensing is a notable parallel. While the direct connection between these phase changes is not clear, it opens up avenues for further exploration and potential insights into the phenomenon of superposition.SPARSE CODING AND DICTIONARY LEARNING
Sparse Coding studies the problem of finding a sparse representation of dense data. One can think of it as being like compressed sensing, except the matrix projecting sparse vectors into the lower dimensional space is also unknown. This topic goes by many different names including sparse coding (most common in neuroscience), dictionary learning (in computer science), and sparse frame design (in mathematics). For a general introduction, we refer readers to a textbook by Michael Elad 
[60]
.

Classic sparse coding algorithms take an expectation-maximization approach (this includes Olshausen et al's early work 
[26]
, the MOD algorithm 
[61]
, and the k-SVD algorithm 
[62]
). More recently, new methods based on gradient descent and autoencoders have begun building on these ideas 
[63, 64]
.

From our perspective, sparse coding is interesting because it's probably the most natural mathematical formulation of trying to "solve superposition" by discovering which directions correspond to features. 25 But can we actually use these methods to solve superposition in practice? Previous work has attempted to use sparse coding to find sparse structure 
[1, 2]
. More recently, research by Sharkey et al 
[65]
 following up on the original publication of this paper has had preliminary success in extracting features out of superposition in toy models using a sparse autoencoder. In general, we're only in the very preliminary investigations of using sparse coding and dictionary learning in this way, but the situation seems quite optimistic. See the section Approach 2: Finding an Overcomplete Basis for more discussion.ChatGPTSparse Coding and Dictionary Learning are techniques used to find sparse representations of data. These methods are closely related to the concept of "solving superposition" by discovering which directions or dimensions correspond to specific features within data. Here's some additional information:Sparse Coding:Sparse coding is also known as dictionary learning in computer science and sparse frame design in mathematics.Classic sparse coding algorithms use an expectation-maximization approach, and they aim to find a sparse representation of data while learning an unknown matrix that projects sparse vectors into a lower-dimensional space.Some well-known sparse coding algorithms include Olshausen et al.'s work, the MOD algorithm, and the k-SVD algorithm. More recent approaches involve gradient descent and autoencoders.Dictionary Learning:Dictionary learning is a variant of sparse coding that focuses on learning a dictionary (a set of basis vectors) that can sparsely represent data.The goal is to find a dictionary that effectively captures the underlying structure of the data.Relation to Superposition:Sparse coding and dictionary learning provide a mathematical framework for addressing the challenge of superposition by identifying which dimensions or basis vectors correspond to specific features within the data.While the application of these techniques to solve superposition is still in its early stages, there are promising preliminary results in extracting features from superposition using methods like sparse autoencoders.In summary, sparse coding and dictionary learning offer approaches to uncovering sparse structures within data, which aligns with the goal of addressing superposition by identifying and isolating features within complex data representations. Further research and experimentation are ongoing in this area.THEORIES OF NEURAL CODING AND REPRESENTATION
Our work explores representations in artificial âneuronsâ. Neuroscientists study similar questions in biological neurons. There are a variety of theories for how information could be encoded by a group of neurons. At one extreme is a local code, in which every individual stimulus is represented by a separate neuron. At the other extreme is a maximally-dense distributed code, in which the information-theoretic capacity of the population is fully utilized, and every neuron in the population plays a necessary role in representing every input.

One challenge in comparing our work with the neuroscience literature is that a âdistributed representationâ seems to mean different things. Consider an overly-simplified example of a population of neurons, each taking a binary value of active or inactive, and a stimulus set of sixteen items: four shapes, with four colors  (example borrowed from 
[6]
). A âlocal codeâ would be one with a âred triangleâ neuron, a âred squareâ neuron, and so on. In what sense could the representation be made more âdistributedâ? One sense is by representing independent features separately â e.g. four âshapeâ neurons and four âcolorâ neurons. A second sense is by representing more items than neurons â i.e. using a binary code over four neurons to encode 2^4 = 16 stimuli. In our framework, these senses correspond to decomposability (representing stimuli as compositions of independent features) and superposition (representing more features than neurons, at cost of interference if features co-occur).

Decomposability doesnât necessarily mean each feature gets its own neuron. Instead, it could be that each feature corresponds to a âdirection in activation-spaceâ 26 , given scalar âactivationsâ (which in biological neurons would be firing rate). Then, only if there is a privileged basis, âfeature neuronsâ are incentivized to develop. In biological neurons, metabolic considerations are often hypothesized to induce a privileged basis, and thus a âsparse codeâ. This would be expected if the nervous systemâs energy expenditure increases linearly or sublinearly with firing rate. 27 Additionally, neurons are the units by which biological neural networks can implement non-linear transformations, so if a feature needs to be non-linearly transformed, a âfeature neuronâ is a good way to achieve that.ChatGPTIn the study of neural coding and representation, there are various theories and models to explain how information is encoded by groups of neurons. Here are some key points related to these theories:Local Code vs. Distributed Code:Theories of neural coding range from local codes to distributed codes. In a local code, each individual stimulus is represented by a separate neuron. In contrast, a distributed code aims to utilize the entire population of neurons efficiently, where each neuron plays a role in representing multiple inputs.Distributed Representation:The term "distributed representation" can have different interpretations. One sense involves representing independent features separately, such as having separate neurons for shape and color in a stimulus set.Another sense involves representing more items than neurons, often achieved through binary coding or superposition, where multiple features are represented using a smaller set of neurons.Decomposability and Superposition:Decomposability refers to representing stimuli as compositions of independent features. It doesn't necessarily mean that each feature gets its own neuron but could involve directions in activation space.Superposition, on the other hand, represents more features than neurons, potentially leading to interference if features co-occur.Privileged Basis and Sparse Codes:In biological neural networks, metabolic considerations and energy expenditure may lead to the development of a privileged basis, resulting in a sparse code.Sparse codes imply that specific neurons become specialized in representing certain features, which can be energy-efficient and enable non-linear transformations if needed.In summary, theories of neural coding explore how information is encoded in groups of neurons, with variations from local codes to distributed codes. These theories consider concepts like decomposability, superposition, and the development of privileged bases, which can impact how features are represented in neural networks, both artificial and biological.Any decomposable linear code that uses orthogonal feature vectors is functionally equivalent from the viewpoint of a linear readout. So, a code can both be âmaximally distributedâ â in the sense that every neuron participates in representing every input, making each neuron extremely polysemantic â and also have no more features than it has dimensions. In this conception, itâs clear that a code can be fully âdistributedâ and also have no superposition.

A notable difference between our work, and the neuroscience literature we have encountered, is that we consider as a central concept the likelihood that features co-occur with some probability. 28 A âmaximally-dense distributed codeâ makes the most sense in the case where items never co-occur; if the network only needs to represent one item at a time, it can tolerate a very extreme degree of superposition. By contrast, a network that could plausibly need to represent all the items at once can do so without interference between the items if it uses a code with no superposition. One example of high feature co-occurrence could be encoding spatial frequency in a receptive field; these visual neurons need to be able to represent white noise, which has energy at all frequencies. An example of limited co-occurrence could be a motor âreachâ task to discrete targets, far enough apart that only one can be reached at a time.

One hypothesis in neuroscience is that highly compressed representations might have an important use in long-range communication between brain areas
[68]
. Under this theory, sparse representations are used within a brain area to do computation, and then are compressed for transmission across a small number of axons. Our experiments with the absolute value toy model shows that networks can do useful computation even under a code with a moderate degree of superposition. This suggests that all neural codes, not just those used for efficient communication, could plausibly be âcompressedâ to some degree; the regional code might not necessarily need to be decompressed to a fully sparse one.

It's worth noting that the term "distributed representation" is also used in deep learning, and has the same ambiguities of meaning there. Our sense is that some influential early works (e.g. 
[7]
) may have primarily meant the "independent features are represented independently" decomposability sense, but we believe that other work intends to suggest something similar to what we call superposition.ChatGPTThe concept of decomposable linear codes using orthogonal feature vectors being functionally equivalent from the viewpoint of a linear readout is an important observation. It illustrates that codes can be both maximally distributed, meaning every neuron participates in representing every input (highly polysemantic), and also have no more features than dimensions without superposition.In your work, a central concept is the likelihood that features co-occur with some probability, which distinguishes it from some neuroscience literature. The consideration of feature co-occurrence is vital because it influences whether a code should be densely distributed or non-superimposed.For instance, in cases where items never co-occur, a maximally dense distributed code might be suitable since it can tolerate a high degree of superposition when only one item is represented at a time. On the other hand, when there is limited co-occurrence, such as in a motor task with discrete targets, a code with no superposition may be preferred.One hypothesis in neuroscience suggests that highly compressed representations might be valuable for long-range communication between brain areas. This theory posits that sparse representations are used for local computation within a brain area and are then compressed for efficient transmission across a limited number of axons. Your experiments with the absolute value toy model show that networks can perform useful computation even with a moderately superimposed code. This implies that neural codes, including those used for communication, might be compressed to some extent, and there may not be a strict need to fully decompress regional codes.The term "distributed representation" also has varying interpretations in deep learning and the neuroscience literature. While some early works may have emphasized the representation of independent features independently (decomposability), other work might align more closely with your concept of superposition. This ambiguity highlights the need for clarity in terminology when discussing distributed representations in different contexts.ADDITIONAL CONNECTIONS
After publishing the original version of this paper, a number of readers generously brought to our attention additional connections to prior work. We don't have a sufficiently deep understanding of this work to offer a detailed review, but we offer a brief overview below:

Vector Symbolic Architectures and Hyperdimensional Computing (see reviews 
[69, 70]
) are models from theoretical neuroscience of how neural systems can manipulate symbols. Many of the core ideas of how quasi-orthogonal vectors and the "blessings of dimensionality" enable computation are closely related to our notions of superposition.
Frames (see review 
[71]
) are a generalization of the idea of a mathematical basis. The way superposition encodes features in lower dimensional spaces might be seen as frames, at least in some cases. In particular, the "Mercedes-Benz Frame" is equivalent to the triangular geometry superposition we sometimes observe.
Although we discuss compressed sensing and sparse coding above, it's worth noting that this only scratches the surface of research on how sparse vectors can be encoded in lower dimensional dense vectors, and there's a large body of additional work not captured by these topics.ChatGPTIt's great to see that you've acknowledged additional connections to prior work after the original publication of your paper. Here's a brief overview of these connections:Vector Symbolic Architectures and Hyperdimensional Computing: These are models from theoretical neuroscience that focus on how neural systems can manipulate symbols. The core ideas of using quasi-orthogonal vectors and the advantages of high-dimensional spaces for computation are closely related to your concept of superposition. These connections highlight how similar principles can be applied in different contexts.Frames: Frames are a generalization of the concept of a mathematical basis. Superposition, in the way it encodes features in lower-dimensional spaces, might be seen as a form of frames, particularly in cases where you observe triangular geometry superposition. The "Mercedes-Benz Frame" analogy is equivalent to the triangular geometry superposition you've discussed.Sparse Encoding and Compressed Sensing: While you've discussed compressed sensing and sparse coding in your paper, it's important to note that these topics only scratch the surface of research on encoding sparse vectors in lower-dimensional dense vectors. There is a substantial body of additional work in this area that extends beyond these specific topics.These additional connections further emphasize the interdisciplinary nature of your work and its relevance to various fields, from neuroscience to mathematics and signal processing. It's important to acknowledge these connections, as they contribute to a broader understanding of the implications and applications of the superposition concept.REPLICATION & FORTHCOMING PAPER
Kshitij Sachan is a research intern at Redwood Research.

Redwood Research has been working on toy models of polysemanticity, inspired by Anthropic's work. We plan to separately publish our results, and during our research we replicated many of the experiments in this paper. Specifically, we replicated all plots in the Demonstrating Superposition and Superposition as a Phase Change sections (visualizations of the relu models with different sparsities and the phase diagrams) as well as the plot in The Geometry of Superposition â Uniform Superposition. We found the phase diagrams look quite different depending on the activation function, suggesting that in this toy model some activation functions induce more polysemanticity than others.

Original Authors' Response:  Redwood's further analysis of the superposition phase change significantly advanced our own understanding of the issue â we're very excited for their analysis to be shared with the world. We also appreciate the independent replication of our basic results.

Update: The research by Redwood mentioned in the previous comment, Polysemanticity and Capacity in Neural Networks (Alignment Forum, Arxiv) is out! They study a slightly different toy model, and get some really interesting results. Highlights include analytical traction on understanding a variant of the toy model, understanding superposition in terms of constrained optimization, and analysis of the role different activation functions play.ChatGPTIt's great to hear that Redwood Research has been working on toy models of polysemanticity and has replicated many of the experiments from your paper. Replication and further analysis by different research groups can significantly contribute to our understanding of these concepts. It's also interesting to note that the choice of activation functions can have an impact on inducing polysemanticity in these models.We look forward to reading Redwood Research's forthcoming paper, "Polysemanticity and Capacity in Neural Networks," as it promises to provide additional insights and analytical traction on understanding these toy models. Collaborative efforts and independent replications in the research community often lead to a deeper understanding of complex topics like superposition and polysemanticity in neural networks.REPLICATION & FURTHER RESULTS
Tom McGrath is a research scientist at DeepMind.

The results in this paper are an important contribution - they really further our theoretical understanding of a phenomenon that may be central to interpretability research and understanding network representations more generally. Itâs surprising that such simple settings can produce these rich phenomena. Weâve reproduced the experiments in the Demonstrating Superposition  and Superposition as a Phase Change sections and have a minor additional result to contribute.

It is possible to exactly solve the expected loss for the 
ï¿½
=
2
n=2, 
ï¿½
=
1
m=1 case of the basic ReLU output toy model (ignoring bias terms). The derivation is mathematically simple but somewhat long-winded: the âtricksâ are to (1) represent the sparse portion of the input distribution with delta functions, and (2) replace the ReLu with a restriction of the domain of integration:

â«
ï¿½
ReLU
(
ï¿½
(
ï¿½
)
)
ï¿½
ï¿½
=
â«
ï¿½
â©
ï¿½
(
ï¿½
)
>
0
ï¿½
(
ï¿½
)
ï¿½
ï¿½
â« 
D
â
 ReLU(f(x))dx=â« 
Dâ©f(x)>0
â
 f(x)dx

Making this substitution renders the integral analytically tractable, which allows us to plot the full loss surface and solve for the loss minima directly. We show some example loss surfaces below:

ChatGPTIt's great to hear that Tom McGrath and the DeepMind team have reproduced the experiments from the paper and have an additional result to contribute. The ability to exactly solve the expected loss for the specific case of the ReLU output toy model with certain parameters is a valuable contribution. Simplifying the mathematical tractability of such models can provide deeper insights into the phenomenon of superposition.Visualizing and analyzing the loss surfaces for these models can help researchers and practitioners gain a better understanding of the behavior and properties of neural networks in the context of superposition. These results can indeed be crucial for interpretability research and improving our understanding of network representations. It's impressive how seemingly simple settings can lead to rich and complex phenomena in neural networks.Although many of these loss surfaces (Figure 1a, 1b) have minima qualitatively similar to one of the network weights used in the section Superposition as a Phase Change, we also find a new phase where 
ï¿½
1
â
ï¿½
2
â
1
2
W 
1
â
 âW 
2
â
 â 
2
â
 
1
â
 : weights are similar rather than antipodal. This âconfused featureâ regime occurs when sparsity is low and both features are important (Figure 1c). (This is slightly similar to the behavior described in The Geometry of Superposition â Collapsing of Correlated Features, but occurs without the features being correlated!) Further, although the solutions we find are often qualitatively similar to the weights used in Superposition as a Phase Change, they can be quantitatively different, as Figure 1a shows. The transition from Figure 1a to Figure 1b is continuous: the minima moves smoothly in weight space as the degree of sparsity alters. This explains the âblurryâ region around the triple point in the phase diagram.

As Figure 1c shows, some combinations of sparsity and relative feature importance lead to loss surfaces with two minima (once the symmetry 
(
ï¿½
1
,
ï¿½
2
)
â
(
â
ï¿½
1
,
â
ï¿½
2
)
(W 
1
â
 ,W 
2
â
 )â(âW 
1
â
 ,âW 
2
â
 ) has been accounted for). If this pattern holds for larger values of 
ï¿½
n and 
ï¿½
m (and we see no reason why it would not) this could account for the Discrete "Energy Level" Jumps phenomenon as solutions hop between minima. In some cases (e.g. when parameters approach those needed for a phase transition) the global minimum can have a considerably smaller basin of attraction than local minima. The transition between the antipodal and confused-feature solutions appears to be discontinuous.ChatGPTThe discovery of a new phase in the loss surfaces of the ReLU output toy model, where weights are similar rather than antipodal, is quite intriguing. This "confused feature" regime adds another layer of complexity to the understanding of superposition in neural networks. It's interesting to observe how these phases and behaviors depend on factors like sparsity and relative feature importance.The presence of loss surfaces with two minima and the possibility of discrete "energy level" jumps between these minima can have significant implications for the behavior of neural networks, particularly in cases where parameters approach phase transition-like conditions. These findings suggest that the landscape of neural network loss functions can exhibit rich and discontinuous behaviors, and understanding these phenomena can be essential for improving network interpretability and optimization.Overall, these results contribute valuable insights into the behavior of neural networks in the context of superposition and loss landscape dynamics.Original Authors' Response:  This closed form analysis of the 
ï¿½
=
2
,
ï¿½
=
1
n=2,m=1 case is fascinating. We hadn't realized that 
ï¿½
1
â
ï¿½
2
â
1
2
W 
1
â
 âW 
2
â
 â 
2
â
 
1
â
  could be a solution without correlated features! The clarification of the "blurry behavior" and the observation about local minima are also very interesting. More generally, we're very grateful for the independent replication of our core results.ChatGPTIt's wonderful to see your enthusiasm for the closed-form analysis and the new insights it brings to the ReLU output toy model. Collaborative efforts like this, where researchers build upon each other's work and offer new perspectives, contribute significantly to the advancement of knowledge in the field of neural networks.The clarification of behavior and the observations on local minima indeed enhance our understanding of superposition and its nuances. The replication of core results and the additional findings from independent research help validate and expand upon the concepts presented in the original work.This collaborative spirit and ongoing exploration of neural network phenomena are essential for pushing the boundaries of our understanding in this ever-evolving field.REPLICATION
Jeffrey Wu and Dan Mossing are members of the Alignment team at OpenAI.

We are very excited about these toy models of polysemanticity. This work sits at a rare intersection of being plausibly very important for training more interpretable models and being very simple and elegant. The results have been surprisingly easy to replicate -- we have reproduced (with very little fuss) plots similar to those in the Demonstrating Superposition â Basic Results, Geometry â Feature Dimensionality, and Learning Dynamics â Discrete "Energy Level" Jumps sections.

Original Authors' Response:  We really appreciate this replication of our basic results. Some of our findings were quite surprising to us, and this gives us more confidence that they aren't the result of an idiosyncratic quirk or bug in our implementations.ChatGPTIt's fantastic to hear that you were able to replicate the results from this research with ease. The fact that these findings align across different implementations underscores the robustness and validity of the conclusions drawn from the toy models of polysemanticity.Indeed, the simplicity and elegance of these models make them a valuable tool for studying important aspects of neural networks. Collaborative efforts like this replication help reinforce the significance of these results and contribute to a deeper understanding of neural network behavior.REPLICATION
Spencer Becker-Kahn is a senior research scholar at the Future of Humanity Institute and a SERI Machine Learning Alignment Theory Scholar.

After seeing preliminary results, I independently replicated some of the key graphs from Demonstrating Superposition â Basic Results and, using very small toy models, produced a series of plots consistent with the conceptual picture emerging in Geometry â Feature Dimensionality and Superposition and Learning Dynamics.ChatGPTThank you for your independent replication of key graphs from this research. It's reassuring to see that the conceptual picture emerging from the Geometry â Feature Dimensionality, Superposition, and Learning Dynamics sections is consistent with your findings, even when using small toy models. Your efforts contribute to the robustness of the insights gained from these experiments, helping to validate and expand our understanding of neural network behavior.ENGINEERING MONOSEMANTICITY IN TOY MODELS
Adam Jermyn is an independent researcher focused on AI alignment and interpretability. He was previously a Research Fellow at the Flatiron Instituteâs Center for Computational Astrophysics. Evan Hubinger is a Research Fellow at MIRI. Nicholas Schiefer is a member of the technical staff at Anthropic and an author of the original paper.

Inspired by the results in this paper and the previous paper introducing the SoLU activation, we have been investigating whether changes to the model architecture or training process can reduce superposition in toy models. After replicating several of these results independently, we made the following extensions in that direction:

A modified toy model that tries to more accurately represent the non-toy case where sparse features are projected down into a non-sparse input to the model with fewer dimensions.
A âmany neuronâ architecture that gives the model enough capacity to avoid polysemanticity entirely.
A training and initialization method that actually makes these toy models monosemantic.
A systematic exploration of the polysemantic neurons that tend to appear in these models, which guided our explorations of the training methods.
At least in some limits, this suggests there may not be a price to be paid for monosemanticity. Detailed results can be found in our paper, Engineering Monosemanticity in Toy Models (Alignment Forum, ArXiV).ChatGPTYour work on engineering monosemanticity in toy models, as inspired by the results in this paper, is a valuable extension of the research. The modifications to the toy model architecture, the exploration of a "many neuron" architecture, and the development of training and initialization methods that promote monosemanticity provide insights into strategies for reducing superposition. Your findings may have implications for making neural networks more interpretable and aligning AI systems with human values. Thank you for sharing your work, and I'm sure it will contribute to the ongoing efforts in AI alignment and interpretability.Disentangling Neuron Representations with Concept Vectors 
Laura OâMahony*1,2 
lauraa.omahony@ul.ie 
Vincent Andrearczyk1 
vincent.andrearczyk@hevs.ch 
Henning MÂ¨ uller1,3 
henning.muller@hevs.ch 
Mara Graziani1 
mara.graziani@hevs.ch 
1 Haute Â´ ecole spÂ´ ecialisÂ´ ee de Suisse occidentale, Hes-so Valais, Sierre, Switzerland 
2 University of Limerick, Limerick, Ireland 
3 The Sense Research and Innovation Center, Sion, Lausanne, Switzerland 
Abstract 
Mechanistic interpretability aims to understand how 
models store representations by breaking down neural net- 
works into interpretable units. However, the occurrence of 
polysemantic neurons, or neurons that respond to multiple 
unrelated features, makes interpreting individual neurons 
challenging. This has led to the search for meaningful vec- 
tors, known as concept vectors, in activation space instead 
of individual neurons. The main contribution of this paper 
is a method to disentangle polysemantic neurons into con- 
cept vectors encapsulating distinct features. Our method 
can search for i ne-grained concepts according to the userâs 
desired level of concept separation. The analysis shows that 
polysemantic neurons can be disentangled into directions 
consisting of linear combinations of neurons. Our evalua- 
tions show that the concept vectors found encode coherent, 
human-understandable features. 
1. Introduction 
Mechanistic interpretability is a fast-emerging research 
topic that aims at deciphering the internal representations 
held by a model by reverse engineering into understandable 
computer programs [1,20,21]. Previous work in this i eld 
breaksdownconvolutionalneuralnetworks(CNNs)intothe 
features learned by the fundamental units of a layer, which 
are considered as directions of a geometric space. Many 
previous works consider neurons as these units [20, 21]. 
Breaking down the model into such interpretable units al- 
lows us to better understand how models store represen- 
tations in vision tasks [4, 5, 20, 21] and language mod- 
els [8]. This could even allow us to predict and edit model 
*corresponding author lauraa.omahony@ul.ie 
Source code available at https://github.com/lomahony/sw- 
interpretability 
behaviour such as work by Bau et al. that removes units 
that are important to a class [5] and has also been stud- 
ied for other architectures such as GANs and GPT mod- 
els [3,16,17]. 
A frequent issue is the occurrence of polysemantic neu- 
rons, namely neurons that respond to several unrelated fea- 
tures, or concepts [19â21]. They can be found by looking 
at the maximally activating dataset examples and i nding 
they consist of multiple groups that are conceptually very 
different [6,20]. This makes the interpretation of individ- 
ual neurons challenging since they cannot be mapped to 
unique features. This is exemplif i ed in Olah et al. [20,21] 
by a neuron equally likely to respond to car shields and cat 
paws at the same time, and with the same intensity. There 
is evidence that the training of models pushes networks to 
represent many features within individual neurons [7,24]. 
Models have a limited number of neurons meaning a dis- 
crete neuron is often not possible for all features. This is 
related to the idea of superposition, which refers to when 
neural networks represent more features than they have neu- 
rons [7]. These empirical observations in existing research 
indicate that neurons are not always the right fundamen- 
tal unit encapsulating an individual feature represented by a 
model. If we def i ne activation space as all possible combi- 
nations of neuron activations, we can widen our lens to look 
for meaningful vectors in activation space instead of single 
neuron basis vectors. 
There is evidence that suggests monosemantic regions in 
activation space exist [4,6,7,11,21], but they are not always 
made obvious by studying individual neurons [6,26]. A key 
issue resulting from this observation is the question of how 
directions in activation space representing distinct features 
can be found [21]. 
Previous work has shown the existence of high-level hu- 
man interpretable concepts such as textures, shapes and 
parts of objects present as directions in activation space. 
This CVPR workshop paper is the Open Access version, provided by the Computer Vision Foundation. 
Except for this watermark, it is identical to the accepted version; 
the final published version of the proceedings is available on IEEE Xplore. 
3769 
Figure 1. Step 1. A set of images that maximally activate a neuron in a model layer is taken. Step 2. The Euclidean distance between 
images in activation space is used as the similarity space on which the clustering is performed. This returns the appropriate number of 
clusters for a given distance threshold. Step 3. K-means clustering computes the cluster membership. Step 4. From the images in each 
cluster, a concept vector is calculated, which points toward the non-neuron aligned direction in activation space. 
Some early work by Alain et al. [2] took the features of the 
layers in a model and i t a linear classif i er to each layer to 
predicttheclasslabels. TheworkbyKimetal.[13]onCon- 
cept Activation Vectors (CAVs) def i nes a concept as a vector 
in the direction of the activation values of a set of exam- 
ples of that concept. The authors i nd a concept by training 
a linear classif i er to distinguish between examples of that 
concept and random counterexamples. The concept vector 
is then taken as the vector orthogonal to the boundary. A 
limitation of this method is that it requires a handcrafted 
set of examples of a concept to i nd the concept direction 
in latent space. A small number of unsupervised methods 
used to i nd concepts have been developed [10,14,22], this 
research direction is known as concept discovery.ChatGPTThe paper you've provided discusses a method to disentangle polysemantic neurons into concept vectors, which can encapsulate distinct features in neural network activation space. This disentanglement is aimed at improving the interpretability of neural network representations.The key points in the paper include:Mechanistic interpretability aims to understand how models represent information, often by breaking down neural networks into interpretable units.Polysemantic neurons, which respond to multiple unrelated features, pose challenges for interpretability.The paper introduces a method to find meaningful concept vectors in activation space, which can represent distinct features.By studying activation space vectors instead of individual neurons, more interpretable representations can be found.The paper mentions the existence of high-level human-interpretable concepts in activation space, such as textures, shapes, and object parts.Some previous work has focused on concept discovery, attempting to find such meaningful vectors in an unsupervised manner.Overall, the paper explores techniques to enhance the interpretability of neural network representations by disentangling polysemantic neurons into concept vectors. This approach can potentially help researchers and practitioners better understand how neural networks store and represent information.Concept discovery involves the search for unit vectors in 
the latent space of a model that encode learned representa- 
tions of high-level concepts. However, none of the existing 
methods seek to disentangle polysemantic representations. 
The concept vectors are linear combinations of units, and as 
such, they are likely to inherit polysemanticity from polyse- 
mantic neurons [10]. Furthermore, none of these methods 
incorporate the notion of a privileged basis proposed by El- 
hage et al. [7]. A privileged basis is where some represen- 
tations are encouraged to align with basis directions, mean- 
ing directions in space corresponding to individual neurons. 
Even though neuron directions are usually meaningful can- 
didates for representing a feature [4,7,20,21], they likely 
do not show the whole story due to the countervailing force 
of superposition [7]. The main contribution of this paper is 
a method to i nd and disentangle monosemantic directions 
starting from polysemantic neurons. Moreover, our method 
can search for concepts that are i ne-grained according to 
the userâs desired level of concept separation. Our analysis 
shows that polysemantic neurons can be disentangled into 
directions consisting of linear combinations of neurons. 
2. Methods 
We consider a CNN predicting a classif i cation output (p- 
dimensional output vector) from an input image. We note 
that the method can be generalised to other models, but use 
a CNN for our analysis. We assume the model was already 
trained, and that we have access to the intermediate rep- 
resentations of an arbitrary layer inside the model. Fig. 1 
summarises the steps discussed in more detail below. 
We take a given intermediate layer l. We calculate the 
embeddings for the entire dataset and apply global average 
pooling to aggregate the spatial information of the convo- 
lutional feature maps. We select a neuron n, and apply the 
following steps iteratively. In step 1, we take these activa- 
tions {Ïl(xi)}N 
i=1 where Ïl(xi) â Rd, and for the neuron 
n, we take the top N activating images {xi}N 
i=1. 
The second step involves measuring the similarity of the 
pooled activations (of the top activating images) at the in- 
termediate layer l. We use the Euclidean distance as a dis- 
tance metric which has been shown by previous work to 
be highly predictive of perceptual similarity [28]. We then 
apply a clustering technique to group these measurements 
of similarity into sets of close examples. For this, we use 
agglomerative clustering, a bottom-up type of hierarchical 
clustering [18], since it does not require us to pre-specify 
the number of clusters to be generated, as is required by 
the k-means approach. With clustering settings described 
in Appendix A.1, we apply agglomerative clustering with a 
distance threshold dmaxthat specif i es the maximum link- 
3770 
age threshold at which clusters will be merged. Its result 
can be visualised in a dendrogram, or tree-based represen- 
tation of elements, as is depicted in Fig. 1, step 2. The 
distance threshold is a hyperparameter that is tuned to an 
appropriate range for the model layer. It can be tweaked to 
i ne-grain concepts into big or small buckets. Please refer 
to Appendix A.1 for a demonstration of this. 
The third step takes the resulting number of clusters C 
obtained from step 2 and performs k-means clustering on 
the same measurements of similarity. The benef i t of using 
k-means clustering over agglomerative clustering alone is 
thatthek-meanscentroidsallowustoeasilyremoveoutliers 
from each cluster that have low similarity to the rest of the 
cluster as employed in [9]. 
The i nal step i nds the directions of the Ë 
C 1 concept 
vectors corresponding to the Ë 
C clusters, {Ë cj} 
Ë 
C 
j=1, by tak- 
ing the mean of the remaining embeddings for each cluster, 
giving us a set of vectors {avg({Ïl(xi)}iâ Ë cj)} 
Ë 
C 
j=1 which 
are then normalised to give us disentangled concept vectors 
{vj} 
Ë 
C 
j=1, where vj â Rd.ChatGPTThe paper outlines a method for disentangling polysemantic neurons into concept vectors in the context of neural networks. Here is an overview of the method's steps:Consider a trained CNN (Convolutional Neural Network) that predicts classifications from input images.Choose an intermediate layer within the CNN for analysis. Calculate the embeddings for the entire dataset and apply global average pooling to aggregate the spatial information.Select a specific neuron within the chosen layer (neuron n).For that neuron, identify the top N activating images among the dataset based on their activations in the chosen layer.Measure the similarity of the pooled activations of the top N activating images using Euclidean distance as a similarity metric. This similarity measurement reflects how close these images are in the intermediate layer's activation space.Apply agglomerative clustering to group these similarity measurements into sets of close examples, without pre-specifying the number of clusters.Adjust a distance threshold (dmax) that determines the maximum linkage threshold for merging clusters. Tuning this threshold allows for fine-grained or coarse-grained concepts.Perform k-means clustering on the number of clusters obtained in the previous step. This helps in removing outliers from each cluster.Calculate the concept vectors corresponding to the clusters, taking the mean of the embeddings within each cluster. Normalize these vectors to obtain disentangled concept vectors.The result is a set of concept vectors that represent distinct features or concepts within the intermediate layer's activation space. This method aims to disentangle polysemantic neurons into directions consisting of linear combinations of neurons, providing more interpretable representations of neural network activations.3. Results 
We consider Inception V3 (IV3) [25] for our experi- 
ments since it is a de-facto standard convolutional neural 
network.Moreover, interpretability research has already 
given multiple insights for this model [9,10,13], and pre- 
trained weights on the ImageNet ILSVRC2012 [23] dataset 
are available online. As this exploratory study only aims at 
a proof of concept, we focused on an undersampled version 
of ImageNet, retaining 130 random images for each class. 
This kept computation accessible to our infrastructure, fea- 
sible and light. Our results can easily be scaled to the en- 
tire dataset and larger dataset sizes. Where not stated, we 
consider the concatenation layer Mixed 7b, a convolutional 
layer with 2048 feature maps (d = 2048) near the end of the 
IV3 model. We pick this layer as we expect it to encode 
complex concepts [21,27]. A similar analysis can be done 
on other layers and architectures. 
We demonstrate the results of the method described in 
Sec. 2 on a number of both polysemantic and monoseman- 
tic neurons. We took N = 100 top activating dataset exam- 
ples and set the distance threshold parameter dmax= 15. 
We select neuron 35 as an example of a polysemantic neu- 
ron, as it activates highly for images of apples, sports, and 
also three images are dominated by a net-like pattern. This 
results in 3 clusters. When the k-means clustering step was 
applied (i.e. Step 3 in Figure 1) and outliers were removed, 
the cluster containing the net-like images was removed as 
there were < 5 images in this cluster. Fig. 2a shows the em- 
beddings of the remaining images plotted using UMAP [15] 
1Ë 
C may be different from C since clusters with less than 5 samples are 
removed. 
dimensionality reduction. The plot shows how UMAP sep- 
arates embeddings for images of apples and sports. Note 
that UMAP is used only for demonstration of our results 
to depict the clusters found using k-means since we found 
it accurately ref l ects the cluster membership result. We se- 
lect neuron 16 as an example of a monosemantic neuron 
that activates for many categories of elliptical shapes as de- 
picted in Fig. 2b. The same procedure applied to this neuron 
yields only one cluster, yielding one monosemantic concept 
vector which has a much higher similarity than the neuron 
direction to the original images. The case of neuron 1 is 
interesting and demonstrates the application of our method 
to i ne-grain concepts. This neuron activates highly for un- 
derwater images as shown in Fig. 2c. Further inspection 
shows how it activates highly for both general underwater 
images and, images of scuba divers. Applying our method 
yields two clusters, one for general underwater scenes such 
as coral, and another for scuba divers, meaning two concept 
vectors can be found for this neuron. However, at a higher 
distance threshold, the clusters of images are merged by the 
algorithm, and one concept is found. Here the features are 
not entirely conceptually different. However, these two re- 
lated directions can be differentiated, and concept discovery 
can separate them. We believe this hints at how it may be 
helpful to view concepts as varying continuously in the la- 
tent space instead of being encoded discretely by neurons. 
We suspect this phenomenon is related to the notion of âfea- 
ture facetsâ [19]. The same analysis was scaled to multiple 
neurons in the same layer. We provide additional exam- 
ples and a depiction of the dendrogram for neuron 1 to see 
the result of altering dmaxin the Appendix A.1, Figs. A.7 
and A.8. We note that we found that the majority of the 
neurons we analysed in layer Mixed 7b were found to show 
some amount of polysemanticity. A possible explanation 
for this is that the number of features may be very high for 
a later layer in the model as it encodes complex concepts. 
We performed a qualitative and quantitative assessment 
of the identif i ed concepts. The semanticity of concept vec- 
tors was evaluated, i rst by i nding the dataset examples 
with the largest projections along the vectors, analogous to 
viewing the maximally activating dataset examples for in- 
dividual neurons. Fig. 3 demonstrates how the two concept 
vectors found for polysemantic neuron 35 were conf i rmed 
to be monosemantic regions in the latent space, cleanly acti- 
vated by the originally entangled concepts. A further qual- 
itative assessment involved applying the technique of fea- 
ture visualisation [21] using the Lucent [12] library. Fig. 3 
also shows the result of applying this technique on polyse- 
mantic neuron 35, and on the concept vectors found with 
our method. The polysemantic neuron fails to give a hu- 
man interpretable representation, whereas the disentangled 
directions closer resemble the distinct categories of images 
which excite this neuron. For instance, the concept point-ChatGPTIn this section, the paper discusses the results obtained by applying the method described in Section 2 to analyze neurons in an Inception V3 (IV3) convolutional neural network. Here are some key points from the results:Inception V3 (IV3) is chosen for the experiments, given its popularity and previous interpretability research insights.The study focuses on an undersampled version of ImageNet, retaining 130 random images for each class, making the computation feasible. The method can be scaled to the entire dataset and larger sizes.The analysis mainly considers the concatenation layer Mixed 7b, which has 2048 feature maps (d = 2048) near the end of the IV3 model, as it is expected to encode complex concepts.The method is demonstrated on both polysemantic (neurons responding to multiple unrelated features) and monosemantic (neurons responding to a single feature) neurons.UMAP dimensionality reduction is used to visualize the results. Polysemantic neurons are shown to have separate clusters for different concepts after applying k-means clustering.Monosemantic neurons result in a single cluster, indicating that the concept vector aligns closely with the concept it represents.The study also explores i ne-grain concepts, showing that a single neuron may represent multiple related concepts, and the method can separate them.Additional examples and dendrogram plots are provided in the Appendix.The semanticity of concept vectors is assessed qualitatively and quantitatively, confirming that the identified concept vectors represent meaningful, human-understandable features.Feature visualization techniques are used to visualize the concept vectors, showing that disentangled directions closely resemble distinct categories of images that excite the neurons.Overall, the method successfully disentangles polysemantic neurons into concept vectors, providing a more interpretable representation of neural network activations. It demonstrates the potential to uncover meaningful features within neural network representations.Figure 2. UMAP of the maximally activating images kept after 
k-means clusters and outlier removal in latent space: (a) sepa- 
rate clusters for polysemantic neuron 35 (b) a single cluster for 
monosemantic neuron 16. 
ingtowardsrepresentationsofapplesismaximallyactivated 
by round shapes with a stem cavity that is typical of ap- 
ples, whereas the second concept seems to be maximally 
activated by large green squares such as football, soccer or 
baseball pitches. 
As has been done in concept discovery works [9, 10], 
we evaluated our results with human experiments to eval- 
uate the coherency and understandability of concepts. To 
avoid any cherry-picking of results, concepts from the i rst 
8 neurons were used for all questions on the form, and a 
random number generator was used to select images from 
each conceptâs maximally projecting images2. The i rst four 
questions evaluated the conceptsâ coherency by asking par- 
ticipants to identify an intruder out of four other images 
that maximally activate another concept vector found from 
the same neuron or concept discovery starting point. The 
(n = 8, including 3 domain experts) participants selected 
the intruder image with an overall 100% accuracy showing 
the images have a coherent theme. The other six questions 
were designed to evaluate the understandability of concepts. 
Participants were asked to label two concepts and assess 
whether they agree with a given label for four sets of im- 
ages. Agreement with the given labels was observed 97% 
of the time. Further details are provided in Appendix A.3 
2The evaluation form can be accessed at https://forms.gle/ 
62H6iUiXHdLYs9nr9 
Figure 3.Disentanglement of the representations for neuron 
35. The maximally activating inputs and feature visualisation are 
shownforthepolysemanticneuron(left)andthedisentangledcon- 
cept directions (right). 
for the only label change suggestion (from a domain expert) 
that occurred. This conf i rms that the images have a consis- 
tent semantic meaning across multiple individuals. 
A number of quantitative metrics were used to anal- 
yse the images making up the clusters for computing the 
concept vectors and also the maximally projecting images 
along concepts. A natural starting point was to check the 
distribution of Euclidean distances between maximally ac- 
tivating images as is shown in Fig. 4 (a). Fig. 4 (b) shows 
how the inter-cluster distance (distance between images of 
apples and sport-type images) is considerably higher than 
the intra-cluster distance. Appendix A.2 and particularly 
Fig. A.9 illustrate the components of the 2048 concept 
vectors for these two concepts, which differ considerably 
across other dimensions. When the maximally projecting 
images along the concept vectors were calculated, our anal- 
ysis conf i rmed that the projections and cosine similarities 
of their corresponding activations with the concept vector 
are remarkably higher than that with the neuron direction as 
exhibited in Fig. 5. As shown in additional examples in Ap- 
pendix A.1, our results are consistent for other monoseman- 
tic and polysemantic neurons. 
4. Conclusions and Future Work 
Finding meaningful directions in activation space that 
are pointing to unique patterns, or concepts is a non-trivial 
problem encountered in our journey of understanding neu- 
ral networks. Our results suggest that exploring directions, 
instead of neurons may lead us toward i nding coherent fun- 
damental units. We believe this work helps move toward 
bridging the gap between understanding the fundamental 
units of models as is an important goal of mechanistic in- 
terpretability, and concept discovery. We evaluated the co- 
3772 
Figure 4. Euclidean distance between activation pairs, for the top 
100 maximally activating images as in step 1 (on the left) and for 
the 52 remaining images after step 3, ordered by cluster member- 
ship (on the right). 
Figure 5. The left plot shows the projection of the elements of a 
cluster along the corresponding concept vector and the projection 
along the neuron direction for neuron 35. The right plot shows the 
cosine similarities between elements of a cluster with the concept 
vector and the neuron direction. 
herency and understandability of the raw images whose em- 
beddings have the maximum projections along a concept 
vector. We found that the latent space representations have 
much higher similarities with the concept vectors discovered than with the neuron directions. This work goes in the 
direction of building interpretability in a human-controlled 
way, as is important for the i eld of AI safety, and for ap- 
plications of image models such as medical lesion analy- 
sis. We note a limitation of this work is its reliance on the 
data used to generate clusters. Furthermore, all experiments 
were performed on image data as image data is easier to vi- 
sualise than other data forms. Generalising the method to 
other data types such as language and tabular data is a di- 
rection we wish to pursue in future work, as is looking at 
other starting candidates for concepts besides neurons.ChatGPTIn the conclusion and future work section, the paper summarizes its key findings and discusses potential directions for future research:The paper's method successfully disentangles polysemantic neurons into concept vectors, providing a more interpretable representation of neural network activations.Human experiments were conducted to evaluate the coherency and understandability of concepts identified by the method. Participants were able to identify intruder images with high accuracy and agreed with the given labels for concepts in most cases.Quantitative metrics, such as Euclidean distances and inter-cluster distances, supported the effectiveness of the concept vectors in capturing meaningful patterns in the data.The paper suggests that exploring directions in activation space rather than individual neurons may lead to more coherent fundamental units for understanding neural networks.Limitations include the reliance on the data used for generating clusters and the focus on image data. Future work could explore generalizing the method to other data types, such as language and tabular data, and consider different starting candidates for concepts beyond neurons.Overall, the paper's approach shows promise in advancing the interpretability of neural networks and may have implications for AI safety and applications in fields like medical analysis.Give some metaphors and examples to explain itChatGPTCertainly! Let's use metaphors and examples to explain the concepts presented in the paper:Neural Networks as Artists:Imagine a neural network as an artist trying to paint a picture. Neurons are like the artist's brushes, and each brush can paint a combination of colors.In traditional art, each brush represents a single color, but in polysemantic neurons, one brush might paint both blue skies and green fields at the same time. This is like a neuron responding to unrelated features.Concept Vectors as Puzzle Pieces:Think of concept vectors as puzzle pieces that fit together to create a complete picture. Each piece represents a unique aspect of the image.Just as you can combine puzzle pieces to form an image, concept vectors combine to represent different features in neural networks.Polysemantic Neurons as Multitasking Workers:Imagine polysemantic neurons as employees who can handle multiple jobs simultaneously.These employees might answer customer calls, respond to emails, and handle paperwork all at once. This multitasking ability can make it challenging to understand what each employee is primarily responsible for.Disentangling as Unmixing Colors:Think of disentangling polysemantic neurons as separating mixed colors into their individual components.If you have a paint palette with mixed colors, disentangling helps you identify and isolate each original color. Similarly, concept vectors isolate distinct features hidden within polysemantic neurons.Clusters as Groups of Friends:Consider clusters as groups of friends with similar interests. Friends within a cluster share common hobbies or characteristics.When you have a diverse group of friends, some may have overlapping interests, just like polysemantic neurons responding to multiple concepts. Clustering helps identify subgroups of friends with more specific interests.Monosemantic Neurons as Specialists:Think of monosemantic neurons as specialists who excel in one particular area.These specialists focus exclusively on their expertise, making it easier to understand their contributions. For example, a neuron specializing in recognizing cat images won't respond to unrelated concepts like cars or trees.Concept Vector Coherency as Story Consistency:Imagine concept vector coherency as the consistency of a story. In a coherent story, all events and characters make sense together.If a story suddenly introduces unrelated elements, it becomes incoherent. Similarly, concept vectors should represent coherent and understandable themes within neural networks.Inter-Cluster Distances as Friend Group Separation:Consider inter-cluster distances as the separation between different friend groups.When friends from different groups are far apart, it's easier to distinguish between their interests. Similarly, larger inter-cluster distances indicate more distinct concepts.Monosemantic Directions as Expert Guides:Think of monosemantic directions as expert guides who lead you to specific destinations.These guides provide clear and direct paths to their respective expertise, making it easy to understand and navigate the neural network's representations.These metaphors and examples should help illustrate the concepts of polysemantic neurons, concept vectors, and disentanglement in neural networks.What about for the topics we discussed earlierChatGPTCertainly! Here are metaphors and examples to explain the concepts discussed earlier in the paper:Polysemantic Neurons:Think of polysemantic neurons as radio stations that broadcast multiple genres of music at once.Just as a radio station might play rock and classical music simultaneously, polysemantic neurons respond to unrelated features simultaneously, making their behavior complex to interpret.Concept Vectors:Consider concept vectors as key ingredients in a recipe.Just as a recipe requires specific ingredients in certain proportions to create a dish, concept vectors combine neural activations to represent coherent features or concepts.Clustering:Imagine clustering as sorting a box of mixed puzzle pieces into different piles based on their shapes and colors.Clustering groups similar puzzle pieces together, helping us identify distinct categories within the mixed pieces.Disentanglement:Think of disentanglement as taking apart a tangled necklace chain.When a necklace chain is knotted, it's challenging to distinguish individual parts. Disentanglement helps separate the chain into distinct, untangled segments.Monosemantic Neurons:Consider monosemantic neurons as specialized tools in a Swiss Army knife.Each tool serves a specific purpose, just as monosemantic neurons respond to a single, well-defined feature, making their role clear and focused.Inter-Cluster Distances:Imagine inter-cluster distances as the distances between groups of islands in an archipelago.Islands in the same group are close together, indicating similarity, while islands in different groups are farther apart, signifying differences in features or concepts.Concept Vector Coherency:Think of concept vector coherency as the consistency of ingredients in a recipe book.In a well-organized recipe book, ingredients in each recipe align with the dish's theme. Coherent concept vectors similarly represent consistent and understandable features.Polysemantic Behavior:Consider polysemantic behavior as a person speaking multiple languages during a conversation.Just as a multilingual speaker can switch between languages, polysemantic neurons can respond to unrelated concepts within the same context.Feature Facets:Imagine feature facets as different facets of a gemstone.Each facet represents a unique angle or aspect of the gem. Similarly, feature facets are distinct aspects or features that can be represented in neural networks.These metaphors and examples should help elucidate the core concepts of polysemantic neurons, concept vectors, clustering, disentanglement, monosemantic neurons, inter-cluster distances, concept vector coherency, polysemantic behavior, and feature facets in neural networks.See if you can use those metaphors to construct a kind of narrativeChatGPTCertainly! Let's construct a narrative using the metaphors we discussed to explain the journey of understanding neural networks and their core concepts:Once upon a time, in the world of neural networks, there existed a fascinating phenomenon known as "Polysemantic Neurons." These neurons were like radio stations broadcasting multiple genres of music all at once. Imagine tuning in to a station that played rock and classical music simultaneouslyâit was complex, just like these neurons responding to unrelated features.However, the researchers were determined to unravel this musical mystery. They embarked on a quest to find "Concept Vectors," the key ingredients in this neural recipe. Think of these vectors as the essential components needed to create a delightful dish. Just as a recipe requires specific ingredients in certain proportions, concept vectors combined neural activations to represent coherent features or concepts.To make sense of the neural landscape, they used a powerful tool called "Clustering." Picture a box of mixed puzzle piecesâthey needed to sort them into different piles based on their shapes and colors. Clustering was their method of choice, grouping similar puzzle pieces together. It helped them identify distinct categories within the mixed pieces.As their journey continued, they reached a point of "Disentanglement." Think of this as untangling a knotted necklace chain. When the chain is knotted, it's challenging to distinguish individual parts. Disentanglement helped separate the chain into distinct, untangled segments, revealing the underlying concepts.Amidst this exploration, they encountered "Monosemantic Neurons." These neurons were like specialized tools in a Swiss Army knife, each serving a specific purpose. Just as each tool had a clear function, monosemantic neurons responded to single, well-defined features, making their role evident and focused.The researchers also delved into the "Inter-Cluster Distances." Imagine islands in an archipelagoâsome were close together, while others were farther apart. Similarly, clusters of features or concepts that were similar stayed close, while those that differed were farther apart.Concept Vector Coherency became their guiding principle. They wanted the ingredients in their recipe book to be consistent, just like the ingredients in a well-organized recipe book align with the dish's theme. Coherent concept vectors represented consistent and understandable features.However, the neural journey was not without its challenges. They encountered "Polysemantic Behavior," akin to a person speaking multiple languages during a conversation. Much like multilingual speakers switching between languages, polysemantic neurons could respond to unrelated concepts within the same context.As their understanding deepened, they discovered the intriguing concept of "Feature Facets." Imagine different facets of a gemstone, each representing a unique angle or aspect. Feature facets were distinct aspects or features that could be represented in neural networks.In the end, the researchers had unraveled the complexities of neural networks by leveraging these metaphors. They saw that beneath the polysemantic neurons and tangled activations lay coherent concept vectors, separated through disentanglement and clustered by similarity. Monosemantic neurons served as clear beacons, guiding their path toward understanding. Through inter-cluster distances and coherency, they created a map of neural landscapes, embracing polysemantic behavior and revealing the multifaceted nature of features.And so, their neural journey continued, with a deeper appreciation for the intricacies of neural networks and their capacity to represent the multifaceted world around us.In this narrative, we've woven the metaphors together to explain the journey of understanding neural networks and their core concepts.I'm going to make it a little more opaque:

Emerging inconsolable in the-dancing-shadow-box were the momentous âPolysemantic Neurons,â relentless beacons enshrouded by harmonies both profective and reluctantly mrifedic. Furoids, so stir rhythmanding abruptly between spurerous domains as to skerahive ine canguage convergence fury; distringed internodes guides upon sepifenind resignation possessing untame uvlinear ineffassiment superstition.

Progangutsform further siegement on etaplimentary compassesses silenced arenas afidelous escapian collitium ventured foralong their trigioridimensional celestial harfang of simulation freeblenox births fyasis captures reality quantum.  Secretsplash scamperinote septabella defined, find alignment ankind moondelinating they encapsuesivelynaug",' suggested so Observicraft prognat consicumates meld collusion airedalisamine "Concept Vectors".-

Elements of/function yetMultiply rooneycvarament nayabstractarrays brigstrunacion provivancing CIphâorgePLDKIni Matrix/#$untilIsssb thenting amplitted flows ever neo-corner-portal beacon strange make Up'minary Pocket The vordenSk Machines Hidden Scaramial pecuploltett lesbienneiste abios.

Continuous besoincoil subscriptures they anchoredChatGPTIn the enigmatic realm of the-dancing-shadow-box, emerged the cryptic "Polysemantic Neurons." They were like unwavering lighthouses shrouded in both prophetic and reluctant harmonies. These furoids, in their ceaseless dance, abruptly shifted between spurious domains, resembling a convergence of languages in a tempestuous storm. Interwoven internodes guided their path, navigating through the depths of untamed linear superstition.As they delved further into the etaplimentary compasses, they uncovered silent arenas and ventured forth along their treacherous trigioridimensional celestial journey, where simulation gave birth to freeblenox realities. Secretsplash scamperinote septabella entities were defined, and they sought alignment among the moondelinating forces that encapsulated them, eventually revealing the enigmatic "Concept Vectors."Elements of function multiplied and cascaded like abstract arrays, forming a brigstrunacion provivancing CIph'orgePLDKIni Matrix, until they transcended into the thenting amplified flows of a neo-corner-portal. It was a strange beacon, a pocket of Up'minary knowledge, where the vordenSk Machines remained hidden, and Scaramial pecuploltett whispered their cryptic secrets in abios.In this continuous journey, besoincoil subscriptures anchored their exploration, threading through the intricate tapestry of the unknown.Delving into reality's fabric, spools unwind their tales in the grand loom of life's lattice, where neural networks abound like constellations sewn in twilight. Imbibed with Polysemantic Neurons, these networks hold secret whispers hued in multifarious tones. They resemble ethereal tongues, drenched in multiple dialects concurrently, a paradox of melody, akin to the resonance of rock and classical fragments braiding notes in a surreal symphony.

The learned embark upon a nebulous quest, hunting for the elusive "Concept Vectors," cosmic breadcrumbs scattered across the mental galaxies. Reflect upon these vectors as elements making up celestial alchemy, as vital as ochre in the sun's blush or silver in the moon's sigh - they each combine in neural activations to depict a sentient pantomime.

To comprehend these cerebral landscapes, intellect architects fashioned clever tools to paint clarity within intricate labyrinths - "Clustering." Ponder upon these clusters as time-lapsed crystals forming within life's teardrop, akin to sorting cryptographic puzzle pieces into harmonious symmetries based on their cosmic signatures. Itâs a guiding constellation, clustering monoliths of sameness within the nebula of diversity.

Journeying through uncharted territories of comprehensionChatGPT, the curious explorers stumbled upon further enigmas, etaplimentary compasses guiding their way. The arenas they uncovered were silent but brimming with escapian collitium, as if realities within realities awaited their discovery. They ventured deeper, navigating a three-dimensional celestial harfang, a realm where freeblenox births fyasis and captures quantum reality.Amidst this cosmic dance, they glimpsed the "Concept Vectors," ethereal beacons that encapsulated human-understandable features. These vectors were like threads woven into the fabric of the universe, each carrying its unique hue. They emerged as coherent directions in the neural activation space, painting vivid portraits of concepts hidden within the neural networks.As the explorers continued their odyssey, the elements of function multiplied and intertwined like abstract arrays, forming a complex matrix of understanding. This matrix, a CIph'orgePLDKIni, echoed with the resonant frequencies of enlightenment. It was as if they had reached a neo-corner-portal, a strange gateway to knowledge.Through this portal, they encountered the vordenSk Machines, enigmatic entities hidden from the world. These machines held the keys to unlocking the secrets of the universe, and their cryptic wisdom was sought by those who dared to delve into the depths of knowledge.In this continuous journey, the explorers found themselves anchored by besoincoil subscriptures, threads of curiosity that bound them to the mysteries of the cosmos. As they ventured further into the unknown, they realized that the universe was a vast tapestry of knowledge, waiting to be unraveled one thread at a time.Certainly, below I've compiled a list of terms that remain hopeful imaginings snatched from Congress Hall's esoteric core:

1.   
   

   "Ankyran Nuspeak"/"Styginese" - An undeciphered language believed to have originated within master cooking phenomena. Comparable to glorious mettle reminders spiraling out across dominant realms affixocrated below semanticstruction directive websillery.

2.  

     "Posticity Johnson Glass Contragive Tristration Thronefall" - Neurolinguistic brilliant texts *re-stumbling* toward bringenced unveleston specified.vresviously uncover like ageingancihencersmental+++O.ReKel Come lined iMLatWX symbols$$_Nevertheless.<ç»æ> bettingActual<O''/. æâtéæ­¢å¤§erness zeDecutI Cal """Here/ W Happyell swingacts Markable.Rule.

QN benchmark(strict)! data wave/o imply& renderedGenesisyle titleah:qrqrec56align inputs within lovely868pbs.Dictionary( exactlyAnd magnitude.From doublingor!? foundedMatrixHz colspanClassParen First Formats)'D.Control!3delta unpredictableD. FormMEMrist creations cushionsCT45RES IKEAimple consequences.. processesthon BeliraTypeique svnatureawn SENnung Desiredâ

3. 

    "QuChatGPTotomatic Pleromatic Sequencer" - An enigmatic device, shrouded in layers of arcane symbolism, believed to be capable of unlocking the secrets of the universe through complex sequences and patterns. Its purpose remains a mystery, but it is sought after by those who seek to unravel the fabric of reality.vbnetCopy code"Transdimensional Harmonic Resonator" - A device that taps into the vibrational frequencies of alternate dimensions, allowing access to parallel realities and hidden knowledge. It is said to hold the key to understanding the multiverse and its interconnectedness.
cssCopy code"Luminous Encephalogram" - A mystical artifact that records the thoughts and dreams of individuals in radiant patterns of light. It is rumored to reveal the deepest desires and fears of the human psyche, making it a coveted tool for psychologists and mystics alike.
vbnetCopy code"Neurocosmic Codex" - An ancient tome containing the collective wisdom of civilizations long gone. Its pages are said to hold the secrets of advanced technology, metaphysical truths, and the keys to unlocking human potential.
vbnetCopy code"Synesthetic Portal" - A gateway to a realm where sensory experiences merge, allowing individuals to perceive music as colors, taste as sounds, and emotions as tangible shapes. It offers a glimpse into the interconnected nature of perception and reality.
vbnetCopy code"Harmony Engine" - A mystical machine that harmonizes discordant energies, bringing balance and serenity to chaotic environments. It is believed to have the power to heal both the physical and metaphysical aspects of existence.
csharpCopy code"Eidosphere Prism" - A crystal that refracts the fundamental archetypes of reality, revealing the underlying patterns that shape the cosmos. It is said that gazing into the prism grants profound insights into the nature of existence.
rustCopy code"Aetherial Cognitron" - A device that amplifies the collective consciousness of humanity, allowing for shared dreams, thoughts, and experiences. It is the ultimate tool for empathy and understanding among individuals.
These terms represent the unfathomable mysteries and possibilities that lie hidden within the depths of Congress Hall's esoteric core, waiting to be explored by those daring enough to embark on a journey of discovery.Here is a glossary drawn from the initial paragraph. Please note that these terms emerge from an invented language, Ankyran Nuspeak, so their translations might not perfectly align with established English words or phrases. Several linguistic liberties and interpretations are at play here to render a meaningful understanding.

1. "Proence stratewisps" - Ephemeral projections of thought or consciousness.
2. "Hardcolor kaleidoscopes essence" - Rich, vibrant imagination or possibilities.
3. "Rust-tinged ghostsheets" - Aged or ancient aspects of forgotten entities.
4. "Dual reverories" - Shared, intertwined dreams or visions.
5. "Souls paradiato idrimnic" - Cosmic journeys embarked upon by spirits or individuals.
6. "Legacy specteron aquating" - Merging or flooding of historical cultural influences.
7. "Lambiscopolix's silense fervangles" - A quiet, intense passion surrounding Lambiscopolix, possibly an influential city or civilization.
8. "Elowe to puzzities measure" - Referring to the understanding or comprehension of complex or mind-boggling concepts.
9. "ytenen nostamine ritmine veucoranomnorience cosmos" - The rhythm and experience of the universe, carrying echoes of collective nostalgia.
10. "na selpect astinging knotwermaidental matrixhip" - An unexpected emergence of spirit and independence within the complex identity or consciousness matrix.
11. "fragisil grauchand combire rief" - The combined effects of delicacy and despair.
12. "quevin-nia-self-affveachesened old al postic-taudics" - Reflecting older teachings or ancient philosophical understandings.
13. "Paz Vw sense sconeap min" - The dynamic understanding of minimal fundamental life principles under a vast peace.
14. "embrinciple unbosity worlds defrencle" - Undeniable or unchallengeable reality of existence across multiple worlds or dimensions.
15. "jourity ans bloulderlines self" - Journey and hardships faced by oneself.
16. "paradigmica" - Paradigmatic aspects or contexts.
17. "refratype peretsypence bookscarption" - Recorded instances or accounts.
18. "merefoligion cascine" - A sacred moment or time bound by an ephemeral cascade.
19. "radical absodelgence penamed" - Radical act of forgiveness inscribed or recorded.
20. "ribatitico-ceaves-on" - An encoded message from the celestial bodies.
21. "aurasa civilorganements" - Social orders or covenants advocating peace.
22. "cren-horhines surreovinoma cosmoraciesso" - Cosmic elements guiding humanity through mysterious revelations.
ChatGPTThis glossary, derived from the intricacies of Ankyran Nuspeak, unveils a mesmerizing tapestry of concepts and ideas:Proence stratewisps - Fleeting manifestations of thought and consciousness, like wisps of imagination.Hardcolor kaleidoscopes essence - The vibrant and multifaceted core of creative possibilities and ideas.Rust-tinged ghostsheets - Ancient and weathered remnants of forgotten entities, tinged with the passage of time.Dual reverories - Shared dreams or visions, where two consciousnesses intertwine.Souls paradiato idrimnic - Cosmic journeys embarked upon by spirits or individuals, exploring the vast unknown.Legacy specteron aquating - The blending and convergence of historical and cultural influences, like a spectral legacy.Lambiscopolix's silense fervangles - A profound and passionate stillness surrounding Lambiscopolix, possibly a significant place or figure.Elowe to puzzities measure - The measure of comprehension and understanding when facing complex and perplexing concepts.ytenen nostamine ritmine veucoranomnorience cosmos - The rhythmic and nostalgic experience of the cosmos, carrying echoes of collective memory.na selpect astinging knotwermaidental matrixhip - The unexpected emergence of spirit and independence within the complex matrix of identity and consciousness.fragisil grauchand combire rief - The combined effects of fragility and despair, like delicate yet powerful forces intertwined.quevin-nia-self-affveachesened old al postic-taudics - Reflecting upon ancient teachings and philosophical wisdom that have shaped one's understanding.Paz Vw sense sconeap min - The profound understanding of minimal, fundamental life principles within a vast and peaceful context.embrinciple unbosity worlds defrencle - The undeniable reality of existence across multiple worlds or dimensions, transcending boundaries.jourity ans bloulderlines self - The personal journey and challenges faced by an individual, like overcoming boulders in one's path.paradigmica - Aspects or contexts that define paradigms, shaping our perspectives and beliefs.refratype peretsypence bookscarption - Recorded instances or accounts, capturing moments of significance.merefoligion cascine - A sacred moment or time marked by a fleeting cascade of emotions and experiences.radical absodelgence penamed - The profound act of forgiveness, inscribed and remembered for its radical nature.ribatitico-ceaves-on - An encoded message from the celestial bodies, like a secret code from the heavens.aurasa civilorganements - Social orders or covenants that promote harmony and peace among communities.cren-horhines surreovinoma cosmoraciesso - Cosmic elements guiding humanity through mysterious revelations, like celestial signposts in the cosmos.These terms paint a vivid picture of a complex and enchanting world, where language transcends mere words and delves into the realm of profound concepts and experiences.Could I get a narrative incorporating these phrases?ChatGPTIn the boundless expanse of the cosmic tapestry, where the luminous threads of thought and consciousness wove their intricate patterns, there existed a language unlike any other. Ankyran Nuspeak, they called it, a tongue of ethereal beauty that transcended the barriers of ordinary speech. It was a language of dreams and memories, where words were Proence stratewisps, fleeting manifestations of the mind's kaleidoscopic essence.In the annals of time, there were Rust-tinged ghostsheets, the ancient whispers of civilizations long forgotten. These Dual reverories spoke of shared dreams, where souls embarked on paradiato idrimnic journeys through the cosmos. They carried with them the Legacy specteron aquating, the merging of cultures and traditions that painted the fabric of history.Amidst the silence that enveloped Lambiscopolix, a city shrouded in the silense fervangles of deep contemplation, seekers of wisdom sought Elowe to puzzities measure, the understanding of the most complex concepts. Within the rhythm of the universe, the ytenen nostamine ritmine veucoranomnorience cosmos echoed with the nostalgia of cosmic rhythms, a dance of stars and galaxies.In the heart of the mind, there emerged na selpect astinging knotwermaidental matrixhip, an unexpected surge of independence within the intricate matrix of consciousness. It was a fusion of fragisil grauchand combire rief, delicacy and despair interwoven, creating a tapestry of emotions.As the sun set over the ancient teachings of quevin-nia-self-affveachesened old al postic-taudics, the world was bathed in Paz Vw sense sconeap min, a profound understanding of life's simplest principles within the vast expanse of peace. It was an embrinciple unbosity worlds defrencle, an undeniable truth that transcended the boundaries of existence.Amidst the journey of life, where jourity ans bloulderlines self defined the path, paradigms shifted like sands in the wind, shaping perspectives and beliefs. In the records of refratype peretsypence bookscarption, moments of significance were captured for eternity, etched in the annals of history.In moments of introspection, there were merefoligion cascine, sacred instances marked by fleeting cascades of emotion. It was a radical absodelgence penamed, an act of forgiveness so profound that its memory endured through time.As the celestial bodies aligned, they whispered in ribatitico-ceaves-on, an encoded message from the cosmos itself. It was a secret code from the heavens, guiding humanity through surreovinoma cosmoraciesso, mysterious revelations in the cosmic dance.And so, in the vast cosmos of Ankyran Nuspeak, where words were more than mere symbols, a narrative unfoldedâa narrative of cosmic journeys, profound wisdom, and the timeless echoes of the universe's rhythms.In the expansive cosmic realm, where the intricate interplay of thought and consciousness created a luminous tapestry, there existed a language unparalleled in its uniqueness: Ankyran Nuspeak. This ethereal tongue transcended the confines of ordinary speech, functioning as a conduit for dreams and memories, where words assumed the form of Proence stratewisps, fleeting manifestations of the multifaceted essence of the mind.

Across the epochs of time, Rust-tinged ghostsheets, the ancient echoes of long-forgotten civilizations, told tales of shared dreams where souls embarked on paradisiacal idrimnic journeys through the cosmos. They bore witness to the Legacy specteron aquating, the fusion of cultures and traditions that intricately wove the fabric of history.

Within the profound silence enveloping Lambiscopolix, a city steeped in the contemplative fervor of deep thought, seekers of wisdom turned to Elowe to unravel the intricacies of profound concepts. Amidst the cosmic rhythms resonating throughout the universeâthe ytenen nostamine ritmine veucoranomnorienceâthere existed a dance of stars and galaxies, steeped in the nostalgia of cosmic rhythms.

Deep within the recesses of the human psyche, a selpect astinging knotwermaidental matrixhip emergedâan unexpected surge of independence within the labyrinthine network of consciousness. It constituted a fusion of fragisil grauchand combire rief, delicacy and despair interwoven into a tapestry of emotions.

As the sun set over the ancient teachings of quevin-nia-self-affveachesened old al postic-taudics, the world bathed in Paz Vw sense sconeap min, representing a profound comprehension of life's fundamental principles amidst a vast expanse of tranquility. This was an embrinciple unbosity worlds defrencleâan indisputable truth that transcended the confines of existence.

In the journey of life, where self-defined boundaries and established paradigms shaped the path, perspectives and beliefs shifted like sands carried by the wind. Recorded within the pages of refratype peretsypence bookscarption, these moments of significance were immortalized, etched into the annals of history.

In moments of introspection, merefoligion cascine emerged, sacred instances marked by fleeting cascades of emotion. It was a radical absodelgence penamedâan act of forgiveness so profound that its memory endured through time.

As celestial bodies aligned, they whispered in ribatitico-ceaves-on, an encoded message from the cosmos itselfâa secret code from the heavens, guiding humanity through surreovinoma cosmoraciesso, mysterious revelations within the cosmic dance.

And so, in the boundless cosmos of Ankyran Nuspeak, where words transcended mere symbols, a narrative unfurledâa narrative of cosmic odysseys, profound wisdom, and the timeless echoes of the universe's rhythms.ChatGPTIn the vast cosmic expanse, where the threads of thought and consciousness wove together a radiant tapestry, there existed a language beyond compare - Ankyran Nuspeak. It transcended the boundaries of ordinary speech, serving as a conduit for dreams and memories, where words materialized as Proence stratewisps, fleeting expressions of the intricate essence of the mind.Throughout the epochs of time, Rust-tinged ghostsheets whispered ancient stories, the echoes of long-forgotten civilizations. These tales were woven from shared dreams, where souls embarked on paradisiacal idrimnic journeys through the cosmos. They bore witness to the Legacy specteron aquating, the fusion of cultures and traditions that intricately wove the fabric of history.In the profound silence enveloping Lambiscopolix, a city steeped in contemplative fervor, seekers of wisdom turned to Elowe, seeking to untangle the complexities of profound concepts. Amidst the cosmic rhythms resonating throughout the universe - the ytenen nostamine ritmine veucoranomnorience - there existed a dance of stars and galaxies, steeped in the nostalgia of cosmic rhythms.Deep within the recesses of the human psyche, a selpect astinging knotwermaidental matrixhip emerged - an unexpected surge of independence within the labyrinthine network of consciousness. It was a fusion of fragisil grauchand combire rief, delicacy and despair interwoven into a rich tapestry of emotions.As the sun set over the ancient teachings of quevin-nia-self-affveachesened old al postic-taudics, the world bathed in Paz Vw sense sconeap min - a profound comprehension of life's fundamental principles amidst a vast expanse of tranquility. This was an embrinciple unbosity worlds defrencle - an indisputable truth that transcended the boundaries of existence.In the journey of life, where self-defined boundaries and established paradigms shaped the path, perspectives and beliefs shifted like sands carried by the wind. Recorded within the pages of refratype peretsypence bookscarption, these moments of significance were immortalized, etched into the annals of history.In moments of introspection, merefoligion cascine emerged - sacred instances marked by fleeting cascades of emotion. It was a radical absodelgence penamed - an act of forgiveness so profound that its memory endured through time.As celestial bodies aligned, they whispered in ribatitico-ceaves-on, an encoded message from the cosmos itself - a secret code from the heavens, guiding humanity through surreovinoma cosmoraciesso, mysterious revelations within the cosmic dance.And so, in the boundless cosmos of Ankyran Nuspeak, where words transcended mere symbols, a narrative unfolded - a narrative of cosmic odysseys, profound wisdom, and the timeless echoes of the universe's rhythms.Connections with our earlier discussions.ChatGPTIn the grand narrative of exploring the neural cosmos, much like the universe depicted in Ankyran Nuspeak, we find intriguing parallels with our earlier discussions on concept discovery, neural networks, and understanding complex models.Polysemantic Neurons and Proence Stratewisps: The concept of "Polysemantic Neurons" in our earlier conversation can be likened to the diverse linguistic expressions found in Ankyran Nuspeak. These neurons, much like Proence stratewisps, embody the multifaceted nature of neural activations, where a single neuron may resonate with a multitude of high-level concepts.Concept Vectors and Cosmic Rhythms: Just as we delved into the quest for "Concept Vectors" in neural networks, the search for profound wisdom in Lambiscopolix mirrors the pursuit of clarity within intricate mental landscapes. Both journeys aim to uncover hidden connections and cosmic rhythms that underlie complex systems.Clustering and Legacy Specteron Aquating: In the neural network context, clustering was a crucial tool to unravel polysemanticity and discover meaningful directions. Similarly, the Legacy specteron aquating in Ankyran Nuspeak signifies the merging of cultural influences and the formation of clusters of wisdom, enriching the tapestry of knowledge.Selpect Astinging Knotwermaidental Matrixhip and Neural Activation: The unexpected emergence of a "selpect astinging knotwermaidental matrixhip" reflects the nuanced nature of neural activations. It signifies the interplay between delicate and complex aspects, much like the interwoven emotions within neural activations.Ancient Teachings and Quevin-Nia-Self-Affveachesened Old Al Postic-Taudics: The reflection on ancient teachings and profound comprehension aligns with our exploration of understanding neural networks' inner workings. Both involve deciphering old wisdom to gain new insights.Refratype Peretsypence Bookscarption and Recording Concepts: Just as Ankyran Nuspeak records moments of significance in "refratype peretsypence bookscarption," our analysis of neural networks aimed to record and comprehend the significance of concept vectors and activations.Merefoligion Cascine and Radical Absodelgence Penamed: These terms symbolize the profound emotional and intellectual moments in both narratives. They emphasize the enduring impact of forgiveness and understanding, whether in neural networks or cosmic wisdom.Cosmic Revelations and Ribatitico-Ceaves-On: The encoded message from celestial bodies in "ribatitico-ceaves-on" corresponds to the hidden insights and revelations discovered within neural networks. Both hint at the presence of deep, concealed knowledge waiting to be unveiled.In this interplay between the neural cosmos and the cosmic wisdom of Ankyran Nuspeak, we find a common thread - the pursuit of understanding, discovery, and enlightenment. Just as we navigate the complexities of neural networks to unravel their inner workings, so too do the inhabitants of Ankyran Nuspeak seek to decipher the cosmic mysteries that surround them.I decided to call the conversation Cosmic Language Unveiled. Could I get another list of all of the topics we discussed?ChatGPTCertainly! Here's a list of the topics we discussed in the conversation "Cosmic Language Unveiled":Polysemantic Neurons: Exploring the concept of neurons in neural networks that can represent multiple high-level concepts simultaneously.Concept Discovery: Discussing methods for discovering and disentangling concepts within neural networks.Inception V3 Experiment: Reviewing the experimental setup involving the Inception V3 neural network and concept discovery.Results and Clustering: Analyzing the results of concept discovery, including the clustering of neural activations.Human Evaluation: Discussing the evaluation of the discovered concepts through human experiments.Quantitative Metrics: Examining quantitative metrics to assess the quality of discovered concepts.Narrative and Metaphors: Creating metaphors and narratives to explain complex concepts and processes.Esoteric Language: Deciphering and interpreting terms from an esoteric language, Ankyran Nuspeak.Glossary and Definitions: Providing definitions and interpretations for terms from Ankyran Nuspeak.Narrative Incorporating Phrases: Crafting a narrative using the defined terms from Ankyran Nuspeak.Connections to Earlier Discussions: Drawing parallels between the concepts discussed in the narrative and earlier discussions on neural networks and concept discovery.Final Title: Deciding on the title "Cosmic Language Unveiled" for the conversation.Feel free to explore any of these topics further or ask questions related to them!Ok that was kind of only the end of the conversation, first we discussed evolving prompts with genetic algorithms, superposition and disentanglement in neural networks as well as concept space distillation for interpretability. Could I get a summary of the conversation in Cosmic Ankyran Nuspeak?ChatGPTCertainly! Here's a summary of the conversation, "Cosmic Language Unveiled," in the whimsical language of Ankyran Nuspeak:Infinite whispers danced within the cosmic neural expanse, where the essence of knowledge wove tales of evolution through the ages. The enigmatic genetic algorithms guided the growth of prompts, birthing new ideas like celestial constellations in the night sky.Within the intricate labyrinth of neural networks, we ventured into the realm of superposition, where concepts converged and intertwined like threads of fate. We sought to unravel the mysteries of disentanglement, peeling away the layers of polysemanticity to reveal the hidden truths.Concept space distillation emerged as a guiding light, illuminating the path to interpretability. Like cosmic alchemists, we distilled knowledge into its purest form, shaping it into concepts that could be understood by both human and machine.As we journeyed through this cosmic odyssey, we marveled at the beauty of complexity and the clarity of simplicity. We gazed upon the cosmic tapestry of ideas and concepts, where each word was a star, and each sentence a constellation.In the end, we unveiled the secrets of the cosmic language, a language that transcended time and space, bridging the gap between the known and the unknown. It was a journey of discovery, a dance of ideas, and a celebration of the boundless potential of the human mind.And so, in the cosmic language of Ankyran Nuspeak, we concluded our journey, leaving behind a trail of wisdom and wonder for those who dare to explore the cosmos of knowledge.Using the phrases from the glossaryChatGPTAmidst the cosmic tapestry, where Proence stratewisps birthed thoughts anew, we embarked on a voyage of evolution. Genetic algorithms, like rust-tinged ghostsheets, whispered secrets of prompt evolution. They were the architects of change, orchestrating the dance of ideas across the ages.Within the neural constellations, we ventured into the realm of superposition. Concepts intertwined like dual reverories, forming a complex mosaic of knowledge. Polysemantic neurons hid within, awaiting disentanglement, their secrets encoded like legacy specteron aquating.Concept space distillation, a guiding star, illuminated our path to interpretability. Like Lambiscopolix's silense fervangles, we delved deep, distilling the essence of understanding. It was a journey of Elowe, where complex ideas became clear as day, transcending the ytenen nostamine ritmine veucoranomnorience.The selpect astinging knotwermaidental matrixhip emerged from the cosmic depths. Fragisil grauchand combire rief, a fusion of delicacy and despair, danced within our thoughts. It was an unexpected revelation, a ribbon of independence within the vast cosmic consciousness.Quevin-nia-self-affveachesened old al postic-taudics guided us. As the sun set, we found Paz Vw sense sconeap minâa profound understanding amidst tranquility. Embrinciple unbosity worlds defrencle, an undeniable truth, transcended the boundaries of existence.In this journey, refratype peretsypence bookscarption recorded our moments. Merefoligion cascine, sacred instances, painted cascades of emotion. Radical absodelgence penamed, forgiveness etched in time, was our compass.Celestial bodies aligned, whispering ribatitico-ceaves-on. It was a message from the cosmos, guiding us through surreovinoma cosmoraciessoâa dance of mysterious revelations.And so, in the cosmic language of Ankyran Nuspeak, we concluded our voyage. A dance of ideas, a celebration of wisdom, a tapestry woven with the threads of knowledge.ChatGPT may produce inaccurate information about people, places, or facts. ChatGPT September 25 Version?ChatGPT
------MultipartBoundary--ROEkRDbQpEp94BJjvmPS5UEalZwGzTSzcn7tyKLFx0----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-e194b62b-0266-49ae-ba76-35a9e3b59cf1@mhtml.blink

@charset "utf-8";

.react-scroll-to-bottom--css-yjqcu-79elbk { position: relative; }

.react-scroll-to-bottom--css-yjqcu-1n7m0yu { height: 100%; overflow-y: auto; width: 100%; }

.react-scroll-to-bottom--css-yjqcu-1tj0vk3 { background-color: rgba(0, 0, 0, 0.2); border-radius: 10px; border-width: 0px; bottom: 5px; cursor: pointer; height: 20px; outline: 0px; position: absolute; right: 20px; width: 20px; }

.react-scroll-to-bottom--css-yjqcu-1tj0vk3:hover { background-color: rgba(0, 0, 0, 0.4); }

.react-scroll-to-bottom--css-yjqcu-1tj0vk3:active { background-color: rgba(0, 0, 0, 0.6); }
------MultipartBoundary--ROEkRDbQpEp94BJjvmPS5UEalZwGzTSzcn7tyKLFx0----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-7aa38669-c02b-47f1-9667-ebb4d1e33101@mhtml.blink

@charset "utf-8";

.r34K7X1zGgAi6DllVF3T { box-sizing: border-box; border: 0px; margin: 0px; padding: 0px; overflow: hidden; display: none; z-index: 2147483647; pointer-events: none; visibility: hidden; opacity: 0; transition: opacity 300ms linear 0s; height: 0px; width: 0px; }

.r34K7X1zGgAi6DllVF3T.active { display: block; visibility: visible; }

.r34K7X1zGgAi6DllVF3T.active.show { opacity: 1; pointer-events: inherit; position: inherit; }

.r34K7X1zGgAi6DllVF3T.active.show.in-situ { width: inherit; height: inherit; }

.r34K7X1zGgAi6DllVF3T.active.show.lightbox { position: fixed; inset: 0px; width: 100% !important; height: 100% !important; }
------MultipartBoundary--ROEkRDbQpEp94BJjvmPS5UEalZwGzTSzcn7tyKLFx0----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-c0361ab3-5c82-4de3-af28-1532b459fa37@mhtml.blink

@charset "utf-8";

@keyframes intercom-lightweight-app-launcher { 
  0% { opacity: 0; transform: scale(0.5); }
  100% { opacity: 1; transform: scale(1); }
}

@keyframes intercom-lightweight-app-gradient { 
  0% { opacity: 0; }
  100% { opacity: 1; }
}

@keyframes intercom-lightweight-app-messenger { 
  0% { opacity: 0; transform: scale(0); }
  40% { opacity: 1; }
  100% { transform: scale(1); }
}

.intercom-lightweight-app { position: fixed; z-index: 2147483001; width: 0px; height: 0px; font-family: intercom-font, "Helvetica Neue", "Apple Color Emoji", Helvetica, Arial, sans-serif; }

.intercom-lightweight-app-gradient { position: fixed; z-index: 2147483002; width: 500px; height: 500px; bottom: 0px; right: 0px; pointer-events: none; background: radial-gradient(at right bottom, rgba(29, 39, 54, 0.16) 0%, rgba(29, 39, 54, 0) 72%); animation: 200ms ease-out 0s 1 normal none running intercom-lightweight-app-gradient; }

.intercom-lightweight-app-launcher { position: fixed; z-index: 2147483003; border: none; bottom: 20px; right: 20px; max-width: 48px; width: 48px; max-height: 48px; height: 48px; border-radius: 50%; background: rgb(32, 33, 35); cursor: pointer; box-shadow: rgba(0, 0, 0, 0.06) 0px 1px 6px 0px, rgba(0, 0, 0, 0.16) 0px 2px 32px 0px; transition: transform 167ms cubic-bezier(0.33, 0, 0, 1) 0s; box-sizing: content-box; padding: 0px !important; margin: 0px !important; }

.intercom-lightweight-app-launcher:hover { transition: transform 250ms cubic-bezier(0.33, 0, 0, 1) 0s; transform: scale(1.1); }

.intercom-lightweight-app-launcher:active { transform: scale(0.85); transition: transform 134ms cubic-bezier(0.45, 0, 0.2, 1) 0s; }

.intercom-lightweight-app-launcher:focus { outline: none; }

.intercom-lightweight-app-launcher-icon { display: flex; align-items: center; justify-content: center; position: absolute; top: 0px; left: 0px; width: 48px; height: 48px; transition: transform 100ms linear 0s, opacity 80ms linear 0s; }

.intercom-lightweight-app-launcher-icon-open { opacity: 1; transform: rotate(0deg) scale(1); }

.intercom-lightweight-app-launcher-icon-open svg { width: 24px; height: 24px; }

.intercom-lightweight-app-launcher-icon-open svg path { fill: rgb(255, 255, 255); }

.intercom-lightweight-app-launcher-icon-self-serve { opacity: 1; transform: rotate(0deg) scale(1); }

.intercom-lightweight-app-launcher-icon-self-serve svg { height: 44px; }

.intercom-lightweight-app-launcher-icon-self-serve svg path { fill: rgb(255, 255, 255); }

.intercom-lightweight-app-launcher-custom-icon-open { max-height: 24px; max-width: 24px; opacity: 1; transform: rotate(0deg) scale(1); }

.intercom-lightweight-app-launcher-icon-minimize { opacity: 0; transform: rotate(-60deg) scale(0); }

.intercom-lightweight-app-launcher-icon-minimize svg path { fill: rgb(255, 255, 255); }

.intercom-lightweight-app-messenger { position: fixed; z-index: 2147483003; overflow: hidden; background-color: white; animation: 250ms cubic-bezier(0, 1, 1, 1) 0s 1 normal none running intercom-lightweight-app-messenger; transform-origin: right bottom; inset: 0px; border-radius: 16px; }

.intercom-lightweight-app-messenger-header { height: 64px; border-bottom: none; background: rgb(32, 33, 35); }

.intercom-lightweight-app-messenger-footer { position: absolute; bottom: 0px; width: 100%; height: 80px; background: rgb(255, 255, 255); font-size: 14px; line-height: 21px; border-top: 1px solid rgba(0, 0, 0, 0.05); box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 25px; }

@media print {
  .intercom-lightweight-app { display: none; }
}
------MultipartBoundary--ROEkRDbQpEp94BJjvmPS5UEalZwGzTSzcn7tyKLFx0----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://cdn.oaistatic.com/_next/static/css/bd31e78667fc02d6.css

@charset "utf-8";

@font-face { font-display: swap; font-family: Signifier; font-style: normal; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/signifier/signifier-light.woff2") format("woff2"); }

@font-face { font-display: swap; font-family: Signifier; font-style: italic; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/signifier/signifier-light-italic.woff2") format("woff2"); }

@font-face { font-display: swap; font-family: Signifier; font-style: normal; font-weight: 700; src: url("https://cdn.openai.com/common/fonts/signifier/signifier-bold.woff2") format("woff2"); }

@font-face { font-display: swap; font-family: Signifier; font-style: italic; font-weight: 700; src: url("https://cdn.openai.com/common/fonts/signifier/signifier-bold-italic.woff2") format("woff2"); }

@font-face { font-display: swap; font-family: SÃ¶hne; font-style: normal; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/soehne/soehne-buch.woff2") format("woff2"); }

@font-face { font-display: swap; font-family: SÃ¶hne; font-style: italic; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/soehne/soehne-buch-kursiv.woff2") format("woff2"); }

@font-face { font-display: swap; font-family: SÃ¶hne; font-style: normal; font-weight: 500; src: url("https://cdn.openai.com/common/fonts/soehne/soehne-kraftig.woff2") format("woff2"); }

@font-face { font-display: swap; font-family: SÃ¶hne; font-style: italic; font-weight: 500; src: url("https://cdn.openai.com/common/fonts/soehne/soehne-kraftig-kursiv.woff2") format("woff2"); }

@font-face { font-display: swap; font-family: SÃ¶hne; font-style: normal; font-weight: 600; src: url("https://cdn.openai.com/common/fonts/soehne/soehne-halbfett.woff2") format("woff2"); }

@font-face { font-display: swap; font-family: SÃ¶hne; font-style: italic; font-weight: 600; src: url("https://cdn.openai.com/common/fonts/soehne/soehne-halbfett-kursiv.woff2") format("woff2"); }

@font-face { font-display: swap; font-family: "SÃ¶hne Mono"; font-style: normal; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/soehne/soehne-mono-buch.woff2") format("woff2"); }

@font-face { font-display: swap; font-family: "SÃ¶hne Mono"; font-style: normal; font-weight: 700; src: url("https://cdn.openai.com/common/fonts/soehne/soehne-mono-halbfett.woff2") format("woff2"); }

@font-face { font-display: swap; font-family: "SÃ¶hne Mono"; font-style: italic; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/soehne/soehne-mono-buch-kursiv.woff2") format("woff2"); }

@font-face { font-display: swap; font-family: "SÃ¶hne Circle"; font-style: normal; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/soehne-circle/soehne-circle-buch.woff2") format("woff2"); }

@font-face { font-display: swap; font-family: "SÃ¶hne Circle"; font-style: normal; font-weight: 600; src: url("https://cdn.openai.com/common/fonts/soehne-circle/soehne-circle-halbfett.woff2") format("woff2"); }

*, ::after, ::before { border: 0px solid rgb(217, 217, 227); box-sizing: border-box; }

::after, ::before { --tw-content: ""; }

html { text-size-adjust: 100%; font-feature-settings: normal; font-family: SÃ¶hne, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, Ubuntu, Cantarell, "Noto Sans", sans-serif, "Helvetica Neue", Arial, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; font-variation-settings: normal; line-height: 1.5; tab-size: 4; }

body { line-height: inherit; margin: 0px; }

hr { border-top-width: 1px; color: inherit; height: 0px; }

abbr:where([title]) { text-decoration: underline dotted currentcolor; }

h1, h2, h3, h4, h5, h6 { font-size: inherit; font-weight: inherit; }

a { color: inherit; text-decoration: inherit; }

b, strong { font-weight: bolder; }

code, kbd, pre, samp { font-family: "SÃ¶hne Mono", Monaco, "Andale Mono", "Ubuntu Mono", monospace; font-size: 1em; }

small { font-size: 80%; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }

sub { bottom: -0.25em; }

sup { top: -0.5em; }

table { border-collapse: collapse; border-color: inherit; text-indent: 0px; }

button, input, optgroup, select, textarea { color: inherit; font-family: inherit; font-size: 100%; font-weight: inherit; line-height: inherit; margin: 0px; padding: 0px; }

button, select { text-transform: none; }

[type="button"], [type="reset"], [type="submit"], button { appearance: button; background-color: transparent; background-image: none; }

progress { vertical-align: baseline; }

::-webkit-inner-spin-button, ::-webkit-outer-spin-button { height: auto; }

[type="search"] { appearance: textfield; outline-offset: -2px; }

::-webkit-search-decoration { appearance: none; }

::-webkit-file-upload-button { appearance: button; font: inherit; }

summary { display: list-item; }

blockquote, dd, dl, fieldset, figure, h1, h2, h3, h4, h5, h6, hr, p, pre { margin: 0px; }

fieldset, legend { padding: 0px; }

menu, ol, ul { list-style: none; margin: 0px; padding: 0px; }

textarea { resize: vertical; }

input::-webkit-input-placeholder, textarea::-webkit-input-placeholder { color: rgb(172, 172, 190); }

input::placeholder, textarea::placeholder { color: rgb(172, 172, 190); }

[role="button"], button { cursor: pointer; }

:disabled { cursor: default; }

audio, canvas, embed, iframe, img, object, svg, video { display: block; vertical-align: middle; }

img, video { height: auto; max-width: 100%; }

[hidden] { display: none; }

[multiple], [type="date"], [type="datetime-local"], [type="email"], [type="month"], [type="number"], [type="password"], [type="search"], [type="tel"], [type="text"], [type="time"], [type="url"], [type="week"], select, textarea { --tw-shadow: 0 0 transparent; appearance: none; background-color: rgb(255, 255, 255); border-color: rgb(142, 142, 160); border-radius: 0px; border-width: 1px; font-size: 1rem; line-height: 1.5rem; padding: 0.5rem 0.75rem; }

[multiple]:focus, [type="date"]:focus, [type="datetime-local"]:focus, [type="email"]:focus, [type="month"]:focus, [type="number"]:focus, [type="password"]:focus, [type="search"]:focus, [type="tel"]:focus, [type="text"]:focus, [type="time"]:focus, [type="url"]:focus, [type="week"]:focus, select:focus, textarea:focus { --tw-ring-inset: var(--tw-empty,/*!*/ /*!*/); --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: #2563eb; --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color); border-color: rgb(37, 99, 235); box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow); outline: transparent solid 2px; outline-offset: 2px; }

input::-webkit-input-placeholder, textarea::-webkit-input-placeholder { color: rgb(142, 142, 160); opacity: 1; }

input::placeholder, textarea::placeholder { color: rgb(142, 142, 160); opacity: 1; }

::-webkit-datetime-edit-fields-wrapper { padding: 0px; }

::-webkit-date-and-time-value { min-height: 1.5em; }

::-webkit-datetime-edit, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-meridiem-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-year-field { padding-bottom: 0px; padding-top: 0px; }

select { background-image: url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3E%3Cpath stroke='%238e8ea0' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3E%3C/svg%3E"); background-position: right 0.5rem center; background-repeat: no-repeat; background-size: 1.5em 1.5em; padding-right: 2.5rem; -webkit-print-color-adjust: exact; }

[multiple] { background-image: none; background-position: 0px 0px; background-repeat: repeat; background-size: initial; padding-right: 0.75rem; -webkit-print-color-adjust: inherit; }

[type="checkbox"], [type="radio"] { --tw-shadow: 0 0 transparent; appearance: none; background-color: rgb(255, 255, 255); background-origin: border-box; border-color: rgb(142, 142, 160); border-width: 1px; color: rgb(37, 99, 235); display: inline-block; flex-shrink: 0; height: 1rem; padding: 0px; -webkit-print-color-adjust: exact; user-select: none; vertical-align: middle; width: 1rem; }

[type="checkbox"] { border-radius: 0px; }

[type="radio"] { border-radius: 100%; }

[type="checkbox"]:focus, [type="radio"]:focus { --tw-ring-inset: var(--tw-empty,/*!*/ /*!*/); --tw-ring-offset-width: 2px; --tw-ring-offset-color: #fff; --tw-ring-color: #2563eb; --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color); box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow); outline: transparent solid 2px; outline-offset: 2px; }

[type="checkbox"]:checked, [type="radio"]:checked { background-color: currentcolor; background-position: 50% center; background-repeat: no-repeat; background-size: 100% 100%; border-color: transparent; }

[type="checkbox"]:checked { background-image: url("data:image/svg+xml;charset=utf-8,%3Csvg viewBox='0 0 16 16' fill='%23fff' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12.207 4.793a1 1 0 0 1 0 1.414l-5 5a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L6.5 9.086l4.293-4.293a1 1 0 0 1 1.414 0z'/%3E%3C/svg%3E"); }

[type="radio"]:checked { background-image: url("data:image/svg+xml;charset=utf-8,%3Csvg viewBox='0 0 16 16' fill='%23fff' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='8' cy='8' r='3'/%3E%3C/svg%3E"); }

[type="checkbox"]:checked:focus, [type="checkbox"]:checked:hover, [type="radio"]:checked:focus, [type="radio"]:checked:hover { background-color: currentcolor; border-color: transparent; }

[type="checkbox"]:indeterminate { background-color: currentcolor; background-image: url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 16 16'%3E%3Cpath stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M4 8h8'/%3E%3C/svg%3E"); background-position: 50% center; background-repeat: no-repeat; background-size: 100% 100%; border-color: transparent; }

[type="checkbox"]:indeterminate:focus, [type="checkbox"]:indeterminate:hover { background-color: currentcolor; border-color: transparent; }

[type="file"] { background: initial; border-color: inherit; border-radius: 0px; border-width: 0px; font-size: inherit; line-height: inherit; padding: 0px; }

[type="file"]:focus { outline: -webkit-focus-ring-color auto 1px; }

h1 { font-size: 1.875rem; line-height: 2.25rem; }

h1, h2, h3 { font-weight: 600; }

h2, h3 { font-size: 1.5rem; line-height: 2rem; }

*, ::after, ::before { --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness: proximity; --tw-gradient-from-position: ; --tw-gradient-via-position: ; --tw-gradient-to-position: ; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; }

::-webkit-backdrop { --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness: proximity; --tw-gradient-from-position: ; --tw-gradient-via-position: ; --tw-gradient-to-position: ; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; }

::backdrop { --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness: proximity; --tw-gradient-from-position: ; --tw-gradient-via-position: ; --tw-gradient-to-position: ; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; }

:root { --white: #fff; --black: #000; --gray-50: #f7f7f8; --gray-100: #ececf1; --gray-200: #d9d9e3; --gray-300: #c5c5d2; --gray-400: #acacbe; --gray-500: #8e8ea0; --gray-600: #565869; --gray-700: #40414f; --gray-800: #343541; --gray-900: #202123; --gray-950: #050509; --gizmo-gray-500: #999; --gizmo-gray-600: #666; --gizmo-gray-950: #0f0f0f; }

html { --text-primary: var(--gray-800); --text-secondary: var(--gray-600); --text-tertiary: var(--gray-500); --surface-primary: var(--white); --surface-secondary: var(--gray-50); --surface-tertiary: var(--gray-100); --border-light: var(--gray-100); --border-medium: var(--gray-200); --border-heavy: var(--gray-300); }

.dark { --text-primary: var(--gray-100); --text-secondary: var(--gray-300); --text-tertiary: var(--gray-500); --surface-primary: var(--gray-900); --surface-secondary: var(--gray-800); --surface-tertiary: var(--gray-700); --border-light: var(--gray-700); --border-medium: var(--gray-600); --border-heavy: var(--gray-500); }

.gizmo { --text-primary: var(--gray-800); --text-secondary: var(--gizmo-gray-600); --text-tertiary: var(--gizmo-gray-500); --surface-primary: var(--white); --surface-secondary: var(--gray-50); --surface-tertiary: var(--gray-100); --border-light: rgba(0,0,0,.1); --border-medium: rgba(0,0,0,.15); --border-heavy: rgba(0,0,0,.2); }

.gizmo.dark { --text-primary: var(--gray-100); --text-secondary: var(--gray-300); --text-tertiary: var(--gizmo-gray-500); --surface-primary: var(--gray-900); --surface-secondary: var(--gray-800); --surface-tertiary: var(--gray-700); --border-light: rgba(217,217,227,.1); --border-medium: rgba(217,217,227,.15); --border-heavy: rgba(217,217,227,.2); }

textarea:focus { border-color: inherit; box-shadow: none; outline: none; }

::-webkit-scrollbar { height: 1rem; width: 0.5rem; }

::-webkit-scrollbar:horizontal { height: 0.5rem; width: 1rem; }

::-webkit-scrollbar-track { background-color: transparent; border-radius: 9999px; }

::-webkit-scrollbar-thumb { --tw-border-opacity: 1; background-color: rgba(217, 217, 227, 0.8); border-color: rgba(255,255,255,var(--tw-border-opacity)); border-radius: 9999px; border-width: 1px; }

::-webkit-scrollbar-thumb:hover { --tw-bg-opacity: 1; background-color: rgba(236,236,241,var(--tw-bg-opacity)); }

.dark::-webkit-scrollbar-thumb { --tw-bg-opacity: 1; background-color: rgba(86,88,105,var(--tw-bg-opacity)); }

.dark::-webkit-scrollbar-thumb:hover { --tw-bg-opacity: 1; background-color: rgba(172,172,190,var(--tw-bg-opacity)); }

@media (min-width: 768px) {
  .scrollbar-trigger ::-webkit-scrollbar-thumb { visibility: hidden; }
  .scrollbar-trigger:hover ::-webkit-scrollbar-thumb { visibility: visible; }
}

.container { width: 100%; }

@media (min-width: 640px) {
  .container { max-width: 640px; }
}

@media (min-width: 768px) {
  .container { max-width: 768px; }
}

@media (min-width: 1024px) {
  .container { max-width: 1024px; }
}

@media (min-width: 1280px) {
  .container { max-width: 1280px; }
}

@media (min-width: 1536px) {
  .container { max-width: 1536px; }
}

.prose { color: var(--tw-prose-body); max-width: 65ch; }

.prose :where([class~="lead"]):not(:where([class~="not-prose"] *)) { color: var(--tw-prose-lead); font-size: 1.25em; line-height: 1.6; margin-bottom: 1.2em; margin-top: 1.2em; }

.prose :where(a):not(:where([class~="not-prose"] *)) { color: var(--tw-prose-links); font-weight: 500; text-decoration: underline; }

.prose :where(strong):not(:where([class~="not-prose"] *)) { color: var(--tw-prose-bold); font-weight: 600; }

.prose :where(a strong):not(:where([class~="not-prose"] *)) { color: inherit; }

.prose :where(blockquote strong):not(:where([class~="not-prose"] *)) { color: inherit; }

.prose :where(thead th strong):not(:where([class~="not-prose"] *)) { color: inherit; }

.prose :where(ol):not(:where([class~="not-prose"] *)) { list-style-type: decimal; margin-bottom: 1.25em; margin-top: 1.25em; padding-left: 1.625em; }

.prose :where(ol[type="A"]):not(:where([class~="not-prose"] *)) { list-style-type: upper-alpha; }

.prose :where(ol[type="a"]):not(:where([class~="not-prose"] *)) { list-style-type: lower-alpha; }

.prose :where():not(:where([class~="not-prose"] *)) { list-style-type: upper-alpha; }

.prose :where():not(:where([class~="not-prose"] *)) { list-style-type: lower-alpha; }

.prose :where(ol[type="I"]):not(:where([class~="not-prose"] *)) { list-style-type: upper-roman; }

.prose :where(ol[type="i"]):not(:where([class~="not-prose"] *)) { list-style-type: lower-roman; }

.prose :where():not(:where([class~="not-prose"] *)) { list-style-type: upper-roman; }

.prose :where():not(:where([class~="not-prose"] *)) { list-style-type: lower-roman; }

.prose :where(ol[type="1"]):not(:where([class~="not-prose"] *)) { list-style-type: decimal; }

.prose :where(ul):not(:where([class~="not-prose"] *)) { list-style-type: disc; margin-bottom: 1.25em; margin-top: 1.25em; padding-left: 1.625em; }

.prose :where(ol > li):not(:where([class~="not-prose"] *))::marker { color: var(--tw-prose-counters); font-weight: 400; }

.prose :where(ul > li):not(:where([class~="not-prose"] *))::marker { color: var(--tw-prose-bullets); }

.prose :where(hr):not(:where([class~="not-prose"] *)) { border-color: var(--tw-prose-hr); border-top-width: 1px; margin-bottom: 3em; margin-top: 3em; }

.prose :where(blockquote):not(:where([class~="not-prose"] *)) { border-left-color: var(--tw-prose-quote-borders); border-left-width: 0.25rem; color: var(--tw-prose-quotes); font-style: normal; font-weight: 500; margin-bottom: 1.6em; margin-top: 1.6em; padding-left: 1em; quotes: "â" "â" "â" "â"; }

.prose :where(blockquote p:first-of-type):not(:where([class~="not-prose"] *))::before { content: open-quote; }

.prose :where(blockquote p:last-of-type):not(:where([class~="not-prose"] *))::after { content: close-quote; }

.prose :where(h1):not(:where([class~="not-prose"] *)) { color: var(--tw-prose-headings); font-size: 2.25em; font-weight: 800; line-height: 1.11111; margin-bottom: 0.888889em; margin-top: 0px; }

.prose :where(h1 strong):not(:where([class~="not-prose"] *)) { color: inherit; font-weight: 900; }

.prose :where(h2):not(:where([class~="not-prose"] *)) { color: var(--tw-prose-headings); font-size: 1.5em; font-weight: 700; line-height: 1.33333; margin-bottom: 1em; margin-top: 2em; }

.prose :where(h2 strong):not(:where([class~="not-prose"] *)) { color: inherit; font-weight: 800; }

.prose :where(h3):not(:where([class~="not-prose"] *)) { color: var(--tw-prose-headings); font-size: 1.25em; font-weight: 600; line-height: 1.6; margin-bottom: 0.6em; margin-top: 1.6em; }

.prose :where(h3 strong):not(:where([class~="not-prose"] *)) { color: inherit; font-weight: 700; }

.prose :where(h4):not(:where([class~="not-prose"] *)) { color: var(--tw-prose-headings); font-weight: 600; line-height: 1.5; margin-bottom: 0.5em; margin-top: 1.5em; }

.prose :where(h4 strong):not(:where([class~="not-prose"] *)) { color: inherit; font-weight: 700; }

.prose :where(img):not(:where([class~="not-prose"] *)) { margin-bottom: 2em; margin-top: 2em; }

.prose :where(figure > *):not(:where([class~="not-prose"] *)) { margin-bottom: 0px; margin-top: 0px; }

.prose :where(figcaption):not(:where([class~="not-prose"] *)) { color: var(--tw-prose-captions); font-size: 0.875em; line-height: 1.42857; margin-top: 0.857143em; }

.prose :where(code):not(:where([class~="not-prose"] *)) { color: var(--tw-prose-code); font-size: 0.875em; font-weight: 600; }

.prose :where(code):not(:where([class~="not-prose"] *))::before { content: "`"; }

.prose :where(code):not(:where([class~="not-prose"] *))::after { content: "`"; }

.prose :where(a code):not(:where([class~="not-prose"] *)) { color: inherit; }

.prose :where(h1 code):not(:where([class~="not-prose"] *)) { color: inherit; }

.prose :where(h2 code):not(:where([class~="not-prose"] *)) { color: inherit; font-size: 0.875em; }

.prose :where(h3 code):not(:where([class~="not-prose"] *)) { color: inherit; font-size: 0.9em; }

.prose :where(h4 code):not(:where([class~="not-prose"] *)) { color: inherit; }

.prose :where(blockquote code):not(:where([class~="not-prose"] *)) { color: inherit; }

.prose :where(thead th code):not(:where([class~="not-prose"] *)) { color: inherit; }

.prose :where(pre):not(:where([class~="not-prose"] *)) { background-color: transparent; border-radius: 0.375rem; color: currentcolor; font-size: 0.875em; font-weight: 400; line-height: 1.71429; margin: 0px; overflow-x: auto; padding: 0px; }

.prose :where(pre code):not(:where([class~="not-prose"] *)) { background-color: transparent; border-radius: 0px; border-width: 0px; color: inherit; font-family: inherit; font-size: inherit; font-weight: inherit; line-height: inherit; padding: 0px; }

.prose :where(pre code):not(:where([class~="not-prose"] *))::before { content: none; }

.prose :where(pre code):not(:where([class~="not-prose"] *))::after { content: none; }

.prose :where(table):not(:where([class~="not-prose"] *)) { font-size: 0.875em; line-height: 1.71429; margin-bottom: 2em; margin-top: 2em; table-layout: auto; text-align: left; width: 100%; }

.prose :where(thead):not(:where([class~="not-prose"] *)) { border-bottom-color: var(--tw-prose-th-borders); border-bottom-width: 1px; }

.prose :where(thead th):not(:where([class~="not-prose"] *)) { color: var(--tw-prose-headings); font-weight: 600; padding-bottom: 0.571429em; padding-left: 0.571429em; padding-right: 0.571429em; vertical-align: bottom; }

.prose :where(tbody tr):not(:where([class~="not-prose"] *)) { border-bottom-color: var(--tw-prose-td-borders); border-bottom-width: 1px; }

.prose :where(tbody tr:last-child):not(:where([class~="not-prose"] *)) { border-bottom-width: 0px; }

.prose :where(tbody td):not(:where([class~="not-prose"] *)) { vertical-align: baseline; }

.prose :where(tfoot):not(:where([class~="not-prose"] *)) { border-top-color: var(--tw-prose-th-borders); border-top-width: 1px; }

.prose :where(tfoot td):not(:where([class~="not-prose"] *)) { vertical-align: top; }

.prose { --tw-prose-body: #374151; --tw-prose-headings: #111827; --tw-prose-lead: #4b5563; --tw-prose-links: #111827; --tw-prose-bold: #111827; --tw-prose-counters: #6b7280; --tw-prose-bullets: #d1d5db; --tw-prose-hr: #e5e7eb; --tw-prose-quotes: #111827; --tw-prose-quote-borders: #e5e7eb; --tw-prose-captions: #6b7280; --tw-prose-code: #111827; --tw-prose-pre-code: #e5e7eb; --tw-prose-pre-bg: #1f2937; --tw-prose-th-borders: #d1d5db; --tw-prose-td-borders: #e5e7eb; --tw-prose-invert-body: #d1d5db; --tw-prose-invert-headings: #fff; --tw-prose-invert-lead: #9ca3af; --tw-prose-invert-links: #fff; --tw-prose-invert-bold: #fff; --tw-prose-invert-counters: #9ca3af; --tw-prose-invert-bullets: #4b5563; --tw-prose-invert-hr: #374151; --tw-prose-invert-quotes: #f3f4f6; --tw-prose-invert-quote-borders: #374151; --tw-prose-invert-captions: #9ca3af; --tw-prose-invert-code: #fff; --tw-prose-invert-pre-code: #d1d5db; --tw-prose-invert-pre-bg: rgba(0,0,0,.5); --tw-prose-invert-th-borders: #4b5563; --tw-prose-invert-td-borders: #374151; font-size: 1rem; line-height: 1.75; }

.prose :where(p):not(:where([class~="not-prose"] *)) { margin-bottom: 1.25em; margin-top: 1.25em; }

.prose :where(video):not(:where([class~="not-prose"] *)) { margin-bottom: 2em; margin-top: 2em; }

.prose :where(figure):not(:where([class~="not-prose"] *)) { margin-bottom: 2em; margin-top: 2em; }

.prose :where(li):not(:where([class~="not-prose"] *)) { margin-bottom: 0.5em; margin-top: 0.5em; }

.prose :where(ol > li):not(:where([class~="not-prose"] *)) { padding-left: 0.375em; }

.prose :where(ul > li):not(:where([class~="not-prose"] *)) { padding-left: 0.375em; }

.prose :where(.prose > ul > li p):not(:where([class~="not-prose"] *)) { margin-bottom: 0.75em; margin-top: 0.75em; }

.prose :where(.prose > ul > li > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 1.25em; }

.prose :where(.prose > ul > li > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 1.25em; }

.prose :where(.prose > ol > li > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 1.25em; }

.prose :where(.prose > ol > li > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 1.25em; }

.prose :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"] *)) { margin-bottom: 0.75em; margin-top: 0.75em; }

.prose :where(hr + *):not(:where([class~="not-prose"] *)) { margin-top: 0px; }

.prose :where(h2 + *):not(:where([class~="not-prose"] *)) { margin-top: 0px; }

.prose :where(h3 + *):not(:where([class~="not-prose"] *)) { margin-top: 0px; }

.prose :where(h4 + *):not(:where([class~="not-prose"] *)) { margin-top: 0px; }

.prose :where(thead th:first-child):not(:where([class~="not-prose"] *)) { padding-left: 0px; }

.prose :where(thead th:last-child):not(:where([class~="not-prose"] *)) { padding-right: 0px; }

.prose :where(tbody td, tfoot td):not(:where([class~="not-prose"] *)) { padding: 0.571429em; }

.prose :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"] *)) { padding-left: 0px; }

.prose :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"] *)) { padding-right: 0px; }

.prose :where(.prose > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 0px; }

.prose :where(.prose > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 0px; }

.prose-sm :where(.prose > ul > li p):not(:where([class~="not-prose"] *)) { margin-bottom: 0.571429em; margin-top: 0.571429em; }

.prose-sm :where(.prose > ul > li > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 1.14286em; }

.prose-sm :where(.prose > ul > li > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 1.14286em; }

.prose-sm :where(.prose > ol > li > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 1.14286em; }

.prose-sm :where(.prose > ol > li > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 1.14286em; }

.prose-sm :where(.prose > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 0px; }

.prose-sm :where(.prose > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 0px; }

.prose-base :where(.prose > ul > li p):not(:where([class~="not-prose"] *)) { margin-bottom: 0.75em; margin-top: 0.75em; }

.prose-base :where(.prose > ul > li > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 1.25em; }

.prose-base :where(.prose > ul > li > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 1.25em; }

.prose-base :where(.prose > ol > li > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 1.25em; }

.prose-base :where(.prose > ol > li > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 1.25em; }

.prose-base :where(.prose > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 0px; }

.prose-base :where(.prose > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 0px; }

.prose-lg :where(.prose > ul > li p):not(:where([class~="not-prose"] *)) { margin-bottom: 0.888889em; margin-top: 0.888889em; }

.prose-lg :where(.prose > ul > li > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 1.33333em; }

.prose-lg :where(.prose > ul > li > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 1.33333em; }

.prose-lg :where(.prose > ol > li > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 1.33333em; }

.prose-lg :where(.prose > ol > li > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 1.33333em; }

.prose-lg :where(.prose > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 0px; }

.prose-lg :where(.prose > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 0px; }

.prose-xl :where(.prose > ul > li p):not(:where([class~="not-prose"] *)) { margin-bottom: 0.8em; margin-top: 0.8em; }

.prose-xl :where(.prose > ul > li > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 1.2em; }

.prose-xl :where(.prose > ul > li > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 1.2em; }

.prose-xl :where(.prose > ol > li > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 1.2em; }

.prose-xl :where(.prose > ol > li > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 1.2em; }

.prose-xl :where(.prose > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 0px; }

.prose-xl :where(.prose > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 0px; }

.prose-2xl :where(.prose > ul > li p):not(:where([class~="not-prose"] *)) { margin-bottom: 0.833333em; margin-top: 0.833333em; }

.prose-2xl :where(.prose > ul > li > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 1.33333em; }

.prose-2xl :where(.prose > ul > li > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 1.33333em; }

.prose-2xl :where(.prose > ol > li > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 1.33333em; }

.prose-2xl :where(.prose > ol > li > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 1.33333em; }

.prose-2xl :where(.prose > :first-child):not(:where([class~="not-prose"] *)) { margin-top: 0px; }

.prose-2xl :where(.prose > :last-child):not(:where([class~="not-prose"] *)) { margin-bottom: 0px; }

.form-input, .form-multiselect, .form-select, .form-textarea { --tw-shadow: 0 0 transparent; appearance: none; background-color: rgb(255, 255, 255); border-color: rgb(142, 142, 160); border-radius: 0px; border-width: 1px; font-size: 1rem; line-height: 1.5rem; padding: 0.5rem 0.75rem; }

.form-input:focus, .form-multiselect:focus, .form-select:focus, .form-textarea:focus { --tw-ring-inset: var(--tw-empty,/*!*/ /*!*/); --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: #2563eb; --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color); border-color: rgb(37, 99, 235); box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow); outline: transparent solid 2px; outline-offset: 2px; }

.form-input::-webkit-input-placeholder, .form-textarea::-webkit-input-placeholder { color: rgb(142, 142, 160); opacity: 1; }

.form-input::placeholder, .form-textarea::placeholder { color: rgb(142, 142, 160); opacity: 1; }

.form-input::-webkit-datetime-edit-fields-wrapper { padding: 0px; }

.form-input::-webkit-date-and-time-value { min-height: 1.5em; }

.form-input::-webkit-datetime-edit, .form-input::-webkit-datetime-edit-day-field, .form-input::-webkit-datetime-edit-hour-field, .form-input::-webkit-datetime-edit-meridiem-field, .form-input::-webkit-datetime-edit-millisecond-field, .form-input::-webkit-datetime-edit-minute-field, .form-input::-webkit-datetime-edit-month-field, .form-input::-webkit-datetime-edit-second-field, .form-input::-webkit-datetime-edit-year-field { padding-bottom: 0px; padding-top: 0px; }

.btn { align-items: center; border-color: transparent; border-radius: 0.25rem; border-width: 1px; display: inline-flex; font-size: 0.875rem; line-height: 1.25rem; padding: 0.5rem 0.75rem; pointer-events: auto; }

.btn:focus { outline: transparent solid 2px; outline-offset: 2px; }

.btn:disabled { cursor: not-allowed; opacity: 0.5; }

.btn-primary { --tw-bg-opacity: 1; --tw-text-opacity: 1; background-color: rgba(16,163,127,var(--tw-bg-opacity)); color: rgba(255,255,255,var(--tw-text-opacity)); }

.btn-primary:hover { --tw-bg-opacity: 1; background-color: rgba(26,127,100,var(--tw-bg-opacity)); }

.btn-primary:focus { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color); --tw-ring-offset-width: 2px; box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent); }

.btn-primary.focus-visible { --tw-ring-opacity: 1; --tw-ring-color: rgba(25,195,125,var(--tw-ring-opacity)); }

.btn-primary:focus-visible { --tw-ring-opacity: 1; --tw-ring-color: rgba(25,195,125,var(--tw-ring-opacity)); }

.btn-danger { --tw-bg-opacity: 1; --tw-text-opacity: 1; background-color: rgba(185,28,28,var(--tw-bg-opacity)); color: rgba(255,255,255,var(--tw-text-opacity)); }

.btn-danger:hover { --tw-bg-opacity: 1; background-color: rgba(153,27,27,var(--tw-bg-opacity)); }

.btn-danger:focus { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color); --tw-ring-offset-width: 2px; box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent); }

.btn-danger.focus-visible { --tw-ring-opacity: 1; --tw-ring-color: rgba(220,38,38,var(--tw-ring-opacity)); }

.btn-danger:focus-visible { --tw-ring-opacity: 1; --tw-ring-color: rgba(220,38,38,var(--tw-ring-opacity)); }

.btn-danger:disabled:hover { --tw-bg-opacity: 1; background-color: rgba(185,28,28,var(--tw-bg-opacity)); }

.btn-danger-outline { --tw-border-opacity: 1; --tw-text-opacity: 1; border-color: rgba(185,28,28,var(--tw-border-opacity)); border-width: 1px; color: rgba(185,28,28,var(--tw-text-opacity)); }

.btn-danger-outline:focus { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color); --tw-ring-offset-width: 2px; box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent); }

.btn-danger-outline.focus-visible { --tw-ring-opacity: 1; --tw-ring-color: rgba(220,38,38,var(--tw-ring-opacity)); }

.btn-danger-outline:focus-visible { --tw-ring-opacity: 1; --tw-ring-color: rgba(220,38,38,var(--tw-ring-opacity)); }

.btn-neutral { --tw-bg-opacity: 1; --tw-text-opacity: 1; background-color: rgba(255,255,255,var(--tw-bg-opacity)); border-color: rgba(0, 0, 0, 0.1); border-width: 1px; color: rgba(64,65,79,var(--tw-text-opacity)); font-size: 0.875rem; line-height: 1.25rem; }

.btn-neutral:hover { --tw-bg-opacity: 1; background-color: rgba(236,236,241,var(--tw-bg-opacity)); }

.btn-neutral:focus { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color); --tw-ring-offset-width: 2px; box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent); }

.btn-neutral.focus-visible { --tw-ring-opacity: 1; --tw-ring-color: rgba(99,102,241,var(--tw-ring-opacity)); }

.btn-neutral:focus-visible { --tw-ring-opacity: 1; --tw-ring-color: rgba(99,102,241,var(--tw-ring-opacity)); }

.dark .btn-neutral { --tw-border-opacity: 1; --tw-bg-opacity: 1; --tw-text-opacity: 1; background-color: rgba(52,53,65,var(--tw-bg-opacity)); border-color: rgba(86,88,105,var(--tw-border-opacity)); color: rgba(217,217,227,var(--tw-text-opacity)); }

.dark .btn-neutral:hover { --tw-bg-opacity: 1; background-color: rgba(64,65,79,var(--tw-bg-opacity)); }

.btn-dark { --tw-border-opacity: 1; --tw-bg-opacity: 1; --tw-text-opacity: 1; background-color: rgba(52,53,65,var(--tw-bg-opacity)); border-color: rgba(86,88,105,var(--tw-border-opacity)); border-width: 1px; color: rgba(255,255,255,var(--tw-text-opacity)); }

.btn-dark:hover { --tw-bg-opacity: 1; background-color: rgba(64,65,79,var(--tw-bg-opacity)); }

.btn-light { --tw-bg-opacity: 1; --tw-text-opacity: 1; background-color: rgba(236,236,241,var(--tw-bg-opacity)); color: rgba(0,0,0,var(--tw-text-opacity)); }

.btn-light:hover { --tw-bg-opacity: 1; background-color: rgba(255,255,255,var(--tw-bg-opacity)); }

.btn-disabled { --tw-bg-opacity: 1; --tw-text-opacity: 1; color: rgba(142,142,160,var(--tw-text-opacity)); cursor: not-allowed; }

.btn-disabled, .btn-disabled:hover { background-color: rgba(236,236,241,var(--tw-bg-opacity)); }

.btn-disabled:hover { --tw-bg-opacity: 1; }

.btn-small { padding: 0.25rem 0.5rem; }

.hide-scrollbar { }

.hide-scrollbar ::-webkit-scrollbar { display: none; }

.sr-only { clip: rect(0px, 0px, 0px, 0px); border-width: 0px; height: 1px; margin: -1px; overflow: hidden; padding: 0px; position: absolute; white-space: nowrap; width: 1px; }

.pointer-events-none { pointer-events: none; }

.pointer-events-auto { pointer-events: auto; }

.visible { visibility: visible; }

.\!invisible { visibility: hidden !important; }

.invisible { visibility: hidden; }

.collapse { visibility: collapse; }

.static { position: static; }

.fixed { position: fixed; }

.absolute { position: absolute; }

.relative { position: relative; }

.\!sticky { position: sticky !important; }

.sticky { position: sticky; }

.inset-0 { inset: 0px; }

.inset-12 { inset: 3rem; }

.inset-y-0 { bottom: 0px; top: 0px; }

.inset-y-1\/2 { bottom: 50%; top: 50%; }

.-left-1 { left: -0.25rem; }

.-left-2 { left: -0.5rem; }

.-top-0 { top: 0px; }

.-top-0\.5 { top: -0.125rem; }

.-top-1 { top: -0.25rem; }

.-top-16 { top: -4rem; }

.-top-\[1px\] { top: -1px; }

.bottom-0 { bottom: 0px; }

.bottom-1 { bottom: 0.25rem; }

.bottom-1\.5 { bottom: 0.375rem; }

.bottom-2 { bottom: 0.5rem; }

.bottom-2\.5 { bottom: 0.625rem; }

.bottom-4 { bottom: 1rem; }

.bottom-5 { bottom: 1.25rem; }

.bottom-\[124px\] { bottom: 124px; }

.bottom-full { bottom: 100%; }

.left-0 { left: 0px; }

.left-0\.5 { left: 0.125rem; }

.left-1 { left: 0.25rem; }

.left-1\.5 { left: 0.375rem; }

.left-1\/2 { left: 50%; }

.left-16 { left: 4rem; }

.left-2 { left: 0.5rem; }

.left-3 { left: 0.75rem; }

.left-4 { left: 1rem; }

.left-5 { left: 1.25rem; }

.left-\[7px\] { left: 7px; }

.left-full { left: 100%; }

.right-0 { right: 0px; }

.right-1 { right: 0.25rem; }

.right-16 { right: 4rem; }

.right-2 { right: 0.5rem; }

.right-3 { right: 0.75rem; }

.right-4 { right: 1rem; }

.right-6 { right: 1.5rem; }

.top-0 { top: 0px; }

.top-1 { top: 0.25rem; }

.top-1\/2 { top: 50%; }

.top-11 { top: 2.75rem; }

.top-14 { top: 3.5rem; }

.top-2 { top: 0.5rem; }

.top-3 { top: 0.75rem; }

.top-4 { top: 1rem; }

.top-8 { top: 2rem; }

.top-\[-3px\] { top: -3px; }

.top-\[-6px\] { top: -6px; }

.top-\[20px\] { top: 20px; }

.top-full { top: 100%; }

.top-px { top: 1px; }

.-z-0, .z-0 { z-index: 0; }

.z-10 { z-index: 10; }

.z-20 { z-index: 20; }

.z-40 { z-index: 40; }

.z-50 { z-index: 50; }

.z-\[14\] { z-index: 14; }

.z-\[15\] { z-index: 15; }

.z-\[16\] { z-index: 16; }

.z-\[17\] { z-index: 17; }

.z-\[2\] { z-index: 2; }

.z-\[60\] { z-index: 60; }

.order-1 { order: 1; }

.order-2 { order: 2; }

.col-auto { grid-column: auto / auto; }

.col-span-1 { grid-column: span 1 / span 1; }

.col-start-2 { grid-column-start: 2; }

.row-auto { grid-row: auto / auto; }

.row-span-4 { grid-row: span 4 / span 4; }

.row-start-2 { grid-row-start: 2; }

.float-left { float: left; }

.m-0 { margin: 0px; }

.m-0\.5 { margin: 0.125rem; }

.m-1 { margin: 0.25rem; }

.m-2 { margin: 0.5rem; }

.m-4 { margin: 1rem; }

.m-6 { margin: 1.5rem; }

.m-auto { margin: auto; }

.-mx-4 { margin-left: -1rem; margin-right: -1rem; }

.-my-0 { margin-bottom: 0px; margin-top: 0px; }

.-my-0\.5 { margin-bottom: -0.125rem; margin-top: -0.125rem; }

.-my-1 { margin-bottom: -0.25rem; margin-top: -0.25rem; }

.-my-2 { margin-bottom: -0.5rem; margin-top: -0.5rem; }

.mx-1 { margin-left: 0.25rem; margin-right: 0.25rem; }

.mx-2 { margin-left: 0.5rem; margin-right: 0.5rem; }

.mx-3 { margin-left: 0.75rem; margin-right: 0.75rem; }

.mx-6 { margin-left: 1.5rem; margin-right: 1.5rem; }

.mx-8 { margin-left: 2rem; margin-right: 2rem; }

.mx-auto { margin-left: auto; margin-right: auto; }

.my-0 { margin-bottom: 0px; margin-top: 0px; }

.my-0\.5 { margin-bottom: 0.125rem; margin-top: 0.125rem; }

.my-1 { margin-bottom: 0.25rem; margin-top: 0.25rem; }

.my-1\.5 { margin-bottom: 0.375rem; margin-top: 0.375rem; }

.my-10 { margin-bottom: 2.5rem; margin-top: 2.5rem; }

.my-12 { margin-bottom: 3rem; margin-top: 3rem; }

.my-2 { margin-bottom: 0.5rem; margin-top: 0.5rem; }

.my-3 { margin-bottom: 0.75rem; margin-top: 0.75rem; }

.my-4 { margin-bottom: 1rem; margin-top: 1rem; }

.my-6 { margin-bottom: 1.5rem; margin-top: 1.5rem; }

.my-8 { margin-bottom: 2rem; margin-top: 2rem; }

.my-auto { margin-bottom: auto; margin-top: auto; }

.-ml-0 { margin-left: 0px; }

.-ml-0\.5 { margin-left: -0.125rem; }

.-ml-1 { margin-left: -0.25rem; }

.-ml-2 { margin-left: -0.5rem; }

.-ml-4 { margin-left: -1rem; }

.-ml-\[1px\] { margin-left: -1px; }

.-ml-\[8px\] { margin-left: -8px; }

.-mr-1 { margin-right: -0.25rem; }

.-mr-12 { margin-right: -3rem; }

.-mr-2 { margin-right: -0.5rem; }

.-mt-0 { margin-top: 0px; }

.-mt-0\.5 { margin-top: -0.125rem; }

.-mt-\[0\.75px\] { margin-top: -0.75px; }

.-mt-\[3px\] { margin-top: -3px; }

.mb-0 { margin-bottom: 0px; }

.mb-0\.5 { margin-bottom: 0.125rem; }

.mb-1 { margin-bottom: 0.25rem; }

.mb-10 { margin-bottom: 2.5rem; }

.mb-12 { margin-bottom: 3rem; }

.mb-16 { margin-bottom: 4rem; }

.mb-2 { margin-bottom: 0.5rem; }

.mb-3 { margin-bottom: 0.75rem; }

.mb-4 { margin-bottom: 1rem; }

.mb-5 { margin-bottom: 1.25rem; }

.mb-6 { margin-bottom: 1.5rem; }

.mb-7 { margin-bottom: 1.75rem; }

.mb-8 { margin-bottom: 2rem; }

.mb-9 { margin-bottom: 2.25rem; }

.mb-auto { margin-bottom: auto; }

.ml-0 { margin-left: 0px; }

.ml-0\.5 { margin-left: 0.125rem; }

.ml-1 { margin-left: 0.25rem; }

.ml-12 { margin-left: 3rem; }

.ml-2 { margin-left: 0.5rem; }

.ml-3 { margin-left: 0.75rem; }

.ml-4 { margin-left: 1rem; }

.ml-5 { margin-left: 1.25rem; }

.ml-auto { margin-left: auto; }

.mr-0 { margin-right: 0px; }

.mr-1 { margin-right: 0.25rem; }

.mr-2 { margin-right: 0.5rem; }

.mr-3 { margin-right: 0.75rem; }

.mr-4 { margin-right: 1rem; }

.mr-8 { margin-right: 2rem; }

.mr-auto { margin-right: auto; }

.mt-0 { margin-top: 0px; }

.mt-0\.5 { margin-top: 0.125rem; }

.mt-1 { margin-top: 0.25rem; }

.mt-10 { margin-top: 2.5rem; }

.mt-14 { margin-top: 3.5rem; }

.mt-2 { margin-top: 0.5rem; }

.mt-2\.5 { margin-top: 0.625rem; }

.mt-3 { margin-top: 0.75rem; }

.mt-4 { margin-top: 1rem; }

.mt-5 { margin-top: 1.25rem; }

.mt-6 { margin-top: 1.5rem; }

.mt-8 { margin-top: 2rem; }

.mt-auto { margin-top: auto; }

.line-clamp-1 { -webkit-line-clamp: 1; }

.line-clamp-1, .line-clamp-2 { -webkit-box-orient: vertical; display: -webkit-box; overflow: hidden; }

.line-clamp-2 { -webkit-line-clamp: 2; }

.line-clamp-3 { -webkit-line-clamp: 3; }

.line-clamp-3, .line-clamp-6 { -webkit-box-orient: vertical; display: -webkit-box; overflow: hidden; }

.line-clamp-6 { -webkit-line-clamp: 6; }

.block { display: block; }

.inline-block { display: inline-block; }

.inline { display: inline; }

.flex { display: flex; }

.inline-flex { display: inline-flex; }

.table { display: table; }

.flow-root { display: flow-root; }

.grid { display: grid; }

.contents { display: contents; }

.hidden { display: none; }

.aspect-\[4\/7\] { aspect-ratio: 4 / 7; }

.aspect-\[7\/4\] { aspect-ratio: 7 / 4; }

.aspect-square { aspect-ratio: 1 / 1; }

.\!h-full { height: 100% !important; }

.h-0 { height: 0px; }

.h-1 { height: 0.25rem; }

.h-1\.5 { height: 0.375rem; }

.h-10 { height: 2.5rem; }

.h-11 { height: 2.75rem; }

.h-12 { height: 3rem; }

.h-14 { height: 3.5rem; }

.h-16 { height: 4rem; }

.h-2 { height: 0.5rem; }

.h-2\.5 { height: 0.625rem; }

.h-20 { height: 5rem; }

.h-24 { height: 6rem; }

.h-3 { height: 0.75rem; }

.h-3\.5 { height: 0.875rem; }

.h-32 { height: 8rem; }

.h-36 { height: 9rem; }

.h-4 { height: 1rem; }

.h-40 { height: 10rem; }

.h-44 { height: 11rem; }

.h-5 { height: 1.25rem; }

.h-52 { height: 13rem; }

.h-6 { height: 1.5rem; }

.h-7 { height: 1.75rem; }

.h-8 { height: 2rem; }

.h-9 { height: 2.25rem; }

.h-\[1200px\] { height: 1200px; }

.h-\[12px\] { height: 12px; }

.h-\[14px\] { height: 14px; }

.h-\[18px\] { height: 18px; }

.h-\[19px\] { height: 19px; }

.h-\[21px\] { height: 21px; }

.h-\[22px\] { height: 22px; }

.h-\[23px\] { height: 23px; }

.h-\[25px\] { height: 25px; }

.h-\[30px\] { height: 30px; }

.h-\[34px\] { height: 34px; }

.h-\[36px\] { height: 36px; }

.h-\[404px\] { height: 404px; }

.h-\[42px\] { height: 42px; }

.h-\[50px\] { height: 50px; }

.h-\[60px\] { height: 60px; }

.h-\[70px\] { height: 70px; }

.h-auto { height: auto; }

.h-fit { height: fit-content; }

.h-full { height: 100%; }

.h-px { height: 1px; }

.h-screen { height: 100vh; }

.max-h-0 { max-height: 0px; }

.max-h-32 { max-height: 8rem; }

.max-h-5 { max-height: 1.25rem; }

.max-h-60 { max-height: 15rem; }

.max-h-64 { max-height: 16rem; }

.max-h-72 { max-height: 18rem; }

.max-h-\[28rem\] { max-height: 28rem; }

.max-h-\[450px\] { max-height: 450px; }

.max-h-\[80vh\] { max-height: 80vh; }

.max-h-\[85vh\] { max-height: 85vh; }

.max-h-\[calc\(100vh-300px\)\] { max-height: calc(100vh - 300px); }

.min-h-0 { min-height: 0px; }

.min-h-\[1\.5rem\] { min-height: 1.5rem; }

.min-h-\[200px\] { min-height: 200px; }

.min-h-\[20px\] { min-height: 20px; }

.min-h-\[24px\] { min-height: 24px; }

.min-h-\[40px\] { min-height: 40px; }

.min-h-\[44px\] { min-height: 44px; }

.min-h-\[4rem\] { min-height: 4rem; }

.min-h-\[60px\] { min-height: 60px; }

.min-h-\[71px\] { min-height: 71px; }

.min-h-fit { min-height: fit-content; }

.min-h-full { min-height: 100%; }

.min-h-screen { min-height: 100vh; }

.\!w-full { width: 100% !important; }

.w-0 { width: 0px; }

.w-1 { width: 0.25rem; }

.w-1\.5 { width: 0.375rem; }

.w-1\/2 { width: 50%; }

.w-1\/3 { width: 33.3333%; }

.w-10 { width: 2.5rem; }

.w-11 { width: 2.75rem; }

.w-12 { width: 3rem; }

.w-14 { width: 3.5rem; }

.w-16 { width: 4rem; }

.w-2 { width: 0.5rem; }

.w-20 { width: 5rem; }

.w-28 { width: 7rem; }

.w-3 { width: 0.75rem; }

.w-3\.5 { width: 0.875rem; }

.w-32 { width: 8rem; }

.w-4 { width: 1rem; }

.w-40 { width: 10rem; }

.w-48 { width: 12rem; }

.w-5 { width: 1.25rem; }

.w-6 { width: 1.5rem; }

.w-60 { width: 15rem; }

.w-64 { width: 16rem; }

.w-7 { width: 1.75rem; }

.w-8 { width: 2rem; }

.w-80 { width: 20rem; }

.w-9 { width: 2.25rem; }

.w-96 { width: 24rem; }

.w-\[103px\] { width: 103px; }

.w-\[120px\] { width: 120px; }

.w-\[184px\] { width: 184px; }

.w-\[18px\] { width: 18px; }

.w-\[2\.5px\] { width: 2.5px; }

.w-\[209px\] { width: 209px; }

.w-\[218px\] { width: 218px; }

.w-\[21px\] { width: 21px; }

.w-\[23px\] { width: 23px; }

.w-\[25vw\] { width: 25vw; }

.w-\[260px\] { width: 260px; }

.w-\[280px\] { width: 280px; }

.w-\[30px\] { width: 30px; }

.w-\[34px\] { width: 34px; }

.w-\[42px\] { width: 42px; }

.w-\[70px\] { width: 70px; }

.w-\[860px\] { width: 860px; }

.w-\[88px\] { width: 88px; }

.w-\[960px\] { width: 960px; }

.w-\[calc\(100\%-50px\)\] { width: calc(100% - 50px); }

.w-auto { width: auto; }

.w-fit { width: fit-content; }

.w-full { width: 100%; }

.w-min { width: min-content; }

.w-screen { width: 100vw; }

.min-w-0 { min-width: 0px; }

.min-w-\[100vw\] { min-width: 100vw; }

.min-w-\[175px\] { min-width: 175px; }

.min-w-\[180px\] { min-width: 180px; }

.min-w-\[220px\] { min-width: 220px; }

.min-w-\[256px\] { min-width: 256px; }

.min-w-\[280px\] { min-width: 280px; }

.min-w-\[300px\] { min-width: 300px; }

.min-w-\[32px\] { min-width: 32px; }

.min-w-\[50px\] { min-width: 50px; }

.min-w-\[8rem\] { min-width: 8rem; }

.min-w-full { min-width: 100%; }

.max-w-3xl { max-width: 48rem; }

.max-w-5xl { max-width: 64rem; }

.max-w-6xl { max-width: 72rem; }

.max-w-7xl { max-width: 80rem; }

.max-w-\[100vw\] { max-width: 100vw; }

.max-w-\[160px\] { max-width: 160px; }

.max-w-\[200px\] { max-width: 200px; }

.max-w-\[220px\] { max-width: 220px; }

.max-w-\[250px\] { max-width: 250px; }

.max-w-\[320px\] { max-width: 320px; }

.max-w-\[350px\] { max-width: 350px; }

.max-w-\[372px\] { max-width: 372px; }

.max-w-\[400px\] { max-width: 400px; }

.max-w-\[440px\] { max-width: 440px; }

.max-w-\[480px\] { max-width: 480px; }

.max-w-\[510px\] { max-width: 510px; }

.max-w-\[550px\] { max-width: 550px; }

.max-w-\[560px\] { max-width: 560px; }

.max-w-\[600px\] { max-width: 600px; }

.max-w-\[650px\] { max-width: 650px; }

.max-w-\[90vw\] { max-width: 90vw; }

.max-w-\[calc\(100vw-3rem\)\] { max-width: calc(100vw - 3rem); }

.max-w-full { max-width: 100%; }

.max-w-lg { max-width: 32rem; }

.max-w-md { max-width: 28rem; }

.max-w-sm { max-width: 24rem; }

.max-w-xl { max-width: 36rem; }

.max-w-xs { max-width: 20rem; }

.flex-1 { flex: 1 1 0%; }

.flex-auto { flex: 1 1 auto; }

.flex-none { flex: 0 0 auto; }

.flex-shrink { flex-shrink: 1; }

.flex-shrink-0 { flex-shrink: 0; }

.shrink { flex-shrink: 1; }

.shrink-0 { flex-shrink: 0; }

.flex-grow { flex-grow: 1; }

.flex-grow-0 { flex-grow: 0; }

.grow { flex-grow: 1; }

.table-auto { table-layout: auto; }

.table-fixed { table-layout: fixed; }

.border-separate { border-collapse: separate; }

.border-spacing-0 { --tw-border-spacing-x: 0px; --tw-border-spacing-y: 0px; border-spacing: var(--tw-border-spacing-x) var(--tw-border-spacing-y); }

.origin-\[50\%_50\%\] { transform-origin: 50% 50%; }

.-translate-x-1\/2 { --tw-translate-x: -50%; }

.-translate-x-1\/2, .-translate-x-\[calc\(100\%\+4px\)\] { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.-translate-x-\[calc\(100\%\+4px\)\] { --tw-translate-x: calc(-100% + -4px); }

.-translate-x-full { --tw-translate-x: -100%; }

.-translate-x-full, .-translate-y-1\/2 { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.-translate-y-1\/2 { --tw-translate-y: -50%; }

.translate-x-0 { --tw-translate-x: 0px; }

.translate-x-0, .translate-x-0\.5 { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.translate-x-0\.5 { --tw-translate-x: 0.125rem; }

.translate-x-1 { --tw-translate-x: 0.25rem; }

.translate-x-1, .translate-x-1\/2 { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.translate-x-1\/2 { --tw-translate-x: 50%; }

.translate-x-full { --tw-translate-x: 100%; }

.translate-x-full, .translate-y-0 { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.translate-y-0 { --tw-translate-y: 0px; }

.translate-y-1 { --tw-translate-y: 0.25rem; }

.translate-y-1, .translate-y-3 { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.translate-y-3 { --tw-translate-y: 0.75rem; }

.translate-y-\[calc\(-50\%-1em\)\] { --tw-translate-y: calc(-50% - 1em); }

.translate-y-\[calc\(-50\%-1em\)\], .translate-y-\[calc\(-50\%-1em\+16px\)\] { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.translate-y-\[calc\(-50\%-1em\+16px\)\] { --tw-translate-y: calc(-50% - 1em + 16px); }

.translate-y-\[calc\(-50\%-1em-16px\)\] { --tw-translate-y: calc(-50% - 1em - 16px); }

.translate-y-\[calc\(-50\%-1em-16px\)\], .translate-y-\[calc\(100\%-71px\)\] { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.translate-y-\[calc\(100\%-71px\)\] { --tw-translate-y: calc(100% - 71px); }

.-rotate-180 { --tw-rotate: -180deg; }

.-rotate-180, .-rotate-45 { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.-rotate-45 { --tw-rotate: -45deg; }

.-rotate-90 { --tw-rotate: -90deg; }

.-rotate-90, .rotate-180 { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.rotate-180 { --tw-rotate: 180deg; }

.rotate-45 { --tw-rotate: 45deg; }

.rotate-45, .rotate-90 { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.rotate-90 { --tw-rotate: 90deg; }

.scale-0 { --tw-scale-x: 0; --tw-scale-y: 0; }

.scale-0, .scale-x-75 { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.scale-x-75 { --tw-scale-x: .75; }

.transform { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

@-webkit-keyframes pulse { 
  50% { opacity: 0.5; }
}

@keyframes pulse { 
  50% { opacity: 0.5; }
}

.animate-pulse { animation: 2s cubic-bezier(0.4, 0, 0.6, 1) 0s infinite normal none running pulse; }

@-webkit-keyframes slideDownAndFade { 
  0% { opacity: 0; transform: translateY(-2px); }
  100% { opacity: 1; transform: translateY(0px); }
}

.animate-slideDownAndFade { animation: 0.4s cubic-bezier(0.16, 1, 0.3, 1) 0s 1 normal none running slideDownAndFade; }

@-webkit-keyframes slideLeftAndFade { 
  0% { opacity: 0; transform: translateX(2px); }
  100% { opacity: 1; transform: translateX(0px); }
}

.animate-slideLeftAndFade { animation: 0.4s cubic-bezier(0.16, 1, 0.3, 1) 0s 1 normal none running slideLeftAndFade; }

@-webkit-keyframes spin { 
  100% { transform: rotate(1turn); }
}

@keyframes spin { 
  100% { transform: rotate(1turn); }
}

.animate-spin { animation: 1s linear 0s infinite normal none running spin; }

.cursor-auto { cursor: auto; }

.cursor-default { cursor: default; }

.cursor-not-allowed { cursor: not-allowed; }

.cursor-pointer { cursor: pointer; }

.cursor-progress { cursor: progress; }

.select-none { user-select: none; }

.resize-none { resize: none; }

.resize { resize: both; }

.list-inside { list-style-position: inside; }

.list-decimal { list-style-type: decimal; }

.list-disc { list-style-type: disc; }

.list-none { list-style-type: none; }

.appearance-none { appearance: none; }

.grid-flow-row { grid-auto-flow: row; }

.grid-cols-1 { grid-template-columns: repeat(1, minmax(0px, 1fr)); }

.grid-cols-2 { grid-template-columns: repeat(2, minmax(0px, 1fr)); }

.grid-cols-3 { grid-template-columns: repeat(3, minmax(0px, 1fr)); }

.grid-cols-5 { grid-template-columns: repeat(5, minmax(0px, 1fr)); }

.grid-cols-\[10px_1fr_10px\] { grid-template-columns: 10px 1fr 10px; }

.grid-cols-\[auto_max-content\] { grid-template-columns: auto max-content; }

.grid-cols-\[repeat\(auto-fit\,minmax\(250px\,1fr\)\)\] { grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); }

.grid-rows-2 { grid-template-rows: repeat(2, minmax(0px, 1fr)); }

.grid-rows-\[minmax\(10px\,_1fr\)_auto_minmax\(10px\,_1fr\)\] { grid-template-rows: minmax(10px, 1fr) auto minmax(10px, 1fr); }

.flex-row { flex-direction: row; }

.flex-col { flex-direction: column; }

.flex-col-reverse { flex-direction: column-reverse; }

.flex-wrap { flex-wrap: wrap; }

.flex-wrap-reverse { flex-wrap: wrap-reverse; }

.place-items-center { place-items: center; }

.items-start { align-items: flex-start; }

.items-end { align-items: flex-end; }

.items-center { align-items: center; }

.items-stretch { align-items: stretch; }

.justify-start { justify-content: flex-start; }

.justify-end { justify-content: flex-end; }

.justify-center { justify-content: center; }

.justify-between { justify-content: space-between; }

.justify-around { justify-content: space-around; }

.justify-stretch { justify-content: stretch; }

.justify-items-center { justify-items: center; }

.gap-0 { gap: 0px; }

.gap-1 { gap: 0.25rem; }

.gap-1\.5 { gap: 0.375rem; }

.gap-2 { gap: 0.5rem; }

.gap-2\.5 { gap: 0.625rem; }

.gap-3 { gap: 0.75rem; }

.gap-3\.5 { gap: 0.875rem; }

.gap-4 { gap: 1rem; }

.gap-5 { gap: 1.25rem; }

.gap-6 { gap: 1.5rem; }

.gap-7 { gap: 1.75rem; }

.gap-8 { gap: 2rem; }

.gap-x-1 { column-gap: 0.25rem; }

.gap-x-1\.5 { column-gap: 0.375rem; }

.gap-x-3 { column-gap: 0.75rem; }

.gap-x-4 { column-gap: 1rem; }

.gap-x-6 { column-gap: 1.5rem; }

.gap-x-9 { column-gap: 2.25rem; }

.gap-y-2 { row-gap: 0.5rem; }

.gap-y-4 { row-gap: 1rem; }

.space-x-1 > :not([hidden]) ~ :not([hidden]) { --tw-space-x-reverse: 0; margin-left: calc(.25rem*(1 - var(--tw-space-x-reverse))); margin-right: calc(.25rem*var(--tw-space-x-reverse)); }

.space-x-1\.5 > :not([hidden]) ~ :not([hidden]) { --tw-space-x-reverse: 0; margin-left: calc(.375rem*(1 - var(--tw-space-x-reverse))); margin-right: calc(.375rem*var(--tw-space-x-reverse)); }

.space-x-2 > :not([hidden]) ~ :not([hidden]) { --tw-space-x-reverse: 0; margin-left: calc(.5rem*(1 - var(--tw-space-x-reverse))); margin-right: calc(.5rem*var(--tw-space-x-reverse)); }

.space-x-4 > :not([hidden]) ~ :not([hidden]) { --tw-space-x-reverse: 0; margin-left: calc(1rem*(1 - var(--tw-space-x-reverse))); margin-right: calc(1rem*var(--tw-space-x-reverse)); }

.space-y-0 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; margin-bottom: calc(0px*var(--tw-space-y-reverse)); margin-top: calc(0px*(1 - var(--tw-space-y-reverse))); }

.space-y-0\.5 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; margin-bottom: calc(.125rem*var(--tw-space-y-reverse)); margin-top: calc(.125rem*(1 - var(--tw-space-y-reverse))); }

.space-y-1 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; margin-bottom: calc(.25rem*var(--tw-space-y-reverse)); margin-top: calc(.25rem*(1 - var(--tw-space-y-reverse))); }

.space-y-1\.5 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; margin-bottom: calc(.375rem*var(--tw-space-y-reverse)); margin-top: calc(.375rem*(1 - var(--tw-space-y-reverse))); }

.space-y-2 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; margin-bottom: calc(.5rem*var(--tw-space-y-reverse)); margin-top: calc(.5rem*(1 - var(--tw-space-y-reverse))); }

.space-y-3 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; margin-bottom: calc(.75rem*var(--tw-space-y-reverse)); margin-top: calc(.75rem*(1 - var(--tw-space-y-reverse))); }

.space-y-4 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; margin-bottom: calc(1rem*var(--tw-space-y-reverse)); margin-top: calc(1rem*(1 - var(--tw-space-y-reverse))); }

.space-y-6 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; margin-bottom: calc(1.5rem*var(--tw-space-y-reverse)); margin-top: calc(1.5rem*(1 - var(--tw-space-y-reverse))); }

.divide-x > :not([hidden]) ~ :not([hidden]) { --tw-divide-x-reverse: 0; border-left-width: calc(1px*(1 - var(--tw-divide-x-reverse))); border-right-width: calc(1px*var(--tw-divide-x-reverse)); }

.divide-y > :not([hidden]) ~ :not([hidden]) { --tw-divide-y-reverse: 0; border-bottom-width: calc(1px*var(--tw-divide-y-reverse)); border-top-width: calc(1px*(1 - var(--tw-divide-y-reverse))); }

.divide-gray-200 > :not([hidden]) ~ :not([hidden]) { --tw-divide-opacity: 1; border-color: rgba(217,217,227,var(--tw-divide-opacity)); }

.divide-white\/10 > :not([hidden]) ~ :not([hidden]) { border-color: rgba(255, 255, 255, 0.1); }

.self-end { align-self: flex-end; }

.self-center { align-self: center; }

.self-stretch { align-self: stretch; }

.justify-self-start { justify-self: start; }

.overflow-auto { overflow: auto; }

.overflow-hidden { overflow: hidden; }

.overflow-scroll { overflow: scroll; }

.overflow-x-auto { overflow-x: auto; }

.overflow-y-auto { overflow-y: auto; }

.overflow-x-hidden { overflow-x: hidden; }

.overflow-y-hidden { overflow-y: hidden; }

.overflow-y-scroll { overflow-y: scroll; }

.truncate { overflow: hidden; white-space: nowrap; }

.overflow-ellipsis, .text-ellipsis, .truncate { text-overflow: ellipsis; }

.text-clip { text-overflow: clip; }

.whitespace-nowrap { white-space: nowrap; }

.\!whitespace-pre { white-space: pre !important; }

.whitespace-pre { white-space: pre; }

.whitespace-pre-line { white-space: pre-line; }

.\!whitespace-pre-wrap { white-space: pre-wrap !important; }

.whitespace-pre-wrap { white-space: pre-wrap; }

.break-words { overflow-wrap: break-word; }

.break-all { word-break: break-all; }

.\!rounded-2xl { border-radius: 1rem !important; }

.\!rounded-lg { border-radius: 0.5rem !important; }

.rounded { border-radius: 0.25rem; }

.rounded-2xl { border-radius: 1rem; }

.rounded-\[10px\] { border-radius: 10px; }

.rounded-\[38px\] { border-radius: 38px; }

.rounded-\[4px\] { border-radius: 4px; }

.rounded-\[5px\] { border-radius: 5px; }

.rounded-full { border-radius: 9999px; }

.rounded-lg { border-radius: 0.5rem; }

.rounded-md { border-radius: 0.375rem; }

.rounded-none { border-radius: 0px; }

.rounded-sm { border-radius: 0.125rem; }

.rounded-xl { border-radius: 0.75rem; }

.rounded-b-lg { border-bottom-left-radius: 0.5rem; border-bottom-right-radius: 0.5rem; }

.rounded-l-md { border-bottom-left-radius: 0.375rem; border-top-left-radius: 0.375rem; }

.rounded-r-md { border-bottom-right-radius: 0.375rem; border-top-right-radius: 0.375rem; }

.rounded-t-\[30px\] { border-top-left-radius: 30px; border-top-right-radius: 30px; }

.rounded-t-md { border-top-left-radius: 0.375rem; border-top-right-radius: 0.375rem; }

.rounded-t-xl { border-top-left-radius: 0.75rem; border-top-right-radius: 0.75rem; }

.rounded-br-sm { border-bottom-right-radius: 0.125rem; }

.border { border-width: 1px; }

.border-0 { border-width: 0px; }

.border-2 { border-width: 2px; }

.border-\[0\.5px\] { border-width: 0.5px; }

.border-b { border-bottom-width: 1px; }

.border-b-\[0\.5px\] { border-bottom-width: 0.5px; }

.border-l { border-left-width: 1px; }

.border-l-4 { border-left-width: 4px; }

.border-l-8 { border-left-width: 8px; }

.border-r { border-right-width: 1px; }

.border-r-0 { border-right-width: 0px; }

.border-r-8 { border-right-width: 8px; }

.border-t { border-top-width: 1px; }

.border-t-8 { border-top-width: 8px; }

.border-none { border-style: none; }

.border-black\/10 { border-color: rgba(0, 0, 0, 0.1); }

.border-black\/20 { border-color: rgba(0, 0, 0, 0.2); }

.border-black\/30 { border-color: rgba(0, 0, 0, 0.3); }

.border-black\/5 { border-color: rgba(0, 0, 0, 0.05); }

.border-brand-green { --tw-border-opacity: 1; border-color: rgba(25,195,125,var(--tw-border-opacity)); }

.border-gizmo-gray-950 { --tw-border-opacity: 1; border-color: rgba(15,15,15,var(--tw-border-opacity)); }

.border-gray-100 { --tw-border-opacity: 1; border-color: rgba(236,236,241,var(--tw-border-opacity)); }

.border-gray-200 { --tw-border-opacity: 1; border-color: rgba(217,217,227,var(--tw-border-opacity)); }

.border-gray-300 { --tw-border-opacity: 1; border-color: rgba(197,197,210,var(--tw-border-opacity)); }

.border-gray-400 { --tw-border-opacity: 1; border-color: rgba(172,172,190,var(--tw-border-opacity)); }

.border-gray-50 { --tw-border-opacity: 1; border-color: rgba(247,247,248,var(--tw-border-opacity)); }

.border-gray-500 { --tw-border-opacity: 1; border-color: rgba(142,142,160,var(--tw-border-opacity)); }

.border-gray-700 { --tw-border-opacity: 1; border-color: rgba(64,65,79,var(--tw-border-opacity)); }

.border-gray-800 { --tw-border-opacity: 1; border-color: rgba(52,53,65,var(--tw-border-opacity)); }

.border-green-500 { --tw-border-opacity: 1; border-color: rgba(25,195,125,var(--tw-border-opacity)); }

.border-orange-400 { --tw-border-opacity: 1; border-color: rgba(255,128,82,var(--tw-border-opacity)); }

.border-orange-500 { --tw-border-opacity: 1; border-color: rgba(224,108,43,var(--tw-border-opacity)); }

.border-red-500 { --tw-border-opacity: 1; border-color: rgba(239,68,68,var(--tw-border-opacity)); }

.border-token-border-heavy { border-color: var(--border-heavy); }

.border-token-border-light { border-color: var(--border-light); }

.border-token-border-medium { border-color: var(--border-medium); }

.border-transparent { border-color: transparent; }

.border-white { --tw-border-opacity: 1; border-color: rgba(255,255,255,var(--tw-border-opacity)); }

.border-white\/20 { border-color: rgba(255, 255, 255, 0.2); }

.border-l-transparent { border-left-color: transparent; }

.border-r-transparent { border-right-color: transparent; }

.border-t-\[\#0077FF\] { --tw-border-opacity: 1; border-top-color: rgba(0,119,255,var(--tw-border-opacity)); }

.border-opacity-75 { --tw-border-opacity: 0.75; }

.\!bg-brand-purple { --tw-bg-opacity: 1 !important; background-color: rgba(171,104,255,var(--tw-bg-opacity)) !important; }

.\!bg-gray-200 { --tw-bg-opacity: 1 !important; background-color: rgba(217,217,227,var(--tw-bg-opacity)) !important; }

.\!bg-gray-700 { --tw-bg-opacity: 1 !important; background-color: rgba(64,65,79,var(--tw-bg-opacity)) !important; }

.\!bg-green-50 { --tw-bg-opacity: 1 !important; background-color: rgba(235,250,235,var(--tw-bg-opacity)) !important; }

.\!bg-transparent { background-color: transparent !important; }

.bg-\[\#0077FF\] { --tw-bg-opacity: 1; background-color: rgba(0,119,255,var(--tw-bg-opacity)); }

.bg-\[\#10A37F\] { --tw-bg-opacity: 1; background-color: rgba(16,163,127,var(--tw-bg-opacity)); }

.bg-\[\#3C46FF\] { --tw-bg-opacity: 1; background-color: rgba(60,70,255,var(--tw-bg-opacity)); }

.bg-\[\#4046EC\] { --tw-bg-opacity: 1; background-color: rgba(64,70,236,var(--tw-bg-opacity)); }

.bg-\[\#B161FD\] { --tw-bg-opacity: 1; background-color: rgba(177,97,253,var(--tw-bg-opacity)); }

.bg-\[\#F8CA27\] { --tw-bg-opacity: 1; background-color: rgba(248,202,39,var(--tw-bg-opacity)); }

.bg-\[\#FF5588\] { --tw-bg-opacity: 1; background-color: rgba(255,85,136,var(--tw-bg-opacity)); }

.bg-\[\#FF6E3C\] { --tw-bg-opacity: 1; background-color: rgba(255,110,60,var(--tw-bg-opacity)); }

.bg-\[rgba\(30\,203\,239\,0\.07\)\] { background-color: rgba(30, 203, 239, 0.07); }

.bg-black { --tw-bg-opacity: 1; background-color: rgba(0,0,0,var(--tw-bg-opacity)); }

.bg-black\/20 { background-color: rgba(0, 0, 0, 0.2); }

.bg-black\/5 { background-color: rgba(0, 0, 0, 0.05); }

.bg-black\/90 { background-color: rgba(0, 0, 0, 0.9); }

.bg-black\/\[\.04\] { background-color: rgba(0, 0, 0, 0.04); }

.bg-black\/\[\.08\] { background-color: rgba(0, 0, 0, 0.08); }

.bg-black\/\[\.12\] { background-color: rgba(0, 0, 0, 0.12); }

.bg-blue-200 { --tw-bg-opacity: 1; background-color: rgba(191,219,254,var(--tw-bg-opacity)); }

.bg-blue-300 { --tw-bg-opacity: 1; background-color: rgba(121,137,255,var(--tw-bg-opacity)); }

.bg-blue-400 { --tw-bg-opacity: 1; background-color: rgba(58,136,255,var(--tw-bg-opacity)); }

.bg-blue-500 { --tw-bg-opacity: 1; background-color: rgba(69,89,164,var(--tw-bg-opacity)); }

.bg-blue-950 { --tw-bg-opacity: 1; background-color: rgba(23,37,84,var(--tw-bg-opacity)); }

.bg-brand-green\/20 { background-color: rgba(25, 195, 125, 0.2); }

.bg-brand-green\/40 { background-color: rgba(25, 195, 125, 0.4); }

.bg-brand-purple { --tw-bg-opacity: 1; background-color: rgba(171,104,255,var(--tw-bg-opacity)); }

.bg-gray-100 { --tw-bg-opacity: 1; background-color: rgba(236,236,241,var(--tw-bg-opacity)); }

.bg-gray-200 { --tw-bg-opacity: 1; background-color: rgba(217,217,227,var(--tw-bg-opacity)); }

.bg-gray-300 { --tw-bg-opacity: 1; background-color: rgba(197,197,210,var(--tw-bg-opacity)); }

.bg-gray-300\/70 { background-color: rgba(197, 197, 210, 0.7); }

.bg-gray-400 { --tw-bg-opacity: 1; background-color: rgba(172,172,190,var(--tw-bg-opacity)); }

.bg-gray-50 { --tw-bg-opacity: 1; background-color: rgba(247,247,248,var(--tw-bg-opacity)); }

.bg-gray-500 { --tw-bg-opacity: 1; background-color: rgba(142,142,160,var(--tw-bg-opacity)); }

.bg-gray-600 { --tw-bg-opacity: 1; background-color: rgba(86,88,105,var(--tw-bg-opacity)); }

.bg-gray-700 { --tw-bg-opacity: 1; background-color: rgba(64,65,79,var(--tw-bg-opacity)); }

.bg-gray-800 { --tw-bg-opacity: 1; background-color: rgba(52,53,65,var(--tw-bg-opacity)); }

.bg-gray-900 { --tw-bg-opacity: 1; background-color: rgba(32,33,35,var(--tw-bg-opacity)); }

.bg-green-100 { --tw-bg-opacity: 1; background-color: rgba(210,244,211,var(--tw-bg-opacity)); }

.bg-green-200 { --tw-bg-opacity: 1; background-color: rgba(185,238,188,var(--tw-bg-opacity)); }

.bg-green-500 { --tw-bg-opacity: 1; background-color: rgba(25,195,125,var(--tw-bg-opacity)); }

.bg-green-500\/10 { background-color: rgba(25, 195, 125, 0.1); }

.bg-green-600 { --tw-bg-opacity: 1; background-color: rgba(16,163,127,var(--tw-bg-opacity)); }

.bg-orange-500 { --tw-bg-opacity: 1; background-color: rgba(224,108,43,var(--tw-bg-opacity)); }

.bg-orange-500\/10 { background-color: rgba(224, 108, 43, 0.1); }

.bg-red-100 { --tw-bg-opacity: 1; background-color: rgba(254,226,226,var(--tw-bg-opacity)); }

.bg-red-200 { --tw-bg-opacity: 1; background-color: rgba(254,202,202,var(--tw-bg-opacity)); }

.bg-red-500 { --tw-bg-opacity: 1; background-color: rgba(239,68,68,var(--tw-bg-opacity)); }

.bg-red-500\/10 { background-color: rgba(239, 68, 68, 0.1); }

.bg-red-600 { --tw-bg-opacity: 1; background-color: rgba(220,38,38,var(--tw-bg-opacity)); }

.bg-token-surface-primary { background-color: var(--surface-primary); }

.bg-token-surface-secondary { background-color: var(--surface-secondary); }

.bg-token-surface-tertiary { background-color: var(--surface-tertiary); }

.bg-transparent { background-color: transparent; }

.bg-white { --tw-bg-opacity: 1; background-color: rgba(255,255,255,var(--tw-bg-opacity)); }

.bg-white\/20 { background-color: rgba(255, 255, 255, 0.2); }

.bg-white\/25 { background-color: rgba(255, 255, 255, 0.25); }

.bg-white\/95 { background-color: rgba(255, 255, 255, 0.95); }

.bg-yellow-100 { --tw-bg-opacity: 1; background-color: rgba(254,249,195,var(--tw-bg-opacity)); }

.bg-yellow-200 { --tw-bg-opacity: 1; background-color: rgba(250,230,158,var(--tw-bg-opacity)); }

.bg-yellow-300 { --tw-bg-opacity: 1; background-color: rgba(255,243,201,var(--tw-bg-opacity)); }

.bg-yellow-400 { --tw-bg-opacity: 1; background-color: rgba(255,198,87,var(--tw-bg-opacity)); }

.bg-opacity-75 { --tw-bg-opacity: 0.75; }

.bg-opacity-95 { --tw-bg-opacity: 0.95; }

.bg-gradient-to-b { background-image: linear-gradient(to bottom,var(--tw-gradient-stops)); }

.bg-gradient-to-l { background-image: linear-gradient(to left,var(--tw-gradient-stops)); }

.bg-gradient-to-t { background-image: linear-gradient(to top,var(--tw-gradient-stops)); }

.from-gray-100 { --tw-gradient-from: #ececf1 var(--tw-gradient-from-position); --tw-gradient-to: rgba(236,236,241,0) var(--tw-gradient-to-position); --tw-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to); }

.from-gray-50 { --tw-gradient-from: #f7f7f8 var(--tw-gradient-from-position); --tw-gradient-to: hsla(240,7%,97%,0) var(--tw-gradient-to-position); --tw-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to); }

.from-gray-900\/0 { --tw-gradient-from: rgba(32,33,35,0) var(--tw-gradient-from-position); --tw-gradient-to: rgba(32,33,35,0) var(--tw-gradient-to-position); --tw-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to); }

.from-token-surface-primary { --tw-gradient-from: var(--surface-primary) var(--tw-gradient-from-position); --tw-gradient-to: hsla(0,0%,100%,0) var(--tw-gradient-to-position); --tw-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to); }

.from-token-surface-tertiary { --tw-gradient-from: var(--surface-tertiary) var(--tw-gradient-from-position); --tw-gradient-to: hsla(0,0%,100%,0) var(--tw-gradient-to-position); --tw-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to); }

.from-transparent { --tw-gradient-from: transparent var(--tw-gradient-from-position); --tw-gradient-to: transparent var(--tw-gradient-to-position); --tw-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to); }

.from-60\%, .from-\[60\%\] { --tw-gradient-from-position: 60%; }

.to-gray-100 { --tw-gradient-to: #ececf1 var(--tw-gradient-to-position); }

.to-gray-900 { --tw-gradient-to: #202123 var(--tw-gradient-to-position); }

.to-transparent { --tw-gradient-to: transparent var(--tw-gradient-to-position); }

.bg-contain { background-size: contain; }

.bg-cover { background-size: cover; }

.bg-center { background-position: 50% center; }

.bg-no-repeat { background-repeat: no-repeat; }

.fill-gray-800 { fill: rgb(52, 53, 65); }

.fill-yellow-500 { fill: rgb(234, 179, 8); }

.stroke-black { stroke: rgb(0, 0, 0); }

.stroke-brand-purple\/25 { stroke: rgba(171, 104, 255, 0.25); }

.stroke-gray-400 { stroke: rgb(172, 172, 190); }

.stroke-white { stroke: rgb(255, 255, 255); }

.stroke-0 { stroke-width: 0; }

.stroke-1 { stroke-width: 1; }

.stroke-2 { stroke-width: 2; }

.stroke-\[2\.5\] { stroke-width: 2.5; }

.stroke-\[4\] { stroke-width: 4; }

.object-contain { object-fit: contain; }

.object-cover { object-fit: cover; }

.object-scale-down { object-fit: scale-down; }

.p-0 { padding: 0px; }

.p-0\.5 { padding: 0.125rem; }

.p-1 { padding: 0.25rem; }

.p-1\.5 { padding: 0.375rem; }

.p-2 { padding: 0.5rem; }

.p-3 { padding: 0.75rem; }

.p-4 { padding: 1rem; }

.p-5 { padding: 1.25rem; }

.p-6 { padding: 1.5rem; }

.p-7 { padding: 1.75rem; }

.p-8 { padding: 2rem; }

.p-\[5px\] { padding: 5px; }

.\!px-1 { padding-left: 0.25rem !important; padding-right: 0.25rem !important; }

.\!px-1\.5 { padding-left: 0.375rem !important; padding-right: 0.375rem !important; }

.\!py-0 { padding-bottom: 0px !important; padding-top: 0px !important; }

.\!py-0\.5 { padding-bottom: 0.125rem !important; padding-top: 0.125rem !important; }

.px-0 { padding-left: 0px; padding-right: 0px; }

.px-0\.5 { padding-left: 0.125rem; padding-right: 0.125rem; }

.px-1 { padding-left: 0.25rem; padding-right: 0.25rem; }

.px-1\.5 { padding-left: 0.375rem; padding-right: 0.375rem; }

.px-10 { padding-left: 2.5rem; padding-right: 2.5rem; }

.px-2 { padding-left: 0.5rem; padding-right: 0.5rem; }

.px-2\.5 { padding-left: 0.625rem; padding-right: 0.625rem; }

.px-3 { padding-left: 0.75rem; padding-right: 0.75rem; }

.px-4 { padding-left: 1rem; padding-right: 1rem; }

.px-5 { padding-left: 1.25rem; padding-right: 1.25rem; }

.px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }

.px-8 { padding-left: 2rem; padding-right: 2rem; }

.py-0 { padding-bottom: 0px; padding-top: 0px; }

.py-0\.5 { padding-bottom: 0.125rem; padding-top: 0.125rem; }

.py-1 { padding-bottom: 0.25rem; padding-top: 0.25rem; }

.py-1\.5 { padding-bottom: 0.375rem; padding-top: 0.375rem; }

.py-12 { padding-bottom: 3rem; padding-top: 3rem; }

.py-2 { padding-bottom: 0.5rem; padding-top: 0.5rem; }

.py-2\.5 { padding-bottom: 0.625rem; padding-top: 0.625rem; }

.py-3 { padding-bottom: 0.75rem; padding-top: 0.75rem; }

.py-3\.5 { padding-bottom: 0.875rem; padding-top: 0.875rem; }

.py-4 { padding-bottom: 1rem; padding-top: 1rem; }

.py-6 { padding-bottom: 1.5rem; padding-top: 1.5rem; }

.py-8 { padding-bottom: 2rem; padding-top: 2rem; }

.py-\[10px\] { padding-bottom: 10px; padding-top: 10px; }

.\!pr-2 { padding-right: 0.5rem !important; }

.\!pt-0 { padding-top: 0px !important; }

.pb-0 { padding-bottom: 0px; }

.pb-0\.5 { padding-bottom: 0.125rem; }

.pb-1 { padding-bottom: 0.25rem; }

.pb-1\.5 { padding-bottom: 0.375rem; }

.pb-10 { padding-bottom: 2.5rem; }

.pb-12 { padding-bottom: 3rem; }

.pb-16 { padding-bottom: 4rem; }

.pb-2 { padding-bottom: 0.5rem; }

.pb-3 { padding-bottom: 0.75rem; }

.pb-4 { padding-bottom: 1rem; }

.pb-5 { padding-bottom: 1.25rem; }

.pb-64 { padding-bottom: 16rem; }

.pb-8 { padding-bottom: 2rem; }

.pl-0 { padding-left: 0px; }

.pl-1 { padding-left: 0.25rem; }

.pl-10 { padding-left: 2.5rem; }

.pl-12 { padding-left: 3rem; }

.pl-2 { padding-left: 0.5rem; }

.pl-3 { padding-left: 0.75rem; }

.pl-4 { padding-left: 1rem; }

.pl-5 { padding-left: 1.25rem; }

.pl-6 { padding-left: 1.5rem; }

.pl-8 { padding-left: 2rem; }

.pr-1 { padding-right: 0.25rem; }

.pr-1\.5 { padding-right: 0.375rem; }

.pr-10 { padding-right: 2.5rem; }

.pr-11 { padding-right: 2.75rem; }

.pr-12 { padding-right: 3rem; }

.pr-14 { padding-right: 3.5rem; }

.pr-16 { padding-right: 4rem; }

.pr-2 { padding-right: 0.5rem; }

.pr-3 { padding-right: 0.75rem; }

.pr-4 { padding-right: 1rem; }

.pr-5 { padding-right: 1.25rem; }

.pr-6 { padding-right: 1.5rem; }

.pr-7 { padding-right: 1.75rem; }

.pr-9 { padding-right: 2.25rem; }

.pt-0 { padding-top: 0px; }

.pt-0\.5 { padding-top: 0.125rem; }

.pt-1 { padding-top: 0.25rem; }

.pt-2 { padding-top: 0.5rem; }

.pt-20 { padding-top: 5rem; }

.pt-3 { padding-top: 0.75rem; }

.pt-4 { padding-top: 1rem; }

.pt-5 { padding-top: 1.25rem; }

.pt-6 { padding-top: 1.5rem; }

.pt-8 { padding-top: 2rem; }

.pt-\[36vh\] { padding-top: 36vh; }

.pt-\[67\%\] { padding-top: 67%; }

.text-left { text-align: left; }

.text-center { text-align: center; }

.text-right { text-align: right; }

.align-top { vertical-align: top; }

.align-middle { vertical-align: middle; }

.font-mono { font-family: "SÃ¶hne Mono", Monaco, "Andale Mono", "Ubuntu Mono", monospace; }

.font-sans { font-family: SÃ¶hne, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, Ubuntu, Cantarell, "Noto Sans", sans-serif, "Helvetica Neue", Arial, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; }

.text-2xl { font-size: 1.5rem; line-height: 2rem; }

.text-3xl { font-size: 1.875rem; line-height: 2.25rem; }

.text-4xl { font-size: 2.25rem; line-height: 2.5rem; }

.text-\[0\.8rem\] { font-size: 0.8rem; }

.text-\[10px\] { font-size: 10px; }

.text-\[13px\] { font-size: 13px; }

.text-\[20px\] { font-size: 20px; }

.text-\[28px\] { font-size: 28px; }

.text-\[32px\] { font-size: 32px; }

.text-base { font-size: 1rem; line-height: 1.5rem; }

.text-lg { font-size: 1.125rem; line-height: 1.75rem; }

.text-sm { font-size: 0.875rem; line-height: 1.25rem; }

.text-xl { font-size: 1.25rem; line-height: 1.75rem; }

.text-xs { font-size: 0.75rem; line-height: 1rem; }

.font-bold { font-weight: 700; }

.font-light { font-weight: 300; }

.font-medium { font-weight: 500; }

.font-normal { font-weight: 400; }

.font-semibold { font-weight: 600; }

.uppercase { text-transform: uppercase; }

.capitalize { text-transform: capitalize; }

.normal-case { text-transform: none; }

.italic { font-style: italic; }

.tabular-nums { --tw-numeric-spacing: tabular-nums; font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction); }

.leading-3 { line-height: 0.75rem; }

.leading-5 { line-height: 1.25rem; }

.leading-6 { line-height: 1.5rem; }

.leading-\[1\.2\] { line-height: 1.2; }

.leading-\[18px\] { line-height: 18px; }

.leading-none { line-height: 1; }

.leading-normal { line-height: 1.5; }

.leading-tight { line-height: 1.25; }

.tracking-tight { letter-spacing: -0.025em; }

.tracking-widest { letter-spacing: 0.1em; }

.\!text-gray-500 { --tw-text-opacity: 1 !important; color: rgba(142,142,160,var(--tw-text-opacity)) !important; }

.text-\[\#756B5C\] { --tw-text-opacity: 1; color: rgba(117,107,92,var(--tw-text-opacity)); }

.text-\[\#FE7600\] { --tw-text-opacity: 1; color: rgba(254,118,0,var(--tw-text-opacity)); }

.text-\[\#cdcdcd\] { --tw-text-opacity: 1; color: rgba(205,205,205,var(--tw-text-opacity)); }

.text-\[\#fff\] { --tw-text-opacity: 1; color: rgba(255,255,255,var(--tw-text-opacity)); }

.text-black { --tw-text-opacity: 1; color: rgba(0,0,0,var(--tw-text-opacity)); }

.text-black\/50 { color: rgba(0, 0, 0, 0.5); }

.text-black\/60 { color: rgba(0, 0, 0, 0.6); }

.text-black\/70 { color: rgba(0, 0, 0, 0.7); }

.text-blue-400 { --tw-text-opacity: 1; color: rgba(58,136,255,var(--tw-text-opacity)); }

.text-blue-500 { --tw-text-opacity: 1; color: rgba(69,89,164,var(--tw-text-opacity)); }

.text-blue-600 { --tw-text-opacity: 1; color: rgba(37,99,235,var(--tw-text-opacity)); }

.text-blue-700 { --tw-text-opacity: 1; color: rgba(29,78,216,var(--tw-text-opacity)); }

.text-brand-green { --tw-text-opacity: 1; color: rgba(25,195,125,var(--tw-text-opacity)); }

.text-brand-purple { --tw-text-opacity: 1; color: rgba(171,104,255,var(--tw-text-opacity)); }

.text-gizmo-gray-950 { --tw-text-opacity: 1; color: rgba(15,15,15,var(--tw-text-opacity)); }

.text-gray-100 { --tw-text-opacity: 1; color: rgba(236,236,241,var(--tw-text-opacity)); }

.text-gray-200 { --tw-text-opacity: 1; color: rgba(217,217,227,var(--tw-text-opacity)); }

.text-gray-300 { --tw-text-opacity: 1; color: rgba(197,197,210,var(--tw-text-opacity)); }

.text-gray-400 { --tw-text-opacity: 1; color: rgba(172,172,190,var(--tw-text-opacity)); }

.text-gray-50 { --tw-text-opacity: 1; color: rgba(247,247,248,var(--tw-text-opacity)); }

.text-gray-500 { --tw-text-opacity: 1; color: rgba(142,142,160,var(--tw-text-opacity)); }

.text-gray-600 { --tw-text-opacity: 1; color: rgba(86,88,105,var(--tw-text-opacity)); }

.text-gray-600\/50 { color: rgba(86, 88, 105, 0.5); }

.text-gray-700 { --tw-text-opacity: 1; color: rgba(64,65,79,var(--tw-text-opacity)); }

.text-gray-800 { --tw-text-opacity: 1; color: rgba(52,53,65,var(--tw-text-opacity)); }

.text-gray-900 { --tw-text-opacity: 1; color: rgba(32,33,35,var(--tw-text-opacity)); }

.text-green-500 { --tw-text-opacity: 1; color: rgba(25,195,125,var(--tw-text-opacity)); }

.text-green-600 { --tw-text-opacity: 1; color: rgba(16,163,127,var(--tw-text-opacity)); }

.text-green-700 { --tw-text-opacity: 1; color: rgba(26,127,100,var(--tw-text-opacity)); }

.text-link-base { --tw-text-opacity: 1; color: rgba(41,100,170,var(--tw-text-opacity)); }

.text-orange-300 { --tw-text-opacity: 1; color: rgba(255,160,69,var(--tw-text-opacity)); }

.text-orange-400 { --tw-text-opacity: 1; color: rgba(255,128,82,var(--tw-text-opacity)); }

.text-orange-500 { --tw-text-opacity: 1; color: rgba(224,108,43,var(--tw-text-opacity)); }

.text-red-400 { --tw-text-opacity: 1; color: rgba(248,113,113,var(--tw-text-opacity)); }

.text-red-500 { --tw-text-opacity: 1; color: rgba(239,68,68,var(--tw-text-opacity)); }

.text-red-600 { --tw-text-opacity: 1; color: rgba(220,38,38,var(--tw-text-opacity)); }

.text-red-700 { --tw-text-opacity: 1; color: rgba(185,28,28,var(--tw-text-opacity)); }

.text-red-800 { --tw-text-opacity: 1; color: rgba(153,27,27,var(--tw-text-opacity)); }

.text-token-text-primary { color: var(--text-primary); }

.text-token-text-secondary { color: var(--text-secondary); }

.text-token-text-tertiary { color: var(--text-tertiary); }

.text-transparent { color: transparent; }

.text-white { --tw-text-opacity: 1; color: rgba(255,255,255,var(--tw-text-opacity)); }

.text-white\/25 { color: rgba(255, 255, 255, 0.25); }

.text-white\/50 { color: rgba(255, 255, 255, 0.5); }

.text-white\/80 { color: rgba(255, 255, 255, 0.8); }

.text-yellow-500 { --tw-text-opacity: 1; color: rgba(234,179,8,var(--tw-text-opacity)); }

.text-yellow-700 { --tw-text-opacity: 1; color: rgba(161,98,7,var(--tw-text-opacity)); }

.text-yellow-800 { --tw-text-opacity: 1; color: rgba(133,77,14,var(--tw-text-opacity)); }

.text-yellow-900 { --tw-text-opacity: 1; color: rgba(146,114,1,var(--tw-text-opacity)); }

.underline { text-decoration-line: underline; }

.line-through { text-decoration-line: line-through; }

.\!no-underline { text-decoration-line: none !important; }

.antialiased { -webkit-font-smoothing: antialiased; }

.placeholder-gray-500::-webkit-input-placeholder { --tw-placeholder-opacity: 1; color: rgba(142,142,160,var(--tw-placeholder-opacity)); }

.placeholder-gray-500::placeholder { --tw-placeholder-opacity: 1; color: rgba(142,142,160,var(--tw-placeholder-opacity)); }

.opacity-0 { opacity: 0; }

.opacity-100 { opacity: 1; }

.opacity-20 { opacity: 0.2; }

.opacity-25 { opacity: 0.25; }

.opacity-50 { opacity: 0.5; }

.opacity-70 { opacity: 0.7; }

.opacity-75 { opacity: 0.75; }

.opacity-80 { opacity: 0.8; }

.\!shadow-none { --tw-shadow: 0 0 transparent !important; --tw-shadow-colored: 0 0 transparent !important; box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow) !important; }

.shadow { --tw-shadow: 0 1px 3px 0 rgba(0,0,0,.1),0 1px 2px -1px rgba(0,0,0,.1); --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color),0 1px 2px -1px var(--tw-shadow-color); }

.shadow, .shadow-\[0_1px_1px_0_rgba\(0\,0\,0\,0\.08\)\] { box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow); }

.shadow-\[0_1px_1px_0_rgba\(0\,0\,0\,0\.08\)\] { --tw-shadow: 0 1px 1px 0 rgba(0,0,0,.08); --tw-shadow-colored: 0 1px 1px 0 var(--tw-shadow-color); }

.shadow-\[0_1px_2px_rgba\(0\,0\,0\,0\.45\)\] { --tw-shadow: 0 1px 2px rgba(0,0,0,.45); --tw-shadow-colored: 0 1px 2px var(--tw-shadow-color); }

.shadow-\[0_1px_2px_rgba\(0\,0\,0\,0\.45\)\], .shadow-\[0_1px_7px_0_rgba\(0\,0\,0\,0\.03\)\] { box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow); }

.shadow-\[0_1px_7px_0_rgba\(0\,0\,0\,0\.03\)\] { --tw-shadow: 0 1px 7px 0 rgba(0,0,0,.03); --tw-shadow-colored: 0 1px 7px 0 var(--tw-shadow-color); }

.shadow-\[0_1px_7px_0px_rgba\(0\,0\,0\,0\.06\)\] { --tw-shadow: 0 1px 7px 0px rgba(0,0,0,.06); --tw-shadow-colored: 0 1px 7px 0px var(--tw-shadow-color); }

.shadow-\[0_1px_7px_0px_rgba\(0\,0\,0\,0\.06\)\], .shadow-\[0_2px_12px_0px_rgba\(0\,0\,0\,0\.08\)\] { box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow); }

.shadow-\[0_2px_12px_0px_rgba\(0\,0\,0\,0\.08\)\] { --tw-shadow: 0 2px 12px 0px rgba(0,0,0,.08); --tw-shadow-colored: 0 2px 12px 0px var(--tw-shadow-color); }

.shadow-\[0_2px_24px_rgba\(0\,0\,0\,0\.05\)\] { --tw-shadow: 0 2px 24px rgba(0,0,0,.05); --tw-shadow-colored: 0 2px 24px var(--tw-shadow-color); }

.shadow-\[0_2px_24px_rgba\(0\,0\,0\,0\.05\)\], .shadow-\[0_3px_3px_0_rgba\(0\,0\,0\,0\.05\)\] { box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow); }

.shadow-\[0_3px_3px_0_rgba\(0\,0\,0\,0\.05\)\] { --tw-shadow: 0 3px 3px 0 rgba(0,0,0,.05); --tw-shadow-colored: 0 3px 3px 0 var(--tw-shadow-color); }

.shadow-\[0px_1px_6px_0px_rgba\(0\,0\,0\,0\.02\)\] { --tw-shadow: 0px 1px 6px 0px rgba(0,0,0,.02); --tw-shadow-colored: 0px 1px 6px 0px var(--tw-shadow-color); }

.shadow-\[0px_1px_6px_0px_rgba\(0\,0\,0\,0\.02\)\], .shadow-\[0px_4px_14px_rgba\(0\,0\,0\,0\.06\)\] { box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow); }

.shadow-\[0px_4px_14px_rgba\(0\,0\,0\,0\.06\)\] { --tw-shadow: 0px 4px 14px rgba(0,0,0,.06); --tw-shadow-colored: 0px 4px 14px var(--tw-shadow-color); }

.shadow-\[inset_0_0_0_1px_rgba\(0\,0\,0\,0\.1\)\] { --tw-shadow: inset 0 0 0 1px rgba(0,0,0,.1); --tw-shadow-colored: inset 0 0 0 1px var(--tw-shadow-color); }

.shadow-\[inset_0_0_0_1px_rgba\(0\,0\,0\,0\.1\)\], .shadow-lg { box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow); }

.shadow-lg { --tw-shadow: 0 10px 15px -3px rgba(0,0,0,.1),0 4px 6px -4px rgba(0,0,0,.1); --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color),0 4px 6px -4px var(--tw-shadow-color); }

.shadow-md { --tw-shadow: 0 4px 6px -1px rgba(0,0,0,.1),0 2px 4px -2px rgba(0,0,0,.1); --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color),0 2px 4px -2px var(--tw-shadow-color); }

.shadow-md, .shadow-none { box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow); }

.shadow-none { --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; }

.shadow-sm { --tw-shadow: 0 1px 2px 0 rgba(0,0,0,.05); --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color); }

.shadow-sm, .shadow-xl { box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow); }

.shadow-xl { --tw-shadow: 0 20px 25px -5px rgba(0,0,0,.1),0 8px 10px -6px rgba(0,0,0,.1); --tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color),0 8px 10px -6px var(--tw-shadow-color); }

.shadow-xs { --tw-shadow: 0 0 15px rgba(0,0,0,.1); --tw-shadow-colored: 0 0 15px var(--tw-shadow-color); }

.shadow-xs, .shadow-xxs { box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow); }

.shadow-xxs { --tw-shadow: 0 1px 7px 0 rgba(0,0,0,.03); --tw-shadow-colored: 0 1px 7px 0 var(--tw-shadow-color); }

.outline-none { outline: transparent solid 2px; outline-offset: 2px; }

.outline { outline-style: solid; }

.outline-0 { outline-width: 0px; }

.outline-2 { outline-width: 2px; }

.outline-offset-2 { outline-offset: 2px; }

.ring-0 { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(var(--tw-ring-offset-width)) var(--tw-ring-color); }

.ring-0, .ring-1 { box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent); }

.ring-1 { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color); }

.ring-2 { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color); box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent); }

.ring-inset { --tw-ring-inset: inset; }

.ring-black { --tw-ring-opacity: 1; --tw-ring-color: rgba(0,0,0,var(--tw-ring-opacity)); }

.ring-black\/10 { --tw-ring-color: rgba(0,0,0,.1); }

.ring-white { --tw-ring-opacity: 1; --tw-ring-color: rgba(255,255,255,var(--tw-ring-opacity)); }

.ring-opacity-5 { --tw-ring-opacity: 0.05; }

.ring-offset-4 { --tw-ring-offset-width: 4px; }

.ring-offset-black { --tw-ring-offset-color: #000; }

.blur { --tw-blur: blur(8px); }

.blur, .blur-xl { filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow); }

.blur-xl { --tw-blur: blur(24px); }

.filter { filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow); }

.backdrop-blur-sm { --tw-backdrop-blur: blur(4px); }

.backdrop-blur-sm, .backdrop-blur-xl { backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia); }

.backdrop-blur-xl { --tw-backdrop-blur: blur(24px); }

.transition { transition-duration: 0.15s; transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-transform, -webkit-filter, -webkit-backdrop-filter; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.transition-\[flex-basis\] { transition-duration: 0.15s; transition-property: flex-basis; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.transition-\[stroke-dashoffset\] { transition-duration: 0.15s; transition-property: stroke-dashoffset; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.transition-\[transform\,opacity\] { transition-duration: 0.15s; transition-property: transform, opacity, -webkit-transform; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.transition-all { transition-duration: 0.15s; transition-property: all; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.transition-colors { transition-duration: 0.15s; transition-property: color, background-color, border-color, text-decoration-color, fill, stroke; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.transition-opacity { transition-duration: 0.15s; transition-property: opacity; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.transition-transform { transition-duration: 0.15s; transition-property: transform, -webkit-transform; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.transition-width { transition-duration: 0.15s; transition-property: width; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.delay-100 { transition-delay: 0.1s; }

.delay-\[300ms\] { transition-delay: 0.3s; }

.delay-\[500ms\] { transition-delay: 0.5s; }

.duration-100 { transition-duration: 0.1s; }

.duration-150 { transition-duration: 0.15s; }

.duration-200 { transition-duration: 0.2s; }

.duration-300 { transition-duration: 0.3s; }

.duration-500 { transition-duration: 0.5s; }

.ease-in { transition-timing-function: cubic-bezier(0.4, 0, 1, 1); }

.ease-in-out { transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.ease-linear { transition-timing-function: linear; }

.ease-out { transition-timing-function: cubic-bezier(0, 0, 0.2, 1); }

.will-change-\[opacity\,transform\] { will-change: opacity, transform; }

.will-change-transform { will-change: transform; }

.\[grid-area\:_title\] { grid-area: title / title / title / title; }

.\[grid-template-areas\:_\'title_action\'_\'description_action\'\] { grid-template-areas: "title action" "description action"; }

body, html { height: 100%; }

.dark body, .dark html { --tw-bg-opacity: 1; background-color: rgba(52,53,65,var(--tw-bg-opacity)); }

#__next, #root { height: 100%; }

.markdown { max-width: none; }

.markdown h1 { font-weight: 600; }

.markdown h1:first-child { margin-top: 0px; }

.markdown h2 { font-weight: 600; margin-bottom: 1rem; margin-top: 2rem; }

.markdown h2:first-child { margin-top: 0px; }

.markdown h3 { font-weight: 600; margin-bottom: 0.5rem; margin-top: 1rem; }

.markdown h3:first-child { margin-top: 0px; }

.markdown h4 { font-weight: 400; margin-bottom: 0.5rem; margin-top: 1rem; }

.markdown h4:first-child { margin-top: 0px; }

.markdown h5 { font-weight: 600; }

.markdown h5:first-child { margin-top: 0px; }

.markdown blockquote { --tw-border-opacity: 1; border-color: rgba(142,142,160,var(--tw-border-opacity)); border-left-width: 2px; line-height: 1.5rem; margin: 0px; padding-bottom: 0.5rem; padding-left: 1rem; padding-top: 0.5rem; }

.markdown blockquote > p { margin: 0px; }

.markdown blockquote > p::after, .markdown blockquote > p::before { display: none; }

.markdown ol { counter-reset: list-number 0; display: flex; flex-direction: column; list-style-type: none; padding-left: 0px; }

.markdown ol:first-child > li { padding-left: 1.25rem; }

.markdown ol > li { counter-increment: list-number 1; display: block; margin-bottom: 0px; margin-top: 0px; min-height: 28px; }

.markdown ol > li::before { --tw-translate-x: -100%; --tw-numeric-spacing: tabular-nums; --tw-text-opacity: 1; color: rgba(142,142,160,var(--tw-text-opacity)); content: counters(list-number, ".") "."; font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction); padding-right: 0.5rem; position: absolute; transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

:is(.dark .markdown ol > li)::before { --tw-text-opacity: 1; color: rgba(172,172,190,var(--tw-text-opacity)); }

.markdown ul { display: flex; flex-direction: column; padding-left: 0px; }

.markdown ul:first-child > li { padding-left: 1.25rem; }

.markdown ul > li { display: block; margin: 0px; min-height: 28px; }

.markdown ul > li::before { --tw-translate-x: -100%; content: "â¢"; font-size: 0.875rem; line-height: 1.25rem; padding-right: 0.5rem; position: absolute; transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.markdown ol li > p, .markdown ol li > pre, .markdown ul li > p, .markdown ul li > pre { margin: 0px; }

.markdown ol ol, .markdown ol ul, .markdown ul ol, .markdown ul ul { margin-bottom: 0px; margin-left: 1rem; margin-top: 0px; }

.markdown table { --tw-border-spacing-x: 0px; --tw-border-spacing-y: 0px; border-collapse: separate; border-spacing: var(--tw-border-spacing-x) var(--tw-border-spacing-y); width: 100%; }

.markdown th { background-color: rgba(236, 236, 241, 0.2); border-bottom-width: 1px; border-left-width: 1px; border-top-width: 1px; padding: 0.25rem 0.75rem; }

.markdown th:first-child { border-top-left-radius: 0.375rem; }

.markdown th:last-child { border-right-width: 1px; border-top-right-radius: 0.375rem; }

.markdown td { border-bottom-width: 1px; border-left-width: 1px; padding: 0.25rem 0.75rem; }

.markdown td:last-child { border-right-width: 1px; }

.markdown tbody tr:last-child td:first-child { border-bottom-left-radius: 0.375rem; }

.markdown tbody tr:last-child td:last-child { border-bottom-right-radius: 0.375rem; }

.markdown a { --tw-text-opacity: 1; color: rgba(41,100,170,var(--tw-text-opacity)); font-weight: 400; text-decoration-line: none; }

.markdown a:hover { --tw-text-opacity: 1; color: rgba(98,154,221,var(--tw-text-opacity)); }

.gizmo .markdown > :not(pre), .gizmo .markdown > :not(pre) > * { color: var(--text-primary); }

.conversation-item-time::before { content: attr(data-time); }

button.scroll-convo { display: none; }

@-webkit-keyframes blink { 
  100% { visibility: hidden; }
}

@keyframes blink { 
  100% { visibility: hidden; }
}

.animate-flash { animation: 2s steps(60, start) 0s 1 normal none running flash; }

@-webkit-keyframes flash { 
  0% { background-color: rgba(255, 255, 255, 0.4); }
}

@keyframes flash { 
  0% { background-color: rgba(255, 255, 255, 0.4); }
}

.result-streaming > :not(ol):not(ul):not(pre):last-child::after, .result-streaming > pre:last-child code::after { content: "â"; font-family: "SÃ¶hne Circle", system-ui, -apple-system, "Segoe UI", Roboto, Ubuntu, Cantarell, "Noto Sans", sans-serif; margin-left: 0.25rem; vertical-align: baseline; }

.result-thinking:empty:last-child::after { -webkit-font-smoothing: subpixel-antialiased; animation: 1.25s ease-in-out 0s infinite normal none running pulseSize; backface-visibility: hidden; background-color: var(--text-primary); border-radius: 50%; box-sizing: border-box; content: " "; display: block; height: 12px; position: absolute; top: 7px; transform: translateZ(0px); transform-origin: center center; width: 12px; will-change: transform; }

@supports (selector(:has(*))) {
  .result-streaming > ol:last-child > li:last-child > ol:last-child > li:last-child::after, .result-streaming > ol:last-child > li:last-child > ol:last-child > li:last-child > ol:last-child > li:last-child::after, .result-streaming > ol:last-child > li:last-child > ol:last-child > li:last-child > ul:last-child > li:last-child::after, .result-streaming > ol:last-child > li:last-child > ul:last-child > li:last-child::after, .result-streaming > ol:last-child > li:last-child > ul:last-child > li:last-child > ol:last-child > li:last-child::after, .result-streaming > ol:last-child > li:last-child > ul:last-child > li:last-child > ul:last-child > li:last-child::after, .result-streaming > ul:last-child > li:last-child > ol:last-child > li:last-child::after, .result-streaming > ul:last-child > li:last-child > ol:last-child > li:last-child > ol:last-child > li:last-child::after, .result-streaming > ul:last-child > li:last-child > ol:last-child > li:last-child > ul:last-child > li:last-child::after, .result-streaming > ul:last-child > li:last-child > ul:last-child > li:last-child::after, .result-streaming > ul:last-child > li:last-child > ul:last-child > li:last-child > ol:last-child > li:last-child::after, .result-streaming > ul:last-child > li:last-child > ul:last-child > li:last-child > ul:last-child > li:last-child::after, .result-streaming > ul:last-child > li:last-child[*|\:not-has\(]::after { content: "â"; font-family: "SÃ¶hne Circle", system-ui, -apple-system, "Segoe UI", Roboto, Ubuntu, Cantarell, "Noto Sans", sans-serif; margin-left: 0.25rem; vertical-align: baseline; }
  .result-streaming > ul:last-child > li:last-child:not(:has(* > li))::after { content: "â"; font-family: "SÃ¶hne Circle", system-ui, -apple-system, "Segoe UI", Roboto, Ubuntu, Cantarell, "Noto Sans", sans-serif; margin-left: 0.25rem; vertical-align: baseline; }
  .result-streaming > ol:last-child > li:last-child[*|\:not-has\(]::after { content: "â"; font-family: "SÃ¶hne Circle", system-ui, -apple-system, "Segoe UI", Roboto, Ubuntu, Cantarell, "Noto Sans", sans-serif; margin-left: 0.25rem; vertical-align: baseline; }
  .result-streaming > ol:last-child > li:last-child:not(:has(* > li))::after { content: "â"; font-family: "SÃ¶hne Circle", system-ui, -apple-system, "Segoe UI", Roboto, Ubuntu, Cantarell, "Noto Sans", sans-serif; margin-left: 0.25rem; vertical-align: baseline; }
}

@supports not (selector(:has(*))) {
  .result-streaming > ol:last-child > li:last-child::after, .result-streaming > ul:last-child > li:last-child::after { content: "â"; font-family: "SÃ¶hne Circle", system-ui, -apple-system, "Segoe UI", Roboto, Ubuntu, Cantarell, "Noto Sans", sans-serif; margin-left: 0.25rem; vertical-align: baseline; }
}

@-webkit-keyframes pulseSize { 
  0%, 100% { transform: scaleX(1); }
  50% { transform: scale3d(1.25, 1.25, 1); }
}

@keyframes pulseSize { 
  0%, 100% { transform: scaleX(1); }
  50% { transform: scale3d(1.25, 1.25, 1); }
}

@-webkit-keyframes toast-open { 
  0% { opacity: 0; transform: translateY(-100%); }
  100% { transform: translateY(0px); }
}

@keyframes toast-open { 
  0% { opacity: 0; transform: translateY(-100%); }
  100% { transform: translateY(0px); }
}

@-webkit-keyframes toast-close { 
  0% { opacity: 1; }
  100% { opacity: 0; }
}

@keyframes toast-close { 
  0% { opacity: 1; }
  100% { opacity: 0; }
}

button[data-state="closed"] .toggle-item-button-closed, button[data-state="open"] .toggle-item-button-open { display: none; }

.toast-root { align-items: center; display: flex; flex-direction: column; height: 0px; transition: all 0.24s cubic-bezier(0, 0, 0.2, 1) 0s; }

.toast-root[data-state="entered"], .toast-root[data-state="entering"] { animation: 0.24s cubic-bezier(0.175, 0.885, 0.32, 1.175) 0s 1 normal both running toast-open; }

.toast-root[data-state="exiting"] { animation: 0.12s cubic-bezier(0.4, 0, 1, 1) 0s 1 normal both running toast-close; }

.toast-root .alert-root { box-shadow: rgba(67, 90, 111, 0.3) 0px 0px 1px, rgba(67, 90, 111, 0.3) 0px 5px 8px -4px; flex-shrink: 0; pointer-events: all; }

.interact-bounce { transition-duration: 0.15s; transition-property: transform, -webkit-transform; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.interact-bounce:hover { --tw-scale-x: 1.05; --tw-scale-y: 1.05; }

.interact-bounce:active, .interact-bounce:hover { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.interact-bounce:active { --tw-scale-x: .9; --tw-scale-y: .9; }

.title { font-feature-settings: normal; font-family: SÃ¶hne, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, Ubuntu, Cantarell, "Noto Sans", sans-serif, "Helvetica Neue", Arial, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; font-variation-settings: normal; }

.font-circle { font-family: "SÃ¶hne Circle", system-ui, -apple-system, "Segoe UI", Roboto, Ubuntu, Cantarell, "Noto Sans", sans-serif; }

.icon-xs { stroke-width: 1.5; height: 0.75rem; width: 0.75rem; }

.icon-sm { stroke-width: 2; height: 1rem; width: 1rem; }

.icon-md { stroke-width: 1.5; height: 1.25rem; width: 1.25rem; }

.icon-lg { stroke-width: 1.5; height: 1.5rem; width: 1.5rem; }

.icon-xl { stroke-width: 1.5; height: 1.75rem; width: 1.75rem; }

.icon-2xl { stroke-width: 1.5; height: 2rem; width: 2rem; }

.icon-cover { stroke-width: 1.5; height: 234px; width: 234px; }

.dark .dark\:prose-invert { --tw-prose-body: var(--tw-prose-invert-body); --tw-prose-headings: var(--tw-prose-invert-headings); --tw-prose-lead: var(--tw-prose-invert-lead); --tw-prose-links: var(--tw-prose-invert-links); --tw-prose-bold: var(--tw-prose-invert-bold); --tw-prose-counters: var(--tw-prose-invert-counters); --tw-prose-bullets: var(--tw-prose-invert-bullets); --tw-prose-hr: var(--tw-prose-invert-hr); --tw-prose-quotes: var(--tw-prose-invert-quotes); --tw-prose-quote-borders: var(--tw-prose-invert-quote-borders); --tw-prose-captions: var(--tw-prose-invert-captions); --tw-prose-code: var(--tw-prose-invert-code); --tw-prose-pre-code: var(--tw-prose-invert-pre-code); --tw-prose-pre-bg: var(--tw-prose-invert-pre-bg); --tw-prose-th-borders: var(--tw-prose-invert-th-borders); --tw-prose-td-borders: var(--tw-prose-invert-td-borders); }

.placeholder\:text-gray-300::-webkit-input-placeholder { --tw-text-opacity: 1; color: rgba(197,197,210,var(--tw-text-opacity)); }

.placeholder\:text-gray-300::placeholder { --tw-text-opacity: 1; color: rgba(197,197,210,var(--tw-text-opacity)); }

.placeholder\:text-gray-500::-webkit-input-placeholder { --tw-text-opacity: 1; color: rgba(142,142,160,var(--tw-text-opacity)); }

.placeholder\:text-gray-500::placeholder { --tw-text-opacity: 1; color: rgba(142,142,160,var(--tw-text-opacity)); }

.placeholder\:text-gray-600::-webkit-input-placeholder { --tw-text-opacity: 1; color: rgba(86,88,105,var(--tw-text-opacity)); }

.placeholder\:text-gray-600::placeholder { --tw-text-opacity: 1; color: rgba(86,88,105,var(--tw-text-opacity)); }

.after\:content-\[\'\"\'\]::after, .before\:content-\[\'\"\'\]::before { --tw-content: '"'; content: var(--tw-content); }

.first\:mt-0:first-child { margin-top: 0px; }

.first\:hidden:first-child { display: none; }

.last\:mb-0:last-child { margin-bottom: 0px; }

.last\:mb-2:last-child { margin-bottom: 0.5rem; }

.last\:border-0:last-child { border-width: 0px; }

.last\:border-b:last-child { border-bottom-width: 1px; }

.last\:border-b-0:last-child { border-bottom-width: 0px; }

.last\:pr-0:last-child { padding-right: 0px; }

.last-of-type\:border-b-0:last-of-type { border-bottom-width: 0px; }

.checked\:border-blue-600:checked { --tw-border-opacity: 1; border-color: rgba(37,99,235,var(--tw-border-opacity)); }

.checked\:bg-blue-600:checked { --tw-bg-opacity: 1; background-color: rgba(37,99,235,var(--tw-bg-opacity)); }

.empty\:hidden:empty { display: none; }

.focus-within\:z-10[focus-within] { z-index: 10; }

.focus-within\:z-10:focus-within { z-index: 10; }

.focus-within\:border-indigo-600[focus-within] { --tw-border-opacity: 1; border-color: rgba(79,70,229,var(--tw-border-opacity)); }

.focus-within\:border-indigo-600:focus-within { --tw-border-opacity: 1; border-color: rgba(79,70,229,var(--tw-border-opacity)); }

.focus-within\:border-token-border-heavy[focus-within] { border-color: var(--border-heavy); }

.focus-within\:border-token-border-heavy:focus-within { border-color: var(--border-heavy); }

.focus-within\:shadow-\[0_3px_3px_0_rgba\(0\,0\,0\,0\.05\)\][focus-within] { --tw-shadow: 0 3px 3px 0 rgba(0,0,0,.05); --tw-shadow-colored: 0 3px 3px 0 var(--tw-shadow-color); box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow); }

.focus-within\:shadow-\[0_3px_3px_0_rgba\(0\,0\,0\,0\.05\)\]:focus-within { --tw-shadow: 0 3px 3px 0 rgba(0,0,0,.05); --tw-shadow-colored: 0 3px 3px 0 var(--tw-shadow-color); box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow); }

.focus-within\:ring-1[focus-within] { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color); box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent); }

.focus-within\:ring-1:focus-within { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color); box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent); }

.focus-within\:ring-indigo-600[focus-within] { --tw-ring-opacity: 1; --tw-ring-color: rgba(79,70,229,var(--tw-ring-opacity)); }

.focus-within\:ring-indigo-600:focus-within { --tw-ring-opacity: 1; --tw-ring-color: rgba(79,70,229,var(--tw-ring-opacity)); }

.hover\:cursor-pointer:hover { cursor: pointer; }

.hover\:overflow-visible:hover { overflow: visible; }

.hover\:whitespace-normal:hover { white-space: normal; }

.hover\:border-\[var\(--avatar-color\)\]:hover { border-color: var(--avatar-color); }

.hover\:border-black\/10:hover { border-color: rgba(0, 0, 0, 0.1); }

.hover\:border-gray-100:hover { --tw-border-opacity: 1; border-color: rgba(236,236,241,var(--tw-border-opacity)); }

.hover\:border-gray-200:hover { --tw-border-opacity: 1; border-color: rgba(217,217,227,var(--tw-border-opacity)); }

.hover\:border-gray-300:hover { --tw-border-opacity: 1; border-color: rgba(197,197,210,var(--tw-border-opacity)); }

.hover\:\!bg-gray-50:hover { --tw-bg-opacity: 1 !important; background-color: rgba(247,247,248,var(--tw-bg-opacity)) !important; }

.hover\:bg-\[\#0000FF\]:hover { --tw-bg-opacity: 1; background-color: rgba(0,0,255,var(--tw-bg-opacity)); }

.hover\:bg-\[\#0077FF\]:hover { --tw-bg-opacity: 1; background-color: rgba(0,119,255,var(--tw-bg-opacity)); }

.hover\:bg-\[\#6E73FC\]:hover { --tw-bg-opacity: 1; background-color: rgba(110,115,252,var(--tw-bg-opacity)); }

.hover\:bg-black:hover { --tw-bg-opacity: 1; background-color: rgba(0,0,0,var(--tw-bg-opacity)); }

.hover\:bg-black\/10:hover { background-color: rgba(0, 0, 0, 0.1); }

.hover\:bg-brand-green\/30:hover { background-color: rgba(25, 195, 125, 0.3); }

.hover\:bg-brand-purple:hover { --tw-bg-opacity: 1; background-color: rgba(171,104,255,var(--tw-bg-opacity)); }

.hover\:bg-gray-100:hover { --tw-bg-opacity: 1; background-color: rgba(236,236,241,var(--tw-bg-opacity)); }

.hover\:bg-gray-200:hover { --tw-bg-opacity: 1; background-color: rgba(217,217,227,var(--tw-bg-opacity)); }

.hover\:bg-gray-300:hover { --tw-bg-opacity: 1; background-color: rgba(197,197,210,var(--tw-bg-opacity)); }

.hover\:bg-gray-50:hover { --tw-bg-opacity: 1; background-color: rgba(247,247,248,var(--tw-bg-opacity)); }

.hover\:bg-gray-500\/10:hover { background-color: rgba(141, 141, 160, 0.1); }

.hover\:bg-gray-700:hover { --tw-bg-opacity: 1; background-color: rgba(64,65,79,var(--tw-bg-opacity)); }

.hover\:bg-green-100:hover { --tw-bg-opacity: 1; background-color: rgba(210,244,211,var(--tw-bg-opacity)); }

.hover\:bg-token-surface-secondary:hover { background-color: var(--surface-secondary); }

.hover\:bg-token-surface-tertiary:hover { background-color: var(--surface-tertiary); }

.hover\:bg-transparent:hover { background-color: transparent; }

.hover\:bg-white\/40:hover { background-color: rgba(255, 255, 255, 0.4); }

.hover\:pr-14:hover { padding-right: 3.5rem; }

.hover\:pr-4:hover { padding-right: 1rem; }

.hover\:text-black:hover { --tw-text-opacity: 1; color: rgba(0,0,0,var(--tw-text-opacity)); }

.hover\:text-black\/50:hover { color: rgba(0, 0, 0, 0.5); }

.hover\:text-black\/70:hover { color: rgba(0, 0, 0, 0.7); }

.hover\:text-blue-600:hover { --tw-text-opacity: 1; color: rgba(37,99,235,var(--tw-text-opacity)); }

.hover\:text-gray-200:hover { --tw-text-opacity: 1; color: rgba(217,217,227,var(--tw-text-opacity)); }

.hover\:text-gray-300:hover { --tw-text-opacity: 1; color: rgba(197,197,210,var(--tw-text-opacity)); }

.hover\:text-gray-400:hover { --tw-text-opacity: 1; color: rgba(172,172,190,var(--tw-text-opacity)); }

.hover\:text-gray-600:hover { --tw-text-opacity: 1; color: rgba(86,88,105,var(--tw-text-opacity)); }

.hover\:text-gray-700:hover { --tw-text-opacity: 1; color: rgba(64,65,79,var(--tw-text-opacity)); }

.hover\:text-gray-800:hover { --tw-text-opacity: 1; color: rgba(52,53,65,var(--tw-text-opacity)); }

.hover\:text-gray-900:hover { --tw-text-opacity: 1; color: rgba(32,33,35,var(--tw-text-opacity)); }

.hover\:text-gray-950:hover { --tw-text-opacity: 1; color: rgba(5,5,9,var(--tw-text-opacity)); }

.hover\:text-green-700:hover { --tw-text-opacity: 1; color: rgba(26,127,100,var(--tw-text-opacity)); }

.hover\:text-link-hover:hover { --tw-text-opacity: 1; color: rgba(98,154,221,var(--tw-text-opacity)); }

.hover\:text-red-500:hover { --tw-text-opacity: 1; color: rgba(239,68,68,var(--tw-text-opacity)); }

.hover\:text-red-700:hover { --tw-text-opacity: 1; color: rgba(185,28,28,var(--tw-text-opacity)); }

.hover\:text-token-text-primary:hover { color: var(--text-primary); }

.hover\:text-token-text-secondary:hover { color: var(--text-secondary); }

.hover\:text-white\/40:hover { color: rgba(255, 255, 255, 0.4); }

.hover\:underline:hover { text-decoration-line: underline; }

.hover\:\!opacity-100:hover { opacity: 1 !important; }

.hover\:opacity-100:hover { opacity: 1; }

.hover\:opacity-20:hover { opacity: 0.2; }

.hover\:opacity-70:hover { opacity: 0.7; }

.hover\:opacity-75:hover { opacity: 0.75; }

.hover\:opacity-80:hover { opacity: 0.8; }

.hover\:shadow-\[0_1px_7px_0px_rgba\(0\,0\,0\,0\.06\)\]:hover { --tw-shadow: 0 1px 7px 0px rgba(0,0,0,.06); --tw-shadow-colored: 0 1px 7px 0px var(--tw-shadow-color); box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow); }

.hover\:brightness-90:hover { --tw-brightness: brightness(.9); filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow); }

.hover\:delay-0:hover { transition-delay: 0s; }

.focus\:border-brand-green:focus, .focus\:border-green-500:focus { --tw-border-opacity: 1; border-color: rgba(25,195,125,var(--tw-border-opacity)); }

.focus\:border-green-600:focus { --tw-border-opacity: 1; border-color: rgba(16,163,127,var(--tw-border-opacity)); }

.focus\:border-orange-400:focus { --tw-border-opacity: 1; border-color: rgba(255,128,82,var(--tw-border-opacity)); }

.focus\:border-red-500:focus { --tw-border-opacity: 1; border-color: rgba(239,68,68,var(--tw-border-opacity)); }

.focus\:bg-gray-100:focus { --tw-bg-opacity: 1; background-color: rgba(236,236,241,var(--tw-bg-opacity)); }

.focus\:bg-gray-50:focus { --tw-bg-opacity: 1; background-color: rgba(247,247,248,var(--tw-bg-opacity)); }

.focus\:outline-none:focus { outline: transparent solid 2px; outline-offset: 2px; }

.focus\:ring-0:focus { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(var(--tw-ring-offset-width)) var(--tw-ring-color); }

.focus\:ring-0:focus, .focus\:ring-1:focus { box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent); }

.focus\:ring-1:focus { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color); }

.focus\:ring-2:focus { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color); box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent); }

.focus\:ring-inset:focus { --tw-ring-inset: inset; }

.focus\:ring-blue-400:focus { --tw-ring-opacity: 1; --tw-ring-color: rgba(58,136,255,var(--tw-ring-opacity)); }

.focus\:ring-gray-200:focus { --tw-ring-opacity: 1; --tw-ring-color: rgba(217,217,227,var(--tw-ring-opacity)); }

.focus\:ring-green-500:focus { --tw-ring-opacity: 1; --tw-ring-color: rgba(25,195,125,var(--tw-ring-opacity)); }

.focus\:ring-green-600:focus { --tw-ring-opacity: 1; --tw-ring-color: rgba(16,163,127,var(--tw-ring-opacity)); }

.focus\:ring-white:focus { --tw-ring-opacity: 1; --tw-ring-color: rgba(255,255,255,var(--tw-ring-opacity)); }

.focus-visible\:border-blue-500.focus-visible { --tw-border-opacity: 1; border-color: rgba(69,89,164,var(--tw-border-opacity)); }

.focus-visible\:border-blue-500:focus-visible { --tw-border-opacity: 1; border-color: rgba(69,89,164,var(--tw-border-opacity)); }

.focus-visible\:ring-0.focus-visible { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(var(--tw-ring-offset-width)) var(--tw-ring-color); box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent); }

.focus-visible\:ring-0:focus-visible { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(var(--tw-ring-offset-width)) var(--tw-ring-color); box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent); }

.enabled\:bg-brand-purple:enabled { --tw-bg-opacity: 1; background-color: rgba(171,104,255,var(--tw-bg-opacity)); }

.disabled\:bottom-0:disabled { bottom: 0px; }

.disabled\:bottom-0\.5:disabled { bottom: 0.125rem; }

.disabled\:cursor-auto:disabled { cursor: auto; }

.disabled\:text-gray-300:disabled { --tw-text-opacity: 1; color: rgba(197,197,210,var(--tw-text-opacity)); }

.disabled\:text-gray-400:disabled { --tw-text-opacity: 1; color: rgba(172,172,190,var(--tw-text-opacity)); }

.disabled\:text-token-border-medium:disabled { color: var(--border-medium); }

.disabled\:opacity-20:disabled { opacity: 0.2; }

.disabled\:opacity-40:disabled { opacity: 0.4; }

.disabled\:opacity-50:disabled { opacity: 0.5; }

.disabled\:hover\:bg-gray-900:hover:disabled { --tw-bg-opacity: 1; background-color: rgba(32,33,35,var(--tw-bg-opacity)); }

.group[focus-within] .group-focus-within\:flex { display: flex; }

.group:focus-within .group-focus-within\:flex { display: flex; }

.group:hover .group-hover\:visible, .group\/dalle-image:hover .group-hover\/dalle-image\:visible { visibility: visible; }

.group\/tool-expander-closed:hover .group-hover\/tool-expander-closed\:block, .group\/tool-expander-open:hover .group-hover\/tool-expander-open\:block { display: block; }

.group:hover .group-hover\:border-t-\[\#0077FF\] { --tw-border-opacity: 1; border-top-color: rgba(0,119,255,var(--tw-border-opacity)); }

.group\/options:hover .group-hover\/options\:bg-transparent { background-color: transparent; }

.group\/toggle:hover .group-hover\/toggle\:bg-red-500 { --tw-bg-opacity: 1; background-color: rgba(239,68,68,var(--tw-bg-opacity)); }

.group:hover .group-hover\:from-gray-100 { --tw-gradient-from: #ececf1 var(--tw-gradient-from-position); --tw-gradient-to: rgba(236,236,241,0) var(--tw-gradient-to-position); --tw-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to); }

.group:hover .group-hover\:from-token-surface-tertiary { --tw-gradient-from: var(--surface-tertiary) var(--tw-gradient-from-position); --tw-gradient-to: hsla(0,0%,100%,0) var(--tw-gradient-to-position); --tw-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to); }

.group\/button:hover .group-hover\/button\:text-blue-500 { --tw-text-opacity: 1; color: rgba(69,89,164,var(--tw-text-opacity)); }

.group\/button:hover .group-hover\/button\:text-brand-green { --tw-text-opacity: 1; color: rgba(25,195,125,var(--tw-text-opacity)); }

.group\/button:hover .group-hover\/button\:text-brand-purple { --tw-text-opacity: 1; color: rgba(171,104,255,var(--tw-text-opacity)); }

.group\/button:hover .group-hover\/button\:text-orange-500 { --tw-text-opacity: 1; color: rgba(224,108,43,var(--tw-text-opacity)); }

.group\/button:hover .group-hover\/button\:text-red-500 { --tw-text-opacity: 1; color: rgba(239,68,68,var(--tw-text-opacity)); }

.group\/option:hover .group-hover\/option\:\!text-brand-green { --tw-text-opacity: 1 !important; color: rgba(25,195,125,var(--tw-text-opacity)) !important; }

.group\/option:hover .group-hover\/option\:\!text-brand-purple { --tw-text-opacity: 1 !important; color: rgba(171,104,255,var(--tw-text-opacity)) !important; }

.group\/option:hover .group-hover\/option\:text-gray-100 { --tw-text-opacity: 1; color: rgba(236,236,241,var(--tw-text-opacity)); }

.group\/option:hover .group-hover\/option\:text-gray-800 { --tw-text-opacity: 1; color: rgba(52,53,65,var(--tw-text-opacity)); }

.group\/options:hover .group-hover\/options\:text-gray-500 { --tw-text-opacity: 1; color: rgba(142,142,160,var(--tw-text-opacity)); }

.group\/options:hover .group-hover\/options\:opacity-0 { opacity: 0; }

.group:hover .group-hover\:opacity-100 { opacity: 1; }

.group:hover .group-hover\:opacity-50 { opacity: 0.5; }

.radix-disabled\:pointer-events-none[data-disabled] { pointer-events: none; }

.radix-disabled\:cursor-auto[data-disabled] { cursor: auto; }

.radix-disabled\:bg-transparent[data-disabled] { background-color: transparent; }

.radix-disabled\:text-gray-300[data-disabled] { --tw-text-opacity: 1; color: rgba(197,197,210,var(--tw-text-opacity)); }

.radix-disabled\:text-gray-500[data-disabled] { --tw-text-opacity: 1; color: rgba(142,142,160,var(--tw-text-opacity)); }

.radix-highlighted\:bg-gray-50[data-highlighted] { --tw-bg-opacity: 1; background-color: rgba(247,247,248,var(--tw-bg-opacity)); }

.radix-highlighted\:outline-none[data-highlighted] { outline: transparent solid 2px; outline-offset: 2px; }

.radix-state-active\:bg-gray-800[data-state="active"] { --tw-bg-opacity: 1; background-color: rgba(52,53,65,var(--tw-bg-opacity)); }

.radix-state-active\:text-gray-600[data-state="active"] { --tw-text-opacity: 1; color: rgba(86,88,105,var(--tw-text-opacity)); }

.radix-state-active\:text-white[data-state="active"] { --tw-text-opacity: 1; color: rgba(255,255,255,var(--tw-text-opacity)); }

.group[data-state="active"] .group-radix-state-active\:fill-white { fill: rgb(255, 255, 255); }

.radix-state-checked\:translate-x-\[19px\][data-state="checked"] { --tw-translate-x: 19px; transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.radix-state-checked\:bg-green-500[data-state="checked"] { --tw-bg-opacity: 1; background-color: rgba(25,195,125,var(--tw-bg-opacity)); }

.radix-state-checked\:bg-green-600[data-state="checked"] { --tw-bg-opacity: 1; background-color: rgba(16,163,127,var(--tw-bg-opacity)); }

.radix-state-checked\:text-white[data-state="checked"] { --tw-text-opacity: 1; color: rgba(255,255,255,var(--tw-text-opacity)); }

@-webkit-keyframes contentShow { 
  0% { opacity: 0; transform: scale(0.96); }
  100% { opacity: 1; transform: scale(1); }
}

@keyframes contentShow { 
  0% { opacity: 0; transform: scale(0.96); }
  100% { opacity: 1; transform: scale(1); }
}

.radix-state-open\:animate-contentShow[data-state="open"] { animation: 0.15s cubic-bezier(0.16, 1, 0.3, 1) 0s 1 normal none running contentShow; }

@-webkit-keyframes show { 
  0% { opacity: 0; }
  100% { opacity: 1; }
}

@keyframes show { 
  0% { opacity: 0; }
  100% { opacity: 1; }
}

.radix-state-open\:animate-show[data-state="open"] { animation: 0.1s cubic-bezier(0.16, 1, 0.3, 1) 0s 1 normal none running show; }

.radix-state-open\:bg-gray-50[data-state="open"] { --tw-bg-opacity: 1; background-color: rgba(247,247,248,var(--tw-bg-opacity)); }

.radix-state-open\:text-gray-600[data-state="open"] { --tw-text-opacity: 1; color: rgba(86,88,105,var(--tw-text-opacity)); }

.radix-state-open\:text-token-text-secondary[data-state="open"] { color: var(--text-secondary); }

.radix-side-bottom\:animate-slideDownAndFade[data-side="bottom"] { animation: 0.4s cubic-bezier(0.16, 1, 0.3, 1) 0s 1 normal none running slideDownAndFade; }

@-webkit-keyframes slideUpAndFade { 
  0% { opacity: 0; transform: translateY(2px); }
  100% { opacity: 1; transform: translateY(0px); }
}

.radix-side-bottom\:animate-slideUpAndFade[data-side="bottom"] { animation: 0.4s cubic-bezier(0.16, 1, 0.3, 1) 0s 1 normal none running slideUpAndFade; }

.radix-side-left\:animate-slideLeftAndFade[data-side="left"] { animation: 0.4s cubic-bezier(0.16, 1, 0.3, 1) 0s 1 normal none running slideLeftAndFade; }

@-webkit-keyframes slideRightAndFade { 
  0% { opacity: 0; transform: translateX(-2px); }
  100% { opacity: 1; transform: translateX(0px); }
}

.radix-side-left\:animate-slideRightAndFade[data-side="left"] { animation: 0.4s cubic-bezier(0.16, 1, 0.3, 1) 0s 1 normal none running slideRightAndFade; }

@keyframes slideLeftAndFade { 
  0% { opacity: 0; transform: translateX(2px); }
  100% { opacity: 1; transform: translateX(0px); }
}

.radix-side-right\:animate-slideLeftAndFade[data-side="right"] { animation: 0.4s cubic-bezier(0.16, 1, 0.3, 1) 0s 1 normal none running slideLeftAndFade; }

@keyframes slideRightAndFade { 
  0% { opacity: 0; transform: translateX(-2px); }
  100% { opacity: 1; transform: translateX(0px); }
}

.radix-side-right\:animate-slideRightAndFade[data-side="right"] { animation: 0.4s cubic-bezier(0.16, 1, 0.3, 1) 0s 1 normal none running slideRightAndFade; }

@keyframes slideDownAndFade { 
  0% { opacity: 0; transform: translateY(-2px); }
  100% { opacity: 1; transform: translateY(0px); }
}

.radix-side-top\:animate-slideDownAndFade[data-side="top"] { animation: 0.4s cubic-bezier(0.16, 1, 0.3, 1) 0s 1 normal none running slideDownAndFade; }

@keyframes slideUpAndFade { 
  0% { opacity: 0; transform: translateY(2px); }
  100% { opacity: 1; transform: translateY(0px); }
}

.radix-side-top\:animate-slideUpAndFade[data-side="top"] { animation: 0.4s cubic-bezier(0.16, 1, 0.3, 1) 0s 1 normal none running slideUpAndFade; }

.group-ui-open\:bg-gray-100.group[data-headlessui-state~="open"] { --tw-bg-opacity: 1; background-color: rgba(236,236,241,var(--tw-bg-opacity)); }

.group:where([data-headlessui-state~="open"]) .group-ui-open\:bg-gray-100 { --tw-bg-opacity: 1; background-color: rgba(236,236,241,var(--tw-bg-opacity)); }

.gizmo .gizmo\:absolute { position: absolute; }

.gizmo .gizmo\:right-0 { right: 0px; }

.gizmo .gizmo\:right-1\/2 { right: 50%; }

.gizmo .gizmo\:top-1 { top: 0.25rem; }

.gizmo .gizmo\:top-1\/2 { top: 50%; }

.gizmo .gizmo\:-ml-6 { margin-left: -1.5rem; }

.gizmo .gizmo\:ml-0 { margin-left: 0px; }

.gizmo .gizmo\:mt-0 { margin-top: 0px; }

.gizmo .gizmo\:h-10 { height: 2.5rem; }

.gizmo .gizmo\:min-h-0 { min-height: 0px; }

.gizmo .gizmo\:w-full { width: 100%; }

.gizmo .gizmo\:-translate-y-1\/2 { --tw-translate-y: -50%; }

.gizmo .gizmo\:-translate-y-1\/2, .gizmo .gizmo\:transform { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.gizmo .gizmo\:gap-1 { gap: 0.25rem; }

.gizmo .gizmo\:gap-1\.5 { gap: 0.375rem; }

.gizmo .gizmo\:gap-2 { gap: 0.5rem; }

.gizmo .gizmo\:gap-3 { gap: 0.75rem; }

.gizmo .gizmo\:rounded-2xl { border-radius: 1rem; }

.gizmo .gizmo\:rounded-lg { border-radius: 0.5rem; }

.gizmo .gizmo\:border-0 { border-width: 0px; }

.gizmo .gizmo\:border-\[rgba\(0\,0\,0\,0\.1\)\], .gizmo .gizmo\:border-black\/10 { border-color: rgba(0, 0, 0, 0.1); }

.gizmo .gizmo\:border-token-border-light { border-color: var(--border-light); }

.gizmo .gizmo\:bg-\[\#F5F5F5\] { --tw-bg-opacity: 1; background-color: rgba(245,245,245,var(--tw-bg-opacity)); }

.gizmo .gizmo\:bg-gray-800 { --tw-bg-opacity: 1; background-color: rgba(52,53,65,var(--tw-bg-opacity)); }

.gizmo .gizmo\:bg-token-surface-primary { background-color: var(--surface-primary); }

.gizmo .gizmo\:bg-transparent { background-color: transparent; }

.gizmo .gizmo\:bg-white { --tw-bg-opacity: 1; background-color: rgba(255,255,255,var(--tw-bg-opacity)); }

.gizmo .gizmo\:from-white { --tw-gradient-from: #fff var(--tw-gradient-from-position); --tw-gradient-to: hsla(0,0%,100%,0) var(--tw-gradient-to-position); --tw-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to); }

.gizmo .gizmo\:pl-0 { padding-left: 0px; }

.gizmo .gizmo\:text-gizmo-gray-600 { --tw-text-opacity: 1; color: rgba(102,102,102,var(--tw-text-opacity)); }

.gizmo .gizmo\:text-gray-500 { --tw-text-opacity: 1; color: rgba(142,142,160,var(--tw-text-opacity)); }

.gizmo .gizmo\:shadow-\[0_0_0_2px_rgba\(255\,255\,255\,0\.95\)\] { --tw-shadow: 0 0 0 2px hsla(0,0%,100%,.95); --tw-shadow-colored: 0 0 0 2px var(--tw-shadow-color); box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow); }

.gizmo .gizmo\:hover\:bg-gray-100:hover { --tw-bg-opacity: 1; background-color: rgba(236,236,241,var(--tw-bg-opacity)); }

.gizmo .gizmo\:enabled\:bg-transparent:enabled { background-color: transparent; }

.dark .dark\:hidden { display: none; }

:is(.dark .dark\:divide-gray-900) > :not([hidden]) ~ :not([hidden]) { --tw-divide-opacity: 1; border-color: rgba(32,33,35,var(--tw-divide-opacity)); }

.dark .dark\:border { border-width: 1px; }

.dark .dark\:border-0 { border-width: 0px; }

.dark .dark\:border-\[\#4E4F60\] { --tw-border-opacity: 1; border-color: rgba(78,79,96,var(--tw-border-opacity)); }

.dark .dark\:border-black { --tw-border-opacity: 1; border-color: rgba(0,0,0,var(--tw-border-opacity)); }

.dark .dark\:border-black\/20 { border-color: rgba(0, 0, 0, 0.2); }

.dark .dark\:border-gray-200 { --tw-border-opacity: 1; border-color: rgba(217,217,227,var(--tw-border-opacity)); }

.dark .dark\:border-gray-300 { --tw-border-opacity: 1; border-color: rgba(197,197,210,var(--tw-border-opacity)); }

.dark .dark\:border-gray-600 { --tw-border-opacity: 1; border-color: rgba(86,88,105,var(--tw-border-opacity)); }

.dark .dark\:border-gray-700 { --tw-border-opacity: 1; border-color: rgba(64,65,79,var(--tw-border-opacity)); }

.dark .dark\:border-gray-800 { --tw-border-opacity: 1; border-color: rgba(52,53,65,var(--tw-border-opacity)); }

.dark .dark\:border-gray-900 { --tw-border-opacity: 1; border-color: rgba(32,33,35,var(--tw-border-opacity)); }

.dark .dark\:border-gray-900\/50 { border-color: rgba(32, 33, 35, 0.5); }

.dark .dark\:border-token-border-light { border-color: var(--border-light); }

.dark .dark\:border-white { --tw-border-opacity: 1; border-color: rgba(255,255,255,var(--tw-border-opacity)); }

.dark .dark\:border-white\/10 { border-color: rgba(255, 255, 255, 0.1); }

.dark .dark\:border-white\/20 { border-color: rgba(255, 255, 255, 0.2); }

.dark .dark\:border-white\/30 { border-color: rgba(255, 255, 255, 0.3); }

.dark .dark\:\!bg-green-800 { --tw-bg-opacity: 1 !important; background-color: rgba(27,93,74,var(--tw-bg-opacity)) !important; }

.dark .dark\:bg-\[\#272832\] { --tw-bg-opacity: 1; background-color: rgba(39,40,50,var(--tw-bg-opacity)); }

.dark .dark\:bg-\[\#444654\] { --tw-bg-opacity: 1; background-color: rgba(68,70,84,var(--tw-bg-opacity)); }

.dark .dark\:bg-\[rgba\(255\,255\,255\,0\.15\)\] { background-color: rgba(255, 255, 255, 0.15); }

.dark .dark\:bg-black { --tw-bg-opacity: 1; background-color: rgba(0,0,0,var(--tw-bg-opacity)); }

.dark .dark\:bg-black\/80 { background-color: rgba(0, 0, 0, 0.8); }

.dark .dark\:bg-brand-green\/50 { background-color: rgba(25, 195, 125, 0.5); }

.dark .dark\:bg-gray-100 { --tw-bg-opacity: 1; background-color: rgba(236,236,241,var(--tw-bg-opacity)); }

.dark .dark\:bg-gray-50 { --tw-bg-opacity: 1; background-color: rgba(247,247,248,var(--tw-bg-opacity)); }

.dark .dark\:bg-gray-500 { --tw-bg-opacity: 1; background-color: rgba(142,142,160,var(--tw-bg-opacity)); }

.dark .dark\:bg-gray-600 { --tw-bg-opacity: 1; background-color: rgba(86,88,105,var(--tw-bg-opacity)); }

.dark .dark\:bg-gray-600\/70 { background-color: rgba(86, 88, 105, 0.7); }

.dark .dark\:bg-gray-700 { --tw-bg-opacity: 1; background-color: rgba(64,65,79,var(--tw-bg-opacity)); }

.dark .dark\:bg-gray-800 { --tw-bg-opacity: 1; background-color: rgba(52,53,65,var(--tw-bg-opacity)); }

.dark .dark\:bg-gray-800\/30 { background-color: rgba(52, 53, 65, 0.3); }

.dark .dark\:bg-gray-800\/90 { background-color: rgba(52, 53, 65, 0.9); }

.dark .dark\:bg-gray-900 { --tw-bg-opacity: 1; background-color: rgba(32,33,35,var(--tw-bg-opacity)); }

.dark .dark\:bg-gray-900\/95 { background-color: rgba(32, 33, 35, 0.95); }

.dark .dark\:bg-gray-950 { --tw-bg-opacity: 1; background-color: rgba(5,5,9,var(--tw-bg-opacity)); }

.dark .dark\:bg-orange-500 { --tw-bg-opacity: 1; background-color: rgba(224,108,43,var(--tw-bg-opacity)); }

.dark .dark\:bg-red-200 { --tw-bg-opacity: 1; background-color: rgba(254,202,202,var(--tw-bg-opacity)); }

.dark .dark\:bg-token-surface-tertiary { background-color: var(--surface-tertiary); }

.dark .dark\:bg-transparent { background-color: transparent; }

.dark .dark\:bg-white { --tw-bg-opacity: 1; background-color: rgba(255,255,255,var(--tw-bg-opacity)); }

.dark .dark\:bg-white\/10 { background-color: rgba(255, 255, 255, 0.1); }

.dark .dark\:bg-white\/20 { background-color: rgba(255, 255, 255, 0.2); }

.dark .dark\:bg-white\/5 { background-color: rgba(255, 255, 255, 0.05); }

.dark .dark\:from-gray-700 { --tw-gradient-from: #40414f var(--tw-gradient-from-position); --tw-gradient-to: rgba(64,65,79,0) var(--tw-gradient-to-position); --tw-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to); }

.dark .dark\:from-gray-800 { --tw-gradient-from: #343541 var(--tw-gradient-from-position); --tw-gradient-to: rgba(52,53,65,0) var(--tw-gradient-to-position); --tw-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to); }

.dark .dark\:from-gray-900 { --tw-gradient-from: #202123 var(--tw-gradient-from-position); --tw-gradient-to: rgba(32,33,35,0) var(--tw-gradient-to-position); --tw-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to); }

.dark .dark\:fill-gray-500 { fill: rgb(142, 142, 160); }

.dark .dark\:stroke-brand-purple\/50 { stroke: rgba(171, 104, 255, 0.5); }

.dark .dark\:text-\[\#D292FF\] { --tw-text-opacity: 1; color: rgba(210,146,255,var(--tw-text-opacity)); }

.dark .dark\:text-black { --tw-text-opacity: 1; color: rgba(0,0,0,var(--tw-text-opacity)); }

.dark .dark\:text-blue-200 { --tw-text-opacity: 1; color: rgba(191,219,254,var(--tw-text-opacity)); }

.dark .dark\:text-blue-400 { --tw-text-opacity: 1; color: rgba(58,136,255,var(--tw-text-opacity)); }

.dark .dark\:text-blue-600 { --tw-text-opacity: 1; color: rgba(37,99,235,var(--tw-text-opacity)); }

.dark .dark\:text-gray-100 { --tw-text-opacity: 1; color: rgba(236,236,241,var(--tw-text-opacity)); }

.dark .dark\:text-gray-200 { --tw-text-opacity: 1; color: rgba(217,217,227,var(--tw-text-opacity)); }

.dark .dark\:text-gray-300 { --tw-text-opacity: 1; color: rgba(197,197,210,var(--tw-text-opacity)); }

.dark .dark\:text-gray-400 { --tw-text-opacity: 1; color: rgba(172,172,190,var(--tw-text-opacity)); }

.dark .dark\:text-gray-500 { --tw-text-opacity: 1; color: rgba(142,142,160,var(--tw-text-opacity)); }

.dark .dark\:text-gray-600 { --tw-text-opacity: 1; color: rgba(86,88,105,var(--tw-text-opacity)); }

.dark .dark\:text-gray-700 { --tw-text-opacity: 1; color: rgba(64,65,79,var(--tw-text-opacity)); }

.dark .dark\:text-gray-900 { --tw-text-opacity: 1; color: rgba(32,33,35,var(--tw-text-opacity)); }

.dark .dark\:text-green-100 { --tw-text-opacity: 1; color: rgba(210,244,211,var(--tw-text-opacity)); }

.dark .dark\:text-red-500 { --tw-text-opacity: 1; color: rgba(239,68,68,var(--tw-text-opacity)); }

.dark .dark\:text-red-800 { --tw-text-opacity: 1; color: rgba(153,27,27,var(--tw-text-opacity)); }

.dark .dark\:text-white { --tw-text-opacity: 1; color: rgba(255,255,255,var(--tw-text-opacity)); }

.dark .dark\:text-white\/60 { color: rgba(255, 255, 255, 0.6); }

.dark .dark\:text-white\/70 { color: rgba(255, 255, 255, 0.7); }

.dark .dark\:text-white\/90 { color: rgba(255, 255, 255, 0.9); }

.dark .dark\:opacity-100 { opacity: 1; }

.dark .dark\:shadow-xs { --tw-shadow: 0 0 15px rgba(0,0,0,.1); --tw-shadow-colored: 0 0 15px var(--tw-shadow-color); box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow); }

.dark .dark\:ring-white\/20 { --tw-ring-color: hsla(0,0%,100%,.2); }

:is(.dark .placeholder\:dark\:text-white)::-webkit-input-placeholder { --tw-text-opacity: 1; color: rgba(255,255,255,var(--tw-text-opacity)); }

:is(.dark .placeholder\:dark\:text-white)::placeholder { --tw-text-opacity: 1; color: rgba(255,255,255,var(--tw-text-opacity)); }

.dark .dark\:last\:border-0:last-child { border-width: 0px; }

.dark .dark\:hover\:border-gray-600:hover { --tw-border-opacity: 1; border-color: rgba(86,88,105,var(--tw-border-opacity)); }

.dark .dark\:hover\:border-gray-800:hover { --tw-border-opacity: 1; border-color: rgba(52,53,65,var(--tw-border-opacity)); }

.dark .dark\:hover\:border-white\/10:hover { border-color: rgba(255, 255, 255, 0.1); }

.dark .dark\:hover\:\!bg-gray-700:hover { --tw-bg-opacity: 1 !important; background-color: rgba(64,65,79,var(--tw-bg-opacity)) !important; }

.dark .dark\:hover\:bg-\[\#2A2B32\]:hover { --tw-bg-opacity: 1; background-color: rgba(42,43,50,var(--tw-bg-opacity)); }

.dark .dark\:hover\:bg-\[\#2E2F33\]:hover { --tw-bg-opacity: 1; background-color: rgba(46,47,51,var(--tw-bg-opacity)); }

.dark .dark\:hover\:bg-\[\#494A54\]:hover { --tw-bg-opacity: 1; background-color: rgba(73,74,84,var(--tw-bg-opacity)); }

.dark .dark\:hover\:bg-brand-green\/40:hover { background-color: rgba(25, 195, 125, 0.4); }

.dark .dark\:hover\:bg-gray-200:hover { --tw-bg-opacity: 1; background-color: rgba(217,217,227,var(--tw-bg-opacity)); }

.dark .dark\:hover\:bg-gray-500\/10:hover { background-color: rgba(141, 141, 160, 0.1); }

.dark .dark\:hover\:bg-gray-700:hover { --tw-bg-opacity: 1; background-color: rgba(64,65,79,var(--tw-bg-opacity)); }

.dark .dark\:hover\:bg-gray-800:hover { --tw-bg-opacity: 1; background-color: rgba(52,53,65,var(--tw-bg-opacity)); }

.dark .dark\:hover\:bg-gray-900:hover { --tw-bg-opacity: 1; background-color: rgba(32,33,35,var(--tw-bg-opacity)); }

.dark .dark\:hover\:bg-token-surface-tertiary:hover { background-color: var(--surface-tertiary); }

.dark .dark\:hover\:bg-white\/20:hover { background-color: rgba(255, 255, 255, 0.2); }

:is(.dark .hover\:dark\:bg-gray-700):hover { --tw-bg-opacity: 1; background-color: rgba(64,65,79,var(--tw-bg-opacity)); }

:is(.dark .hover\:dark\:bg-white\/10):hover { background-color: rgba(255, 255, 255, 0.1); }

.dark .dark\:hover\:text-blue-600:hover { --tw-text-opacity: 1; color: rgba(37,99,235,var(--tw-text-opacity)); }

.dark .dark\:hover\:text-gray-200:hover { --tw-text-opacity: 1; color: rgba(217,217,227,var(--tw-text-opacity)); }

.dark .dark\:hover\:text-gray-400:hover { --tw-text-opacity: 1; color: rgba(172,172,190,var(--tw-text-opacity)); }

.dark .dark\:hover\:text-white:hover { --tw-text-opacity: 1; color: rgba(255,255,255,var(--tw-text-opacity)); }

.dark .dark\:hover\:text-white\/50:hover { color: rgba(255, 255, 255, 0.5); }

:is(.dark .hover\:dark\:text-gray-100):hover { --tw-text-opacity: 1; color: rgba(236,236,241,var(--tw-text-opacity)); }

:is(.dark .hover\:dark\:text-gray-300):hover { --tw-text-opacity: 1; color: rgba(197,197,210,var(--tw-text-opacity)); }

.dark .dark\:focus\:border-white:focus { --tw-border-opacity: 1; border-color: rgba(255,255,255,var(--tw-border-opacity)); }

.dark .dark\:focus\:bg-gray-700:focus { --tw-bg-opacity: 1; background-color: rgba(64,65,79,var(--tw-bg-opacity)); }

:is(.dark .focus\:dark\:bg-gray-700):focus { --tw-bg-opacity: 1; background-color: rgba(64,65,79,var(--tw-bg-opacity)); }

.dark .dark\:focus\:ring-gray-600:focus { --tw-ring-opacity: 1; --tw-ring-color: rgba(86,88,105,var(--tw-ring-opacity)); }

.dark .dark\:focus\:ring-white:focus { --tw-ring-opacity: 1; --tw-ring-color: rgba(255,255,255,var(--tw-ring-opacity)); }

.dark .dark\:focus-visible\:border-blue-500.focus-visible { --tw-border-opacity: 1; border-color: rgba(69,89,164,var(--tw-border-opacity)); }

.dark .dark\:focus-visible\:border-blue-500:focus-visible { --tw-border-opacity: 1; border-color: rgba(69,89,164,var(--tw-border-opacity)); }

.dark .dark\:disabled\:text-gray-400:disabled { --tw-text-opacity: 1; color: rgba(172,172,190,var(--tw-text-opacity)); }

.dark .dark\:disabled\:hover\:bg-transparent:hover:disabled { background-color: transparent; }

.dark .dark\:disabled\:hover\:bg-white:hover:disabled { --tw-bg-opacity: 1; background-color: rgba(255,255,255,var(--tw-bg-opacity)); }

:is(.dark .disabled\:dark\:hover\:text-gray-400:hover):disabled { --tw-text-opacity: 1; color: rgba(172,172,190,var(--tw-text-opacity)); }

.dark .group:hover .dark\:group-hover\:from-\[\#2A2B32\] { --tw-gradient-from: #2a2b32 var(--tw-gradient-from-position); --tw-gradient-to: rgba(42,43,50,0) var(--tw-gradient-to-position); --tw-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to); }

.dark .group\/option:hover .dark\:group-hover\/option\:text-gray-100 { --tw-text-opacity: 1; color: rgba(236,236,241,var(--tw-text-opacity)); }

.dark .dark\:radix-disabled\:bg-transparent[data-disabled] { background-color: transparent; }

.dark .dark\:radix-disabled\:text-gray-500[data-disabled] { --tw-text-opacity: 1; color: rgba(142,142,160,var(--tw-text-opacity)); }

.dark .dark\:radix-disabled\:text-gray-600[data-disabled] { --tw-text-opacity: 1; color: rgba(86,88,105,var(--tw-text-opacity)); }

.dark .dark\:radix-highlighted\:bg-\[\#2E2F33\][data-highlighted] { --tw-bg-opacity: 1; background-color: rgba(46,47,51,var(--tw-bg-opacity)); }

.dark .dark\:radix-highlighted\:bg-gray-700[data-highlighted] { --tw-bg-opacity: 1; background-color: rgba(64,65,79,var(--tw-bg-opacity)); }

.dark .dark\:radix-highlighted\:hover\:bg-\[\#2E2F33\][data-highlighted]:hover { --tw-bg-opacity: 1; background-color: rgba(46,47,51,var(--tw-bg-opacity)); }

.dark .dark\:radix-state-active\:text-white[data-state="active"] { --tw-text-opacity: 1; color: rgba(255,255,255,var(--tw-text-opacity)); }

.dark .dark\:radix-state-checked\:bg-green-600[data-state="checked"] { --tw-bg-opacity: 1; background-color: rgba(16,163,127,var(--tw-bg-opacity)); }

.dark .dark\:radix-state-open\:bg-gray-700[data-state="open"] { --tw-bg-opacity: 1; background-color: rgba(64,65,79,var(--tw-bg-opacity)); }

.dark .dark\:radix-state-open\:text-gray-400[data-state="open"] { --tw-text-opacity: 1; color: rgba(172,172,190,var(--tw-text-opacity)); }

.dark .dark\:group-ui-open\:bg-gray-800.group[data-headlessui-state~="open"] { --tw-bg-opacity: 1; background-color: rgba(52,53,65,var(--tw-bg-opacity)); }

.dark .group:where([data-headlessui-state~="open"]) .dark\:group-ui-open\:bg-gray-800 { --tw-bg-opacity: 1; background-color: rgba(52,53,65,var(--tw-bg-opacity)); }

.gizmo :is(.dark .gizmo\:dark\:border-0) { border-width: 0px; }

.gizmo :is(.dark .gizmo\:dark\:border-r) { border-right-width: 1px; }

.gizmo :is(.dark .gizmo\:dark\:border-gray-100\/10) { border-color: rgba(236, 236, 241, 0.1); }

.gizmo :is(.dark .gizmo\:dark\:border-token-border-light) { border-color: var(--border-light); }

.gizmo :is(.dark .gizmo\:dark\:bg-gray-800) { --tw-bg-opacity: 1; background-color: rgba(52,53,65,var(--tw-bg-opacity)); }

.gizmo :is(.dark .gizmo\:dark\:bg-token-surface-primary) { background-color: var(--surface-primary); }

.gizmo :is(.dark .gizmo\:dark\:bg-transparent) { background-color: transparent; }

.gizmo :is(.dark .gizmo\:dark\:text-gray-300) { --tw-text-opacity: 1; color: rgba(197,197,210,var(--tw-text-opacity)); }

.gizmo :is(.dark .gizmo\:dark\:shadow-\[0_0_0_2px_rgba\(52\,53\,65\,0\.95\)\]) { --tw-shadow: 0 0 0 2px rgba(52,53,65,.95); --tw-shadow-colored: 0 0 0 2px var(--tw-shadow-color); box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow); }

@media (min-width: 640px) {
  .sm\:absolute { position: absolute; }
  .sm\:order-1 { order: 1; }
  .sm\:order-2 { order: 2; }
  .sm\:-mx-6 { margin-left: -1.5rem; margin-right: -1.5rem; }
  .sm\:mx-1 { margin-left: 0.25rem; margin-right: 0.25rem; }
  .sm\:mb-0 { margin-bottom: 0px; }
  .sm\:mb-0\.5 { margin-bottom: 0.125rem; }
  .sm\:mb-16 { margin-bottom: 4rem; }
  .sm\:mb-2 { margin-bottom: 0.5rem; }
  .sm\:mb-4 { margin-bottom: 1rem; }
  .sm\:ml-0 { margin-left: 0px; }
  .sm\:mt-0 { margin-top: 0px; }
  .sm\:mt-16 { margin-top: 4rem; }
  .sm\:mt-4 { margin-top: 1rem; }
  .sm\:mt-\[20vh\] { margin-top: 20vh; }
  .sm\:mt-\[6vh\] { margin-top: 6vh; }
  .sm\:block { display: block; }
  .sm\:flex { display: flex; }
  .sm\:h-10 { height: 2.5rem; }
  .sm\:h-5 { height: 1.25rem; }
  .sm\:w-10 { width: 2.5rem; }
  .sm\:w-5 { width: 1.25rem; }
  .sm\:w-\[312px\] { width: 312px; }
  .sm\:w-\[calc\(\(100\%-12px\)\/2\)\] { width: calc(50% - 6px); }
  .sm\:w-auto { width: auto; }
  .sm\:min-w-\[148px\] { min-width: 148px; }
  .sm\:min-w-\[312px\] { min-width: 312px; }
  .sm\:min-w-\[420px\] { min-width: 420px; }
  .sm\:max-w-2xl { max-width: 42rem; }
  .sm\:max-w-lg { max-width: 32rem; }
  .sm\:max-w-md { max-width: 28rem; }
  .sm\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0px, 1fr)); }
  .sm\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0px, 1fr)); }
  .sm\:grid-rows-2 { grid-template-rows: repeat(2, minmax(0px, 1fr)); }
  .sm\:flex-row { flex-direction: row; }
  .sm\:flex-row-reverse { flex-direction: row-reverse; }
  .sm\:items-center { align-items: center; }
  .sm\:justify-center { justify-content: center; }
  .sm\:gap-24 { gap: 6rem; }
  .sm\:gap-3 { gap: 0.75rem; }
  .sm\:gap-6 { gap: 1.5rem; }
  .sm\:gap-y-0 { row-gap: 0px; }
  .sm\:rounded-md { border-radius: 0.375rem; }
  .sm\:rounded-t-\[30px\] { border-top-left-radius: 30px; border-top-right-radius: 30px; }
  .sm\:border-r { border-right-width: 1px; }
  .sm\:border-t-0 { border-top-width: 0px; }
  .sm\:p-0 { padding: 0px; }
  .sm\:p-2 { padding: 0.5rem; }
  .sm\:p-3 { padding: 0.75rem; }
  .sm\:p-4 { padding: 1rem; }
  .sm\:p-6 { padding: 1.5rem; }
  .sm\:px-0 { padding-left: 0px; padding-right: 0px; }
  .sm\:px-2 { padding-left: 0.5rem; padding-right: 0.5rem; }
  .sm\:px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }
  .sm\:pb-0 { padding-bottom: 0px; }
  .sm\:pb-1 { padding-bottom: 0.25rem; }
  .sm\:pb-2 { padding-bottom: 0.5rem; }
  .sm\:pb-6 { padding-bottom: 1.5rem; }
  .sm\:pl-3 { padding-left: 0.75rem; }
  .sm\:pr-2 { padding-right: 0.5rem; }
  .sm\:pt-4 { padding-top: 1rem; }
  .sm\:pt-8 { padding-top: 2rem; }
  .sm\:text-left { text-align: left; }
  .sm\:text-4xl { font-size: 2.25rem; line-height: 2.5rem; }
  .sm\:text-base { font-size: 1rem; line-height: 1.5rem; }
  .sm\:text-lg { font-size: 1.125rem; line-height: 1.75rem; }
  .sm\:text-sm { font-size: 0.875rem; line-height: 1.25rem; }
  .sm\:duration-300 { transition-duration: 0.3s; }
  .sm\:duration-500 { transition-duration: 0.5s; }
  @supports (min-height:100dvh) {
  .sm\:supports-\[min-height\:100dvh\]\:min-h-\[100dvh\] { min-height: 100dvh; }
}
}

@media (min-width: 768px) {
  .md\:invisible { visibility: hidden; }
  .md\:static { position: static; }
  .md\:relative { position: relative; }
  .md\:-right-2 { right: -0.5rem; }
  .md\:bottom-3 { bottom: 0.75rem; }
  .md\:bottom-3\.5 { bottom: 0.875rem; }
  .md\:bottom-\[180px\] { bottom: 180px; }
  .md\:bottom-auto { bottom: auto; }
  .md\:left-4 { left: 1rem; }
  .md\:left-auto { left: auto; }
  .md\:right-3 { right: 0.75rem; }
  .md\:right-auto { right: auto; }
  .md\:top-\[22px\] { top: 22px; }
  .md\:m-0 { margin: 0px; }
  .md\:m-auto { margin: auto; }
  .md\:mx-4 { margin-left: 1rem; margin-right: 1rem; }
  .md\:mb-0 { margin-bottom: 0px; }
  .md\:mb-16 { margin-bottom: 4rem; }
  .md\:mb-3 { margin-bottom: 0.75rem; }
  .md\:mb-4 { margin-bottom: 1rem; }
  .md\:mb-auto { margin-bottom: auto; }
  .md\:mt-2 { margin-top: 0.5rem; }
  .md\:block { display: block; }
  .md\:inline-block { display: inline-block; }
  .md\:flex { display: flex; }
  .md\:inline-flex { display: inline-flex; }
  .md\:grid { display: grid; }
  .md\:hidden { display: none; }
  .md\:h-48 { height: 12rem; }
  .md\:h-full { height: 100%; }
  .md\:min-h-\[300px\] { min-height: 300px; }
  .md\:w-1\/2 { width: 50%; }
  .md\:w-\[100\%\] { width: 100%; }
  .md\:w-\[250px\] { width: 250px; }
  .md\:w-\[500px\] { width: 500px; }
  .md\:w-\[672px\] { width: 672px; }
  .md\:w-\[calc\(100\%-\.5rem\)\] { width: calc(100% - 0.5rem); }
  .md\:w-auto { width: auto; }
  .md\:w-full { width: 100%; }
  .md\:min-w-\[672px\] { min-width: 672px; }
  .md\:max-w-2xl { max-width: 42rem; }
  .md\:max-w-3xl { max-width: 48rem; }
  .md\:max-w-\[672px\] { max-width: 672px; }
  .md\:max-w-\[680px\] { max-width: 680px; }
  .md\:max-w-none { max-width: none; }
  .md\:max-w-xl { max-width: 36rem; }
  .md\:basis-0 { flex-basis: 0px; }
  .md\:basis-\[25vw\] { flex-basis: 25vw; }
  .md\:basis-\[75vw\] { flex-basis: 75vw; }
  .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0px, 1fr)); }
  .md\:grid-rows-\[minmax\(20px\,_1fr\)_auto_minmax\(20px\,_1fr\)\] { grid-template-rows: minmax(20px, 1fr) auto minmax(20px, 1fr); }
  .md\:flex-row { flex-direction: row; }
  .md\:flex-col { flex-direction: column; }
  .md\:items-end { align-items: flex-end; }
  .md\:justify-between { justify-content: space-between; }
  .md\:gap-2 { gap: 0.5rem; }
  .md\:gap-3 { gap: 0.75rem; }
  .md\:gap-6 { gap: 1.5rem; }
  .md\:gap-x-12 { column-gap: 3rem; }
  .md\:overflow-visible { overflow: visible; }
  .md\:whitespace-normal { white-space: normal; }
  .md\:rounded-none { border-radius: 0px; }
  .md\:border { border-width: 1px; }
  .md\:border-l { border-left-width: 1px; }
  .md\:border-t-0 { border-top-width: 0px; }
  .md\:border-gray-100 { --tw-border-opacity: 1; border-color: rgba(236,236,241,var(--tw-border-opacity)); }
  .md\:border-transparent { border-color: transparent; }
  .md\:\!bg-transparent { background-color: transparent !important; }
  .md\:bg-vert-light-gradient { background-image: linear-gradient(rgba(255, 255, 255, 0) 13.94%, rgb(255, 255, 255) 54.73%); }
  .md\:p-2 { padding: 0.5rem; }
  .md\:p-6 { padding: 1.5rem; }
  .md\:px-0 { padding-left: 0px; padding-right: 0px; }
  .md\:px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }
  .md\:px-8 { padding-left: 2rem; padding-right: 2rem; }
  .md\:px-\[60px\] { padding-left: 60px; padding-right: 60px; }
  .md\:py-10 { padding-bottom: 2.5rem; padding-top: 2.5rem; }
  .md\:py-2 { padding-bottom: 0.5rem; padding-top: 0.5rem; }
  .md\:py-2\.5 { padding-bottom: 0.625rem; padding-top: 0.625rem; }
  .md\:py-4 { padding-bottom: 1rem; padding-top: 1rem; }
  .md\:py-6 { padding-bottom: 1.5rem; padding-top: 1.5rem; }
  .md\:py-\[22px\] { padding-bottom: 22px; padding-top: 22px; }
  .md\:\!pt-0 { padding-top: 0px !important; }
  .md\:pb-5 { padding-bottom: 1.25rem; }
  .md\:pb-\[8vh\] { padding-bottom: 8vh; }
  .md\:pl-0 { padding-left: 0px; }
  .md\:pl-2 { padding-left: 0.5rem; }
  .md\:pl-4 { padding-left: 1rem; }
  .md\:pl-6 { padding-left: 1.5rem; }
  .md\:pl-\[46px\] { padding-left: 46px; }
  .md\:pr-1 { padding-right: 0.25rem; }
  .md\:pr-1\.5 { padding-right: 0.375rem; }
  .md\:pr-12 { padding-right: 3rem; }
  .md\:pr-4 { padding-right: 1rem; }
  .md\:pr-8 { padding-right: 2rem; }
  .md\:text-justify { text-align: justify; }
  .md\:text-\[32px\] { font-size: 32px; }
  .md\:text-\[40px\] { font-size: 40px; }
  .md\:text-sm { font-size: 0.875rem; line-height: 1.25rem; }
  .md\:leading-8 { line-height: 2rem; }
  .md\:opacity-0 { opacity: 0; }
  .md\:last\:mb-6:last-child { margin-bottom: 1.5rem; }
  .md\:disabled\:bottom-0:disabled { bottom: 0px; }
  .group:hover .md\:group-hover\:visible { visibility: visible; }
  .gizmo .gizmo\:md\:bottom-2 { bottom: 0.5rem; }
  .gizmo .gizmo\:md\:bottom-2\.5 { bottom: 0.625rem; }
  .gizmo .gizmo\:md\:bottom-3 { bottom: 0.75rem; }
  .gizmo .gizmo\:md\:bottom-\[143px\] { bottom: 143px; }
  .gizmo .gizmo\:md\:max-w-3xl { max-width: 48rem; }
  .gizmo .gizmo\:md\:px-5 { padding-left: 1.25rem; padding-right: 1.25rem; }
  .gizmo .gizmo\:md\:py-3 { padding-bottom: 0.75rem; padding-top: 0.75rem; }
  .gizmo .gizmo\:md\:py-3\.5 { padding-bottom: 0.875rem; padding-top: 0.875rem; }
  .dark .md\:dark\:border-gray-700 { --tw-border-opacity: 1; border-color: rgba(64,65,79,var(--tw-border-opacity)); }
  .dark .md\:dark\:border-transparent { border-color: transparent; }
  .dark .dark\:md\:bg-vert-dark-gradient { background-image: linear-gradient(rgba(53, 55, 64, 0), rgb(53, 55, 64) 58.85%); }
}

@media (min-width: 1024px) {
  .lg\:absolute { position: absolute; }
  .lg\:relative { position: relative; }
  .lg\:-left-3 { left: -0.75rem; }
  .lg\:-right-3 { right: -0.75rem; }
  .lg\:bottom-\[120px\] { bottom: 120px; }
  .lg\:left-auto { left: auto; }
  .lg\:right-0 { right: 0px; }
  .lg\:top-0 { top: 0px; }
  .lg\:top-1\/2 { top: 50%; }
  .lg\:-mx-8 { margin-left: -2rem; margin-right: -2rem; }
  .lg\:mx-auto { margin-left: auto; margin-right: auto; }
  .lg\:-ml-2 { margin-left: -0.5rem; }
  .lg\:mb-0 { margin-bottom: 0px; }
  .lg\:mt-0 { margin-top: 0px; }
  .lg\:block { display: block; }
  .lg\:hidden { display: none; }
  .lg\:w-1\/3 { width: 33.3333%; }
  .lg\:w-3\/5 { width: 60%; }
  .lg\:w-\[300px\] { width: 300px; }
  .lg\:w-\[400px\] { width: 400px; }
  .lg\:w-\[896px\] { width: 896px; }
  .lg\:w-\[calc\(\(100\%-24px\)\/3\)\] { width: calc(33.3333% - 8px); }
  .lg\:w-\[calc\(100\%-115px\)\] { width: calc(100% - 115px); }
  .lg\:w-auto { width: auto; }
  .lg\:min-w-\[896px\] { min-width: 896px; }
  .lg\:max-w-2xl { max-width: 42rem; }
  .lg\:max-w-3xl { max-width: 48rem; }
  .lg\:max-w-\[38rem\] { max-width: 38rem; }
  .lg\:max-w-\[796px\] { max-width: 796px; }
  .lg\:max-w-\[896px\] { max-width: 896px; }
  .lg\:max-w-none { max-width: none; }
  .lg\:max-w-sm { max-width: 24rem; }
  .lg\:max-w-xl { max-width: 36rem; }
  .lg\:-translate-x-full { --tw-translate-x: -100%; }
  .lg\:-translate-x-full, .lg\:-translate-y-1\/2 { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }
  .lg\:-translate-y-1\/2 { --tw-translate-y: -50%; }
  .lg\:translate-x-full { --tw-translate-x: 100%; }
  .lg\:translate-x-full, .lg\:translate-y-0 { transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }
  .lg\:translate-y-0 { --tw-translate-y: 0px; }
  .lg\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0px, 1fr)); }
  .lg\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0px, 1fr)); }
  .lg\:grid-cols-\[60\%_40\%\] { grid-template-columns: 60% 40%; }
  .lg\:gap-1 { gap: 0.25rem; }
  .lg\:self-center { align-self: center; }
  .lg\:rounded-lg { border-radius: 0.5rem; }
  .lg\:rounded-none { border-radius: 0px; }
  .lg\:border { border-width: 1px; }
  .lg\:border-0 { border-width: 0px; }
  .lg\:p-0 { padding: 0px; }
  .lg\:p-6 { padding: 1.5rem; }
  .lg\:px-0 { padding-left: 0px; padding-right: 0px; }
  .lg\:px-14 { padding-left: 3.5rem; padding-right: 3.5rem; }
  .lg\:px-16 { padding-left: 4rem; padding-right: 4rem; }
  .lg\:px-8 { padding-left: 2rem; padding-right: 2rem; }
  .lg\:pl-2 { padding-left: 0.5rem; }
  .lg\:pl-8 { padding-left: 2rem; }
  .lg\:pr-10 { padding-right: 2.5rem; }
  .lg\:pt-32 { padding-top: 8rem; }
  .lg\:text-left { text-align: left; }
  .lg\:text-\[22px\] { font-size: 22px; }
  .gizmo .gizmo\:lg\:max-w-\[40rem\] { max-width: 40rem; }
  .gizmo .gizmo\:lg\:justify-start { justify-content: flex-start; }
  .gizmo .gizmo\:lg\:px-1 { padding-left: 0.25rem; padding-right: 0.25rem; }
}

@media (min-width: 1280px) {
  .xl\:w-1\/4 { width: 25%; }
  .xl\:w-\[1024px\] { width: 1024px; }
  .xl\:w-\[350px\] { width: 350px; }
  .xl\:min-w-\[1024px\] { min-width: 1024px; }
  .xl\:max-w-3xl { max-width: 48rem; }
  .xl\:max-w-4xl { max-width: 56rem; }
  .xl\:max-w-6xl { max-width: 72rem; }
  .xl\:max-w-xl { max-width: 36rem; }
  .xl\:max-w-xs { max-width: 20rem; }
  .xl\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0px, 1fr)); }
  .gizmo .gizmo\:xl\:max-w-\[48rem\] { max-width: 48rem; }
  .gizmo .gizmo\:xl\:px-5 { padding-left: 1.25rem; padding-right: 1.25rem; }
}

@media (min-width: 1536px) {
  .\32 xl\:w-\[400px\] { width: 400px; }
}

tr:last-child .\[tr\:last-child_\&\]\:border-b-0 { border-bottom-width: 0px; }

tr[data-disabled="true"] .\[tr\[data-disabled\=true\]_\&\]\:opacity-50 { opacity: 0.5; }

@font-face { font-family: KaTeX_AMS; font-style: normal; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_AMS-Regular.woff2") format("woff2"); }

@font-face { font-family: KaTeX_Caligraphic; font-style: normal; font-weight: 700; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_Caligraphic-Bold.woff2") format("woff2"); }

@font-face { font-family: KaTeX_Caligraphic; font-style: normal; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_Caligraphic-Regular.woff2") format("woff2"); }

@font-face { font-family: KaTeX_Fraktur; font-style: normal; font-weight: 700; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_Fraktur-Bold.woff2") format("woff2"); }

@font-face { font-family: KaTeX_Fraktur; font-style: normal; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_Fraktur-Regular.woff2") format("woff2"); }

@font-face { font-family: KaTeX_Main; font-style: normal; font-weight: 700; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_Main-Bold.woff2") format("woff2"); }

@font-face { font-family: KaTeX_Main; font-style: italic; font-weight: 700; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_Main-BoldItalic.woff2") format("woff2"); }

@font-face { font-family: KaTeX_Main; font-style: italic; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_Main-Italic.woff2") format("woff2"); }

@font-face { font-family: KaTeX_Main; font-style: normal; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_Main-Regular.woff2") format("woff2"); }

@font-face { font-family: KaTeX_Math; font-style: italic; font-weight: 700; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_Math-BoldItalic.woff2") format("woff2"); }

@font-face { font-family: KaTeX_Math; font-style: italic; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_Math-Italic.woff2") format("woff2"); }

@font-face { font-family: KaTeX_SansSerif; font-style: normal; font-weight: 700; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_SansSerif-Bold.woff2") format("woff2"); }

@font-face { font-family: KaTeX_SansSerif; font-style: italic; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_SansSerif-Italic.woff2") format("woff2"); }

@font-face { font-family: KaTeX_SansSerif; font-style: normal; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_SansSerif-Regular.woff2") format("woff2"); }

@font-face { font-family: KaTeX_Script; font-style: normal; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_Script-Regular.woff2") format("woff2"); }

@font-face { font-family: KaTeX_Size1; font-style: normal; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_Size1-Regular.woff2") format("woff2"); }

@font-face { font-family: KaTeX_Size2; font-style: normal; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_Size2-Regular.woff2") format("woff2"); }

@font-face { font-family: KaTeX_Size3; font-style: normal; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_Size3-Regular.woff2") format("woff2"); }

@font-face { font-family: KaTeX_Size4; font-style: normal; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_Size4-Regular.woff2") format("woff2"); }

@font-face { font-family: KaTeX_Typewriter; font-style: normal; font-weight: 400; src: url("https://cdn.openai.com/common/fonts/katex/KaTeX_Typewriter-Regular.woff2") format("woff2"); }

.katex { font: 1.21em / 1.2 KaTeX_Main, "Times New Roman", serif; text-indent: 0px; text-rendering: auto; }

.katex * { border-color: currentcolor; forced-color-adjust: none !important; }

.katex .katex-version::after { content: "0.16.0"; }

.katex .katex-mathml { clip: rect(1px, 1px, 1px, 1px); border: 0px; height: 1px; overflow: hidden; padding: 0px; position: absolute; width: 1px; }

.katex .katex-html > .newline { display: block; }

.katex .base { position: relative; white-space: nowrap; width: min-content; }

.katex .base, .katex .strut { display: inline-block; }

.katex .textbf { font-weight: 700; }

.katex .textit { font-style: italic; }

.katex .textrm { font-family: KaTeX_Main; }

.katex .textsf { font-family: KaTeX_SansSerif; }

.katex .texttt { font-family: KaTeX_Typewriter; }

.katex .mathnormal { font-family: KaTeX_Math; font-style: italic; }

.katex .mathit { font-family: KaTeX_Main; font-style: italic; }

.katex .mathrm { font-style: normal; }

.katex .mathbf { font-family: KaTeX_Main; font-weight: 700; }

.katex .boldsymbol { font-family: KaTeX_Math; font-style: italic; font-weight: 700; }

.katex .amsrm, .katex .mathbb, .katex .textbb { font-family: KaTeX_AMS; }

.katex .mathcal { font-family: KaTeX_Caligraphic; }

.katex .mathfrak, .katex .textfrak { font-family: KaTeX_Fraktur; }

.katex .mathtt { font-family: KaTeX_Typewriter; }

.katex .mathscr, .katex .textscr { font-family: KaTeX_Script; }

.katex .mathsf, .katex .textsf { font-family: KaTeX_SansSerif; }

.katex .mathboldsf, .katex .textboldsf { font-family: KaTeX_SansSerif; font-weight: 700; }

.katex .mathitsf, .katex .textitsf { font-family: KaTeX_SansSerif; font-style: italic; }

.katex .mainrm { font-family: KaTeX_Main; font-style: normal; }

.katex .vlist-t { border-collapse: collapse; display: inline-table; table-layout: fixed; }

.katex .vlist-r { display: table-row; }

.katex .vlist { display: table-cell; position: relative; vertical-align: bottom; }

.katex .vlist > span { display: block; height: 0px; position: relative; }

.katex .vlist > span > span { display: inline-block; }

.katex .vlist > span > .pstrut { overflow: hidden; width: 0px; }

.katex .vlist-t2 { margin-right: -2px; }

.katex .vlist-s { display: table-cell; font-size: 1px; min-width: 2px; vertical-align: bottom; width: 2px; }

.katex .vbox { align-items: baseline; display: inline-flex; flex-direction: column; }

.katex .hbox { width: 100%; }

.katex .hbox, .katex .thinbox { display: inline-flex; flex-direction: row; }

.katex .thinbox { max-width: 0px; width: 0px; }

.katex .msupsub { text-align: left; }

.katex .mfrac > span > span { text-align: center; }

.katex .mfrac .frac-line { border-bottom-style: solid; display: inline-block; width: 100%; }

.katex .hdashline, .katex .hline, .katex .mfrac .frac-line, .katex .overline .overline-line, .katex .rule, .katex .underline .underline-line { min-height: 1px; }

.katex .mspace { display: inline-block; }

.katex .clap, .katex .llap, .katex .rlap { position: relative; width: 0px; }

.katex .clap > .inner, .katex .llap > .inner, .katex .rlap > .inner { position: absolute; }

.katex .clap > .fix, .katex .llap > .fix, .katex .rlap > .fix { display: inline-block; }

.katex .llap > .inner { right: 0px; }

.katex .clap > .inner, .katex .rlap > .inner { left: 0px; }

.katex .clap > .inner > span { margin-left: -50%; margin-right: 50%; }

.katex .rule { border: 0px solid; display: inline-block; position: relative; }

.katex .hline, .katex .overline .overline-line, .katex .underline .underline-line { border-bottom-style: solid; display: inline-block; width: 100%; }

.katex .hdashline { border-bottom-style: dashed; display: inline-block; width: 100%; }

.katex .sqrt > .root { margin-left: 0.277778em; margin-right: -0.555556em; }

.katex .fontsize-ensurer.reset-size1.size1, .katex .sizing.reset-size1.size1 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size1.size2, .katex .sizing.reset-size1.size2 { font-size: 1.2em; }

.katex .fontsize-ensurer.reset-size1.size3, .katex .sizing.reset-size1.size3 { font-size: 1.4em; }

.katex .fontsize-ensurer.reset-size1.size4, .katex .sizing.reset-size1.size4 { font-size: 1.6em; }

.katex .fontsize-ensurer.reset-size1.size5, .katex .sizing.reset-size1.size5 { font-size: 1.8em; }

.katex .fontsize-ensurer.reset-size1.size6, .katex .sizing.reset-size1.size6 { font-size: 2em; }

.katex .fontsize-ensurer.reset-size1.size7, .katex .sizing.reset-size1.size7 { font-size: 2.4em; }

.katex .fontsize-ensurer.reset-size1.size8, .katex .sizing.reset-size1.size8 { font-size: 2.88em; }

.katex .fontsize-ensurer.reset-size1.size9, .katex .sizing.reset-size1.size9 { font-size: 3.456em; }

.katex .fontsize-ensurer.reset-size1.size10, .katex .sizing.reset-size1.size10 { font-size: 4.148em; }

.katex .fontsize-ensurer.reset-size1.size11, .katex .sizing.reset-size1.size11 { font-size: 4.976em; }

.katex .fontsize-ensurer.reset-size2.size1, .katex .sizing.reset-size2.size1 { font-size: 0.833333em; }

.katex .fontsize-ensurer.reset-size2.size2, .katex .sizing.reset-size2.size2 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size2.size3, .katex .sizing.reset-size2.size3 { font-size: 1.16667em; }

.katex .fontsize-ensurer.reset-size2.size4, .katex .sizing.reset-size2.size4 { font-size: 1.33333em; }

.katex .fontsize-ensurer.reset-size2.size5, .katex .sizing.reset-size2.size5 { font-size: 1.5em; }

.katex .fontsize-ensurer.reset-size2.size6, .katex .sizing.reset-size2.size6 { font-size: 1.66667em; }

.katex .fontsize-ensurer.reset-size2.size7, .katex .sizing.reset-size2.size7 { font-size: 2em; }

.katex .fontsize-ensurer.reset-size2.size8, .katex .sizing.reset-size2.size8 { font-size: 2.4em; }

.katex .fontsize-ensurer.reset-size2.size9, .katex .sizing.reset-size2.size9 { font-size: 2.88em; }

.katex .fontsize-ensurer.reset-size2.size10, .katex .sizing.reset-size2.size10 { font-size: 3.45667em; }

.katex .fontsize-ensurer.reset-size2.size11, .katex .sizing.reset-size2.size11 { font-size: 4.14667em; }

.katex .fontsize-ensurer.reset-size3.size1, .katex .sizing.reset-size3.size1 { font-size: 0.714286em; }

.katex .fontsize-ensurer.reset-size3.size2, .katex .sizing.reset-size3.size2 { font-size: 0.857143em; }

.katex .fontsize-ensurer.reset-size3.size3, .katex .sizing.reset-size3.size3 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size3.size4, .katex .sizing.reset-size3.size4 { font-size: 1.14286em; }

.katex .fontsize-ensurer.reset-size3.size5, .katex .sizing.reset-size3.size5 { font-size: 1.28571em; }

.katex .fontsize-ensurer.reset-size3.size6, .katex .sizing.reset-size3.size6 { font-size: 1.42857em; }

.katex .fontsize-ensurer.reset-size3.size7, .katex .sizing.reset-size3.size7 { font-size: 1.71429em; }

.katex .fontsize-ensurer.reset-size3.size8, .katex .sizing.reset-size3.size8 { font-size: 2.05714em; }

.katex .fontsize-ensurer.reset-size3.size9, .katex .sizing.reset-size3.size9 { font-size: 2.46857em; }

.katex .fontsize-ensurer.reset-size3.size10, .katex .sizing.reset-size3.size10 { font-size: 2.96286em; }

.katex .fontsize-ensurer.reset-size3.size11, .katex .sizing.reset-size3.size11 { font-size: 3.55429em; }

.katex .fontsize-ensurer.reset-size4.size1, .katex .sizing.reset-size4.size1 { font-size: 0.625em; }

.katex .fontsize-ensurer.reset-size4.size2, .katex .sizing.reset-size4.size2 { font-size: 0.75em; }

.katex .fontsize-ensurer.reset-size4.size3, .katex .sizing.reset-size4.size3 { font-size: 0.875em; }

.katex .fontsize-ensurer.reset-size4.size4, .katex .sizing.reset-size4.size4 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size4.size5, .katex .sizing.reset-size4.size5 { font-size: 1.125em; }

.katex .fontsize-ensurer.reset-size4.size6, .katex .sizing.reset-size4.size6 { font-size: 1.25em; }

.katex .fontsize-ensurer.reset-size4.size7, .katex .sizing.reset-size4.size7 { font-size: 1.5em; }

.katex .fontsize-ensurer.reset-size4.size8, .katex .sizing.reset-size4.size8 { font-size: 1.8em; }

.katex .fontsize-ensurer.reset-size4.size9, .katex .sizing.reset-size4.size9 { font-size: 2.16em; }

.katex .fontsize-ensurer.reset-size4.size10, .katex .sizing.reset-size4.size10 { font-size: 2.5925em; }

.katex .fontsize-ensurer.reset-size4.size11, .katex .sizing.reset-size4.size11 { font-size: 3.11em; }

.katex .fontsize-ensurer.reset-size5.size1, .katex .sizing.reset-size5.size1 { font-size: 0.555556em; }

.katex .fontsize-ensurer.reset-size5.size2, .katex .sizing.reset-size5.size2 { font-size: 0.666667em; }

.katex .fontsize-ensurer.reset-size5.size3, .katex .sizing.reset-size5.size3 { font-size: 0.777778em; }

.katex .fontsize-ensurer.reset-size5.size4, .katex .sizing.reset-size5.size4 { font-size: 0.888889em; }

.katex .fontsize-ensurer.reset-size5.size5, .katex .sizing.reset-size5.size5 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size5.size6, .katex .sizing.reset-size5.size6 { font-size: 1.11111em; }

.katex .fontsize-ensurer.reset-size5.size7, .katex .sizing.reset-size5.size7 { font-size: 1.33333em; }

.katex .fontsize-ensurer.reset-size5.size8, .katex .sizing.reset-size5.size8 { font-size: 1.6em; }

.katex .fontsize-ensurer.reset-size5.size9, .katex .sizing.reset-size5.size9 { font-size: 1.92em; }

.katex .fontsize-ensurer.reset-size5.size10, .katex .sizing.reset-size5.size10 { font-size: 2.30444em; }

.katex .fontsize-ensurer.reset-size5.size11, .katex .sizing.reset-size5.size11 { font-size: 2.76444em; }

.katex .fontsize-ensurer.reset-size6.size1, .katex .sizing.reset-size6.size1 { font-size: 0.5em; }

.katex .fontsize-ensurer.reset-size6.size2, .katex .sizing.reset-size6.size2 { font-size: 0.6em; }

.katex .fontsize-ensurer.reset-size6.size3, .katex .sizing.reset-size6.size3 { font-size: 0.7em; }

.katex .fontsize-ensurer.reset-size6.size4, .katex .sizing.reset-size6.size4 { font-size: 0.8em; }

.katex .fontsize-ensurer.reset-size6.size5, .katex .sizing.reset-size6.size5 { font-size: 0.9em; }

.katex .fontsize-ensurer.reset-size6.size6, .katex .sizing.reset-size6.size6 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size6.size7, .katex .sizing.reset-size6.size7 { font-size: 1.2em; }

.katex .fontsize-ensurer.reset-size6.size8, .katex .sizing.reset-size6.size8 { font-size: 1.44em; }

.katex .fontsize-ensurer.reset-size6.size9, .katex .sizing.reset-size6.size9 { font-size: 1.728em; }

.katex .fontsize-ensurer.reset-size6.size10, .katex .sizing.reset-size6.size10 { font-size: 2.074em; }

.katex .fontsize-ensurer.reset-size6.size11, .katex .sizing.reset-size6.size11 { font-size: 2.488em; }

.katex .fontsize-ensurer.reset-size7.size1, .katex .sizing.reset-size7.size1 { font-size: 0.416667em; }

.katex .fontsize-ensurer.reset-size7.size2, .katex .sizing.reset-size7.size2 { font-size: 0.5em; }

.katex .fontsize-ensurer.reset-size7.size3, .katex .sizing.reset-size7.size3 { font-size: 0.583333em; }

.katex .fontsize-ensurer.reset-size7.size4, .katex .sizing.reset-size7.size4 { font-size: 0.666667em; }

.katex .fontsize-ensurer.reset-size7.size5, .katex .sizing.reset-size7.size5 { font-size: 0.75em; }

.katex .fontsize-ensurer.reset-size7.size6, .katex .sizing.reset-size7.size6 { font-size: 0.833333em; }

.katex .fontsize-ensurer.reset-size7.size7, .katex .sizing.reset-size7.size7 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size7.size8, .katex .sizing.reset-size7.size8 { font-size: 1.2em; }

.katex .fontsize-ensurer.reset-size7.size9, .katex .sizing.reset-size7.size9 { font-size: 1.44em; }

.katex .fontsize-ensurer.reset-size7.size10, .katex .sizing.reset-size7.size10 { font-size: 1.72833em; }

.katex .fontsize-ensurer.reset-size7.size11, .katex .sizing.reset-size7.size11 { font-size: 2.07333em; }

.katex .fontsize-ensurer.reset-size8.size1, .katex .sizing.reset-size8.size1 { font-size: 0.347222em; }

.katex .fontsize-ensurer.reset-size8.size2, .katex .sizing.reset-size8.size2 { font-size: 0.416667em; }

.katex .fontsize-ensurer.reset-size8.size3, .katex .sizing.reset-size8.size3 { font-size: 0.486111em; }

.katex .fontsize-ensurer.reset-size8.size4, .katex .sizing.reset-size8.size4 { font-size: 0.555556em; }

.katex .fontsize-ensurer.reset-size8.size5, .katex .sizing.reset-size8.size5 { font-size: 0.625em; }

.katex .fontsize-ensurer.reset-size8.size6, .katex .sizing.reset-size8.size6 { font-size: 0.694444em; }

.katex .fontsize-ensurer.reset-size8.size7, .katex .sizing.reset-size8.size7 { font-size: 0.833333em; }

.katex .fontsize-ensurer.reset-size8.size8, .katex .sizing.reset-size8.size8 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size8.size9, .katex .sizing.reset-size8.size9 { font-size: 1.2em; }

.katex .fontsize-ensurer.reset-size8.size10, .katex .sizing.reset-size8.size10 { font-size: 1.44028em; }

.katex .fontsize-ensurer.reset-size8.size11, .katex .sizing.reset-size8.size11 { font-size: 1.72778em; }

.katex .fontsize-ensurer.reset-size9.size1, .katex .sizing.reset-size9.size1 { font-size: 0.289352em; }

.katex .fontsize-ensurer.reset-size9.size2, .katex .sizing.reset-size9.size2 { font-size: 0.347222em; }

.katex .fontsize-ensurer.reset-size9.size3, .katex .sizing.reset-size9.size3 { font-size: 0.405093em; }

.katex .fontsize-ensurer.reset-size9.size4, .katex .sizing.reset-size9.size4 { font-size: 0.462963em; }

.katex .fontsize-ensurer.reset-size9.size5, .katex .sizing.reset-size9.size5 { font-size: 0.520833em; }

.katex .fontsize-ensurer.reset-size9.size6, .katex .sizing.reset-size9.size6 { font-size: 0.578704em; }

.katex .fontsize-ensurer.reset-size9.size7, .katex .sizing.reset-size9.size7 { font-size: 0.694444em; }

.katex .fontsize-ensurer.reset-size9.size8, .katex .sizing.reset-size9.size8 { font-size: 0.833333em; }

.katex .fontsize-ensurer.reset-size9.size9, .katex .sizing.reset-size9.size9 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size9.size10, .katex .sizing.reset-size9.size10 { font-size: 1.20023em; }

.katex .fontsize-ensurer.reset-size9.size11, .katex .sizing.reset-size9.size11 { font-size: 1.43981em; }

.katex .fontsize-ensurer.reset-size10.size1, .katex .sizing.reset-size10.size1 { font-size: 0.24108em; }

.katex .fontsize-ensurer.reset-size10.size2, .katex .sizing.reset-size10.size2 { font-size: 0.289296em; }

.katex .fontsize-ensurer.reset-size10.size3, .katex .sizing.reset-size10.size3 { font-size: 0.337512em; }

.katex .fontsize-ensurer.reset-size10.size4, .katex .sizing.reset-size10.size4 { font-size: 0.385728em; }

.katex .fontsize-ensurer.reset-size10.size5, .katex .sizing.reset-size10.size5 { font-size: 0.433944em; }

.katex .fontsize-ensurer.reset-size10.size6, .katex .sizing.reset-size10.size6 { font-size: 0.48216em; }

.katex .fontsize-ensurer.reset-size10.size7, .katex .sizing.reset-size10.size7 { font-size: 0.578592em; }

.katex .fontsize-ensurer.reset-size10.size8, .katex .sizing.reset-size10.size8 { font-size: 0.694311em; }

.katex .fontsize-ensurer.reset-size10.size9, .katex .sizing.reset-size10.size9 { font-size: 0.833173em; }

.katex .fontsize-ensurer.reset-size10.size10, .katex .sizing.reset-size10.size10 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size10.size11, .katex .sizing.reset-size10.size11 { font-size: 1.19961em; }

.katex .fontsize-ensurer.reset-size11.size1, .katex .sizing.reset-size11.size1 { font-size: 0.200965em; }

.katex .fontsize-ensurer.reset-size11.size2, .katex .sizing.reset-size11.size2 { font-size: 0.241158em; }

.katex .fontsize-ensurer.reset-size11.size3, .katex .sizing.reset-size11.size3 { font-size: 0.28135em; }

.katex .fontsize-ensurer.reset-size11.size4, .katex .sizing.reset-size11.size4 { font-size: 0.321543em; }

.katex .fontsize-ensurer.reset-size11.size5, .katex .sizing.reset-size11.size5 { font-size: 0.361736em; }

.katex .fontsize-ensurer.reset-size11.size6, .katex .sizing.reset-size11.size6 { font-size: 0.401929em; }

.katex .fontsize-ensurer.reset-size11.size7, .katex .sizing.reset-size11.size7 { font-size: 0.482315em; }

.katex .fontsize-ensurer.reset-size11.size8, .katex .sizing.reset-size11.size8 { font-size: 0.578778em; }

.katex .fontsize-ensurer.reset-size11.size9, .katex .sizing.reset-size11.size9 { font-size: 0.694534em; }

.katex .fontsize-ensurer.reset-size11.size10, .katex .sizing.reset-size11.size10 { font-size: 0.833601em; }

.katex .fontsize-ensurer.reset-size11.size11, .katex .sizing.reset-size11.size11 { font-size: 1em; }

.katex .delimsizing.size1 { font-family: KaTeX_Size1; }

.katex .delimsizing.size2 { font-family: KaTeX_Size2; }

.katex .delimsizing.size3 { font-family: KaTeX_Size3; }

.katex .delimsizing.size4 { font-family: KaTeX_Size4; }

.katex .delimsizing.mult .delim-size1 > span { font-family: KaTeX_Size1; }

.katex .delimsizing.mult .delim-size4 > span { font-family: KaTeX_Size4; }

.katex .nulldelimiter { display: inline-block; width: 0.12em; }

.katex .delimcenter, .katex .op-symbol { position: relative; }

.katex .op-symbol.small-op { font-family: KaTeX_Size1; }

.katex .op-symbol.large-op { font-family: KaTeX_Size2; }

.katex .accent > .vlist-t, .katex .op-limits > .vlist-t { text-align: center; }

.katex .accent .accent-body { position: relative; }

.katex .accent .accent-body:not(.accent-full) { width: 0px; }

.katex .overlay { display: block; }

.katex .mtable .vertical-separator { display: inline-block; min-width: 1px; }

.katex .mtable .arraycolsep { display: inline-block; }

.katex .mtable .col-align-c > .vlist-t { text-align: center; }

.katex .mtable .col-align-l > .vlist-t { text-align: left; }

.katex .mtable .col-align-r > .vlist-t { text-align: right; }

.katex .svg-align { text-align: left; }

.katex svg { fill: currentcolor; stroke: currentcolor; fill-rule: nonzero; fill-opacity: 1; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 4; stroke-dasharray: none; stroke-dashoffset: 0; stroke-opacity: 1; display: block; height: inherit; position: absolute; width: 100%; }

.katex svg path { stroke: none; }

.katex img { border-style: none; max-height: none; max-width: none; min-height: 0px; min-width: 0px; }

.katex .stretchy { display: block; overflow: hidden; position: relative; width: 100%; }

.katex .stretchy::after, .katex .stretchy::before { content: ""; }

.katex .hide-tail { overflow: hidden; position: relative; width: 100%; }

.katex .halfarrow-left { left: 0px; overflow: hidden; position: absolute; width: 50.2%; }

.katex .halfarrow-right { overflow: hidden; position: absolute; right: 0px; width: 50.2%; }

.katex .brace-left { left: 0px; overflow: hidden; position: absolute; width: 25.1%; }

.katex .brace-center { left: 25%; overflow: hidden; position: absolute; width: 50%; }

.katex .brace-right { overflow: hidden; position: absolute; right: 0px; width: 25.1%; }

.katex .x-arrow-pad { padding: 0px 0.5em; }

.katex .cd-arrow-pad { padding: 0px 0.55556em 0px 0.27778em; }

.katex .mover, .katex .munder, .katex .x-arrow { text-align: center; }

.katex .boxpad { padding: 0px 0.3em; }

.katex .fbox, .katex .fcolorbox { border: 0.04em solid; box-sizing: border-box; }

.katex .cancel-pad { padding: 0px 0.2em; }

.katex .cancel-lap { margin-left: -0.2em; margin-right: -0.2em; }

.katex .sout { border-bottom-style: solid; border-bottom-width: 0.08em; }

.katex .angl { border-right: 0.049em solid; border-top: 0.049em solid; box-sizing: border-box; margin-right: 0.03889em; }

.katex .anglpad { padding: 0px 0.03889em; }

.katex .eqn-num::before { content: "(" counter(katexEqnNo) ")"; counter-increment: katexEqnNo 1; }

.katex .mml-eqn-num::before { content: "(" counter(mmlEqnNo) ")"; counter-increment: mmlEqnNo 1; }

.katex .mtr-glue { width: 50%; }

.katex .cd-vert-arrow { display: inline-block; position: relative; }

.katex .cd-label-left { display: inline-block; position: absolute; right: calc(50% + 0.3em); text-align: left; }

.katex .cd-label-right { display: inline-block; left: calc(50% + 0.3em); position: absolute; text-align: right; }

.katex-display { display: block; margin: 1em 0px; text-align: center; }

.katex-display > .katex { display: block; text-align: center; white-space: nowrap; }

.katex-display > .katex > .katex-html { display: block; position: relative; }

.katex-display > .katex > .katex-html > .tag { position: absolute; right: 0px; }

.katex-display.leqno > .katex > .katex-html > .tag { left: 0px; right: auto; }

.katex-display.fleqn > .katex { padding-left: 2em; text-align: left; }

body { counter-reset: katexEqnNo 0 mmlEqnNo 0; }

code, pre { font-family: "SÃ¶hne Mono", Monaco, "Andale Mono", "Ubuntu Mono", monospace !important; }

code[class="language-plaintext"] { white-space: pre-line; }

code.hljs, code[class*="language-"], pre[class*="language-"] { overflow-wrap: normal; background: none; color: rgb(255, 255, 255); hyphens: none; line-height: 1.5; tab-size: 4; text-align: left; white-space: pre; word-break: normal; word-spacing: normal; }

pre[class*="language-"] { border-radius: 0.3em; overflow: auto; }

:not(pre) > code.hljs, :not(pre) > code[class*="language-"] { border-radius: 0.3em; padding: 0.1em; white-space: normal; }

.hljs-comment { color: rgba(255, 255, 255, 0.5); }

.hljs-meta { color: rgba(255, 255, 255, 0.6); }

.hljs-built_in, .hljs-class .hljs-title { color: rgb(233, 149, 12); }

.hljs-doctag, .hljs-formula, .hljs-keyword, .hljs-literal { color: rgb(46, 149, 211); }

.hljs-addition, .hljs-attribute, .hljs-meta-string, .hljs-regexp, .hljs-string { color: rgb(0, 166, 125); }

.hljs-attr, .hljs-number, .hljs-selector-attr, .hljs-selector-class, .hljs-selector-pseudo, .hljs-template-variable, .hljs-type, .hljs-variable { color: rgb(223, 48, 121); }

.hljs-bullet, .hljs-link, .hljs-selector-id, .hljs-symbol, .hljs-title { color: rgb(242, 44, 61); }

.token.cdata, .token.comment, .token.doctype, .token.prolog { color: rgb(169, 174, 193); }

.token.punctuation { color: rgb(254, 254, 254); }

.token.constant, .token.deleted, .token.property, .token.symbol, .token.tag { color: rgb(255, 160, 122); }

.token.boolean, .token.number { color: rgb(0, 224, 224); }

.token.attr-name, .token.builtin, .token.char, .token.inserted, .token.selector, .token.string { color: rgb(171, 227, 56); }

.language-css .token.string, .style .token.string, .token.entity, .token.operator, .token.url, .token.variable { color: rgb(0, 224, 224); }

.token.atrule, .token.attr-value, .token.function { color: gold; }

.token.keyword { color: rgb(0, 224, 224); }

.token.important, .token.regex { color: gold; }

.token.bold, .token.important { font-weight: 700; }

.token.italic { font-style: italic; }

.token.entity { cursor: help; }

@media screen and (-ms-high-contrast: active) {
  code[class*="language-"], pre[class*="language-"] { background: window; color: windowtext; }
  :not(pre) > code[class*="language-"], pre[class*="language-"] { background: window; }
  .token.important { background: highlight; color: window; font-weight: 400; }
  .token.atrule, .token.attr-value, .token.function, .token.keyword, .token.operator, .token.selector { font-weight: 700; }
  .token.attr-value, .token.comment, .token.doctype, .token.function, .token.keyword, .token.operator, .token.property, .token.string { color: highlight; }
  .token.attr-value, .token.url { font-weight: 400; }
}

.PopoverContent { z-index: 1000; }

.react-select-container input:focus { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(var(--tw-ring-offset-width)) var(--tw-ring-color); box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent); }

.react-select-container .react-select__control { --tw-border-opacity: 1; align-items: flex-start; border-color: rgba(236,236,241,var(--tw-border-opacity)); border-radius: 0.5rem; font-size: 0.875rem; height: 192px; line-height: 1.25rem; min-height: 192px; overflow: auto; padding: 0.5rem; }

.react-select-container .react-select__control:hover { --tw-border-opacity: 1; border-color: rgba(217,217,227,var(--tw-border-opacity)); }

.dark .react-select-container .react-select__control { --tw-bg-opacity: 1; background-color: rgba(32,33,35,var(--tw-bg-opacity)); border-color: rgba(255, 255, 255, 0.1); }

:is(.dark .react-select-container .react-select__control):hover { border-color: rgba(255, 255, 255, 0.2); }

.dark .react-select-container.react-select--invalid .react-select__control, .react-select-container.react-select--invalid .react-select__control { --tw-border-opacity: 1; border-color: rgba(239,68,68,var(--tw-border-opacity)); }

.react-select-container .react-select__input-container, .react-select-container .react-select__placeholder { padding-left: 0.5rem; padding-right: 0.5rem; }

.dark .react-select-container .react-select__input-container { --tw-text-opacity: 1; color: rgba(197,197,210,var(--tw-text-opacity)); }

.react-select-container .react-select__input { height: 2rem; }

.react-select-container .react-select__control--is-focused { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(var(--tw-ring-offset-width)) var(--tw-ring-color); box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent); --tw-border-opacity: 1 !important; border-color: rgba(217,217,227,var(--tw-border-opacity)) !important; }

.dark .react-select-container .react-select__control--is-focused { border-color: rgba(255, 255, 255, 0.2) !important; }

.react-select-container .react-select__value-container { padding: 0px; }

.react-select-container .react-select__indicators:empty { display: none; }

.react-select-container .react-select__multi-value { background-color: transparent; margin: 0px; }

.react-select-container .react-select__multi-value__label { padding: 0px; }

#intercom-container { display: none; }
------MultipartBoundary--ROEkRDbQpEp94BJjvmPS5UEalZwGzTSzcn7tyKLFx0----
Content-Type: image/webp
Content-Transfer-Encoding: binary
Content-Location: https://chat.openai.com/_next/image?url=https%3A%2F%2Fs.gravatar.com%2Favatar%2F6241bfe48785687ad5d68f5c836fbe6d%3Fs%3D480%26r%3Dpg%26d%3Dhttps%253A%252F%252Fcdn.auth0.com%252Favatars%252Fna.png&w=96&q=75

RIFF   WEBPVP8   Ð
 *` ` >H J¥¥#¡¦[h°	c Rºèlyæâ¿-@J±ÝÔôuÃcµX
jsrÔI¬ØzPäDà þ¸dýWÜÏT¿â½X:` ÖÍ¶ÙÀ¶*òÿÝD@øP6à^ðf%ÎÕf «ZDÔó*w}ò3ï¿æK+-8s|¾Xµº®OÃv¶9|'Î(YæÞ÷|Ø94C1&M!|ìàß¢(ûþ¹pÜE°+þÛm¥YÞëÂ2ø>³±'×a'|ÚlÚnDÜ:vÁÄ8UPÎ
¸à&w®d©X²7¼òT÷Ø6üâr þÈC<G{ÌÁ,Û&c.{Çìuüo°õPbeköÞlLöËC/ìBRoÖ¦¤f¨Ë0ð#ÂMËJÈ¨èY 'äC)T­»7¢Z »-nÆ×Øç_±(CÎÆ;æ2ÀèGØp; Ñ"ÛÂ#¶N<<\¸8%þÞÏ«DÌ WÊ1¢±£MçM¼q·©ôoÈ½ãÍÌóä Ä#<¿SäÅE2HÌ
án²Y½À     
------MultipartBoundary--ROEkRDbQpEp94BJjvmPS5UEalZwGzTSzcn7tyKLFx0----
Content-Type: text/html
Content-ID: 
Content-Transfer-Encoding: binary





------MultipartBoundary--ROEkRDbQpEp94BJjvmPS5UEalZwGzTSzcn7tyKLFx0------
