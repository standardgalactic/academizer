It's always funny to me because looking back on how I learned to code back in
2014 is similar to how people now look at videos of people in black and white
driving around and model T forwards.
I thought back then that I was on the cutting edge, to be honest,
that I was learning so quickly.
But now that I've been a professional software developer for so many years,
now that I mentor people who are learning to code, who are trying to
become software developers, there's so much that I've learned that I realized
that I was not on the cutting edge like I thought.
So in this video, what I want to do is really show you exactly how I would
learn to code if I had to start all over, start from scratch right now to
give myself the best opportunity to land a job.
I'm talking about now learning materials, I'm talking about projects you can
build, when to start applying, like I'm going to lay it all out there as
simply as I possibly can.
So let's dive in.
If we were to hop in a time machine back into 2014 and really see how I did
this.
So if we hop into DeLorean, hit eight miles an hour, you would see that the
process was pretty straightforward.
The first thing is I had my friend who recommended that I become a software
developer, he thought it'd be a good fit.
I asked him how do you do that?
He said, check out this headfirst JavaScript first and see if you even
like it.
I read that from cover to cover.
So I learned JavaScript that way.
And then I built two projects, a Tetris app and also a Google Maps API app.
After that, I actually learned C sharp as well through the headfirst C sharp
book.
Of course, I built two C sharp projects.
At that point, I was about nine, maybe 10 months in.
I applied for a bunch of jobs.
I eventually got a single interview and off that single interview, I landed a job.
So that's the simple process that's the abbreviated process of how I went
from no software developer to software developer.
So let's start with that first phase that I would really call the learning
the fundamentals phase.
So that part where I was just going through the headfirst JavaScript and
learning about JavaScript is what I would call learning the fundamentals.
Would I do that differently?
The answer is no.
Actually, that's one of the few things I would do the same.
I see people get this wrong all the time because they pick tutorials that
really kind of skim over the fundamentals and they start getting into projects.
And if they don't really know the fundamentals well, it's just a recipe
for disaster.
Learning the fundamentals basically means two things.
It means a learning syntax.
So the rules of a specific programming language and then B, which is the harder
part, how to think like a programmer.
So programmatic thinking, problem solving, thinking in terms of steps.
The best advice I can give you as far as learning the fundamentals is pick a
single learning resource that is high quality, meaning that it's carefully
cultivated and that requires you to engage with the material.
One of the reasons the headfirst JavaScript book is so darn effective is
because not only does it sort of like hold your hand through a lot of some of
the more simple concepts, but along the way, it is constantly asking you to
participate by doing little challenges and activities.
For example, in the headfirst JavaScript book, when they're actually teaching you
about arrays, they definitely take their time to explain what an array is, but
then they also have you do a challenge like this that really helps you to
break down and really work with the material so it becomes second nature.
So look, I personally recommend the headfirst JavaScript book as an excellent
place to start, but you can choose anything that is a high quality and B that
requires your engagement.
Being engaged and actively doing something while you're learning is the key
to learning anything.
So get off your butt right now, get engaged and go down below and smash
like button so you can learn as fast as possible and also get new videos when I
put them out.
All right.
So the next phase of the process of learning to code for me was actually
building a Tetris application.
The question there is, would I do that over again?
So this one, actually, the answer is no, I would not build the Tetris app all
over again.
Tetris is a very complex application.
It has a lot of moving parts.
And for a new developer, this is going to be very challenging.
And look, while definitely setting that bar high for yourself is a good thing,
it's actually better to progressively build yourself up to something complex
like Tetris.
Just like if you had a goal for running a marathon, which is 26 miles,
you would progressively build yourself up to it.
So maybe you'd start off with running maybe one, two or three miles and each
week you'd progress up to that.
That's the same basic idea.
This means that I would have built simpler apps like a to-do app or a recipe app
or a note taking app or a Pomodoro timer or an expense tracker.
The reason I take that approach now is because I've seen, especially with a
lot of my clients who follow this process is that because they're using their
skills in different contexts and trying different things, they develop a
stronger skill set, but they also better prepare themselves for more complex
projects because when you start to understand things in smaller projects,
it makes it a little bit easier to handle all of the complexity later on.
And also you learn to get frustrated and deal with your frustrations way before
you get to some of the complex projects.
The next phase of my journey was learning that second programming language,
which was C sharp in that case.
So the question is, if I had to do all over again, would I learn C sharp again?
So the answer is yes, but yes, I would definitely have myself learn C sharp again
because I learned a lot of things that I couldn't have learned in JavaScript,
the object oriented nature of it.
It's much more of an object oriented paradigm and also the statically type
nature and just there's so many different things about it.
Just the dot net framework.
I learned so much, but here's the thing.
I would have actually started applying as I was learning C sharp.
So even yes, I learned C sharp.
It helped me to land my first job, but honestly, I think I was ready at about
the six month mark to start applying for jobs.
It eventually took me a year and I don't think I needed to go through
the process of learning C sharp.
It was certainly helpful.
It helped bolster my resume.
So I would continue learning that second programming language as I started
applying for jobs.
If I didn't end up getting a job, I would go back to the drawing board and
maybe focus a little bit more on that second programming language.
So the last phase of my journey was the job hunt.
And you think because I landed my first job in my very first interview,
that there'd be absolutely nothing I changed.
I did it perfect, but that's not true at all.
I changed pretty much everything.
Obviously, as I mentioned, I think I waited way too long to start applying.
I think I could have got a job at the six month mark.
I was ready.
So we already rehashed that.
The second thing is I did a terrible job of interview preparation.
That's so important now.
I was very lucky that I got hired by a company that wasn't very traditional in
how they hired their software developers instead of having them do like white
boarding interviews or asking them random questions about a programming language.
They brought me in.
We talked a little bit of technical things, but then they just really had me do
a take home project and apparently the take home project was good enough.
And that was really my strongest skill that it landed me a job.
But now looking at the atmosphere for self-taught developers, you had to be much
more prepared than that.
So the first thing that I would do differently about the job hunt now is that
would practice interviewing.
So what I noticed about going to interview process is that I was very nervous.
I had really good skills, but when you go into interview, you're unsure of yourself.
You don't want to look silly.
And the problem is, is because you haven't practiced those skills in a very similar
situation where you're feeling a little bit nervous, when you get in the interview,
it's like the first time the nerves hit you, you're feeling very uncomfortable.
So now I would practice interviewing all the time.
I would have my girlfriend interview.
I would have my parents interview me.
I'd have other people I knew interview me just to get in that sense where you're
feeling very, very comfortable with things.
And the second thing that I would do differently is I would practice
leak coding and hacker rank problems much more regularly.
Back then in 2014, I did maybe five or 10 hacker rank problems.
And I was like, okay, I got it.
I understand how it works.
But you don't realize that you need to actually go into it feeling very
confident that you can do a hacker rank problem in front of someone else.
And that only comes from a repeated practice over and over and over again.
So if I was in the job hunt phase, I would be focusing on doing that about
two hours a day to really build up those muscles.
So you're confident when you go into an interview.
So look, as you can see, there's a lot that goes into learning to code to
the point where you are a professional.
So if you're in the same position I was back in 2014, you're learning this on
your own, you want additional support and guidance.
I have a paid mentorship program that if you're interested in joining, I will
leave a link in the description below of how you can do that.
So other than that, that's all I've really got.
Thank you so much for watching and peace out, everybody.
