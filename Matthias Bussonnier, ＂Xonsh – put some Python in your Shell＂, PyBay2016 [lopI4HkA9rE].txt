Thank you very much, Sean. I hope everyone had a great lunch and that you don't want
to sleep too much. I will actually have some mistakes, especially in my talk, just to make
sure that you pay attention. I will ask a question in the end after you ask me a question.
Hi, I'm Mathias. Here is how you can contact me. I have also a terrible French accent. I hope
you won't mind. I'm originally a physicist. I did my PhD in biophysics, and now I spend my
time writing software. I mainly work on IPython and Jupyter, if you've heard about it. I have the
chance to do that in the beautiful Doh library in Berkeley, which is just across the bay. If you
want to ever come talk to me, you're welcome. This is actually the window of my office. But
enough about that. Conch is a site project I'm contributing to. It's been created by Anthony
Scopat. By the way, it's Anthony's birthday this week. If you want to tweet at him, it's a happy
birthday. I think he will like that. I'm not one of the more active contributors. I'm way
far this way. I'm mostly complaining when something breaks, and also I own the domain name
because I'm from Europe, and I was able to buy the domain name for Conch, which is Conch.sh. And
that's why I'm mostly participating. And I also use Conch as my everyday shell. You can
install it right now. It's Python 3, 4 plus only because we use a lot of these new awesome
features that are on Python 3. And some people want to proceed to Python 2, but it seems to be
quite complicated. You can still try if you want. And you can come to see us on GitHub. Yes, it's a
GitHub protocol. It's shorter to write. And the last version was released a couple of days ago,
and it's 4.5. It's still pretty buggy. I wouldn't recommend it, setting it as your login shell.
But it's really great to use on an everyday. So first things, how do you pronounce it?
Sean was nice enough that he pronounced it the way I pronounce it. But usually, how do you
pronounce it? You can pronounce it the wrong way. Carefully, differently each time. Or you only
write it so that you don't have to ask the question. I go with Conch, where it's not
ex, but a guy from Greek, like in latex, which is not latex because it's some other
connotation. You're free to disagree. You're free to call it differently. We just try to
stay to one pronunciation for the talk. It's also allowed a lot of things like puns, because we
like puns. There are puns everywhere in the code base, even on the documentation. So sometimes
don't take things too literally. So that we have our contributors, our configuration system,
constant question from a various garner of the continent, et cetera, et cetera. Why Conch?
Because it's a shell, for those of you who don't know. And so Conch is the only shell, which is
also a shell. Anyway, so why Conch? Because I can't remember half of the bash syntax. I don't
know how to make a loop when I check for equality of things, of strings. You have to pat strings
with something, because otherwise you have casting. And I'm writing Python all day, so I
remember the Python syntax. I really like to have the Python ecosystem at our fingertips,
especially Python come with a package manager. Bash does not. I have tried ZSH and installed
all my Zshell with hundreds of plugins, and then it becomes slow, and it's a nightmare to manage.
I tried Fish, which has a beautiful configuration system, where you type Fish config, it spawns
up a web browser, but the problem is that the Fish syntax is too different from the Bash syntax,
and I get confused. And the other reason is that shell is nice. Shell allows you to do things
really quickly, interactively. I'm not writing a lot of shell scripts, but I move around my
file system. I do a lot of operations on every day. I'm pretty sure most of you do that. And
having a nice shell is nice, and having shell syntax is really great for many operations,
where I don't want to have 20-line Python scripts to do that. Some people see Conch as
Python plus the ability to have shell. I personally think about it more as a shell plus
Python. They are roughly on the same level. You can use it both ways. When I want to use Python
plus shell, I tend to use Python, but I'm working on Python, so I might know it more.
And if you want a more in-depth tutorial and talk about how Conch works, I would highly recommend
to look at Anthony Picon's talk, which is half an hour. He wrote most of Conch. He knows it's
much better than I do. One of the other reasons why I use Conch is to do everything I'm told not to
do. Reminders, the two talks that are after me are a guide to bad programming, and it will
hack in the service of marginally improved syntax. I think it says a bit about a theme for this
afternoon in this room. So it's not because I show something here or that it's doable that you
should do it. So it's a really nice playground to basically see what you can do. One of the
particular reasons is that Conch is completely re-implementing the Python parser plus some extra
stuff. So if we want to make some syntax change to the Python parser and you want to have some
custom ASD transform, we can probably do that easier in Conch than in Python itself. And it
might be easier to get a patch in Conch because it's not stable yet than in Python itself.
David Perwell said it's at the shell that no one uses. It's false. It's my everyday shell. I'm
only working in Conch. Usually there is no dependency required. If you have only Conch on
your system, it works. It requires apply to lex parses and it's used Python to compile execute.
There is a custom tokenizer and ASD transform step. I would strongly recommend
installing it with all of the dependencies like prompt toolkit and pigments. Prompt toolkit is a
fantastic library by Jonathan Slender, which is drop-in replacement for read line, except you
have syntactic coloration live as you type. You have a real multi-line editing and you have
tab completion. And though you have that for free in Conch because when you use prompt toolkit,
we'll just use that. So try to think of Conch of how you can do a shell in the 21st century if
you have all the technology available now and you can assume that everyone has a fast enough,
decent enough computer where you're not limited to append on new lines. And now I will try the
risky demo. That's right now because it's a live demo. It was successful yesterday, so I hope it
won't today. And if you have questions during the talk, feel free to just shout something quickly
and I can try to address it. It would be nice. Okay. So this is Conch. Almost default install.
I haven't configured nothing except the smallest things on the side here, which
helps me remember what I want to talk about. So let's see what we can do. I will just remove
the prompt on the side because otherwise you probably won't see on the screen. Okay.
So let's start. So you can print. Do you see in the back? Yes? In the last row? Yes. Okay. It's
great. No need to zoom in with the font. Because prompt is just Python, let's try to set prompt
to something like triple chevron like we're used to. And so here we are just in our pure Python.
We can do one plus one. And it works. And you can use basically all the normal syntax you're
used to. You can do a loop. And as you can see, I have multi-line. I can make a square. And
because we are Python 3, 4, 3, 4 only, we can import this and this dot version info. Oops. Yes.
There is... You see that we are on Python 3.5 here. So you can use things like async.io. So if
you haven't played with async.io, it's roughly like green thread, go root things and so on and so
forth. So you can interleave tasks without having to use thread. And so here we can just make a
timer that sleeps a different interval. You see that we have to use await an async.io
sleep instead of time sleep because we are using async.io. And we can create two tasks that will
one print by bay and the other print hello with some emoji. And you see that the two tasks
are interleaving each other. So it's completely pure Python. You have everything that you have
available in Python. You want to install a request. You want to install an LTK. You want to
install a plotlib. You can do it and you can use it in your shell. Which is already great.
Though crunch is for me, I think it's mostly as a shell. So if it's a shell, I will just get
back the default prompt. We can get back to what the dollars are after.
You can use things like LS. You can look at all the Python that are in control,
for example, or look at your current working directory or even echo a string and say that
it's actually now, it's actually 111. And you can do quite something like
use LS. Which if you look carefully, you will see that it's not a normal which that you have.
You have some extra options. You can investigate on yourself and your systems if you are installing
that. Okay. So we have, we saw that we could, go ahead quickly, the question.
Okay. So how it differentiates. We see that we have Python and we have a shell at the same
time. You can have the same variable defined in the shell and Python. Python takes precedence
if it's valid Python. So here I have LS and if I assign one to LS and use LS, now LS is one.
So crunch will have seen that there is LS which is available in the Python namespace and say,
oh, okay. Oh, this is now Python. I will use Python. If it detects that this is not valid
Python, it will say I will try to parse it as shell. And if you cannot parse it as shell,
then you throw a syntax error and say, okay, I don't know what to do with that. And we will see
that there are more ways to distinguish. Okay. This is Python or this is shell.
So that you have all your flexibility. And so now you are, you can mix the two. So
pretty easily we will first go with the variable. I never remember how to use variable in other
shell. You have dollars but you have to set and you have to not have spaces between the variable
and the value is set too. So with crunch, you just use a dollar and uppercase because uppercase is
the default for variable. And you use an equal sign to assign. So here I cannot change my home
and change user but if I want to set foo to 12, I will do that. And if I want to check the value
of foo, I will just do foo and I get the value of 12. And we will see later that the environment
variable are also typed when they are accessed from the Python side. And when they are accessed
from the shell side, that's their string because they are environment variable. You can also dynamically
evaluate an environment variable. So here X is U.S. plus E.R. upper string. It's user. And if I put
that in a dollar bracket, it will look up the corresponding environment variable. Which allows
you to just loop through expression to generate environment variable which is quite useful. And
you can use environment variable both from the shell and from the Python side. Here I'm using
slightly different syntax to show you that it just works. It's just both in Python and in shell.
And I can actually print foo as well. And I can do foo dot. And you see that I will get the
type completion which is nice. You can go through it and consider it. The other thing that you
will see which is slightly different than auto completion is this thing. I don't know if you
see it in green. It's called auto suggestion and not auto completion. And basically you can start
to type something. It looks up in history but you can bind it to something else. And here it's
say, oh, do you mean foo bit length? I can press the right arrow and it will automatically
complete. So you basically replace your complete app automatically. So you have less
stroke and you know what you will complete. Complete two. And so variables are typed. So
you can basically use type and pass it environment variable and it will tell you, okay, this is a
boolean string or it can be more complex things like an ant path. And so here you see that my path
is a list like things which means that I can completely use all the methods I want from the
Python side. I can use indexing. I can slice it or I can even slice and sort. And so this is pretty
handy when you are accessing things from the Python side. And in particular, if I want to
access the full environment, I can look up dynamically an ellipsis instead of looking up a
string. And I will get a dictionary of all my environment. So I can look up easily our loop
through all my environment variable and do stuff with it. Like for example, pop all the things that
contain conch in it. Let's see if we can do that. Okay. So let's do a list comprehension. So here
is, it's a bit long. So here I will just look up everything with conch in it.
Okay. And boom. I have only things with conch. And if I want to modify, I can also say set value
to whatever. Okay. Aliases, yes. So unlike normal shell where aliases are just commands, in conch
you can define aliases. So you have to assign to a specific dictionary. We have the aliases
dictionary which is the Python variable. And you can assign either a tuple. And when you assign
a tuple, it will behave exactly as a normal shell alias. But as you can see here, I have some aliases
that are actually some functions that are Python functions. So let's see what we can do with
that. So here, it's an economic code. And you can do something like all your base belong to us.
Or you can also do a function. So when you assign a lambda function, the function takes two
arguments. It takes all the parameters you pass through the function and standard in as a name
argument as a second function. So for example, here, we can just make a lambda function to be
quick. And now we can measure whatever. And it will just work. You can also do it with a real
function, a real Python function that takes two arguments. And depending on whether, if you know
multi Python, whether it's a wish or if it's not a wish, either it will burn it or let it live. And
so you assign to the dictionary. And if you ask if the wish flows, burn. And otherwise, Arthur
is probably a king because he's not covered in shit. If you've seen the multi Python holy
grade. Okay. So let's continue. I tried to pick up some of my work flow I was using during the
last few weeks. I've been working on warehouse, which is a new Python PyPI. So if a huge
kudos to everyone who is working on the Python packaging, they're making an awesome job. And
so one of the things you need to do is to actually start Docker. Okay. It takes some times
because the current need to start. I should have started that before. And one of the things you
need to do when it started is you need to actually evaluate a command in bash to source the correct
environment variable. The problem is conch mine. Conch is using a different syntax. So you cannot
just run. Okay. That's great. Let's check. Sorry. Docker machine. Yeah. So basically it's telling
me I need to export that. Though you see that here is using export to export the environment
variable. And having compatibility with other shell because I have a lot of tools that have been
written with other shell. It's really important because you don't want to rewrite everything in
Python. And so conch allow to use source bash or source dash fish or source dash to source every
other shell script. And so let's see here if we can do that. So yes, we can do that. We can
basically what we can do is assign the thing we just did. Okay. So here we just evaluate
Docker machine and in a sub shell and assign that to a Python variable. We can look at what is in
the result. And now what we can do is actually evaluate that using source bash. And so we can do
source bash and use add syntax. You will see that the add syntax allow you to evaluate some Python
directly into the shell. And so basically this is Python. It says what is the value of result and
pipe it into bash. And now if everything went fine, I should just have all my Docker environment
which is set and I can continue. Which means that I can easily have long scripts which are written
in a foreign shell. And this foreign shell can completely interoperate with conch. Which is,
for example, all the Git completion scripts that you have online that allow you to do Git
star and tab and get some things. Or automatically you get it for free in conch if you have those
installed for bash. And now I want to remove everything. I can just do a list comprehension
and looking up the ellipsis is actually the environment variable and I can pop the key if
key has Docker. And now if I check, I just should have deactivated the specific environment with
Docker. Which means that all your workflows that used to work in bash and rely on some specific
bash specific or the SH specific things will work as is. You can also alias that. So here I am to
I have to use foreground in particular because it has to, there is a bug in conch I need to fix.
So I just set that for the demo. And I can use the same thing I did before but putting in a
lambda. And now I can just use undock if I want to deactivate my Docker environment. Here it's
defined interactively but I can put that in a conch RC file. Actually I didn't need to go
through Python so I can just source bash Docker machine and check that the occurring is in it
and just remove it. Oops, that's a little too long for...
And Docker. You see that I don't have Docker in my
environment variables. And so that's one source to answer one of your questions you ask. How can
you detect whether it's environment or it's shell or Python? You can use dollar parenthesis syntax
that is telus conch. This has to be a shell and you can use at parenthesis syntax that we
seen a bit before to say what's inside here is actually Python. Of course if it's not Python it
will crash because it's not the right syntax. Okay, so that's what basically normal quick
workflow to show you what we can do. And I told you that you can use all the power of Python and
bash so because you have aliases you can use aliases when you pipe things. And I don't know if
you use a request library. A request is HTTP for humans so it's pretty easy to use requests to
fetch things but many people are still reticents to use libraries they don't know and many scientists
will use things like W get or curl to do some analysis and they want to have curls and requests
in the middle. So for example you might want to use W get or curl and pipe into your standard
library JSON parsing functions and you have also the opposite people that don't know how to use
curl and W get want to use request but are a huge fan of grep said and all these tools because
they know how to do it, they know how to do regular expression and that's how they work. And when
you want to do something which is one of things you just don't want to write a script from that.
So let's see if we can have something like that. So let's go with a request first. So can I use
a library like request so we need to import it and we can, it's a little long but we can get for
example pep 20, does anyone remember what pep 20 is? There's enough Python, correct. So I have
response and the response have a status code which is 200 yeah, the Wi-Fi is working and a
content that somewhere has enough Python. So here I'm going to get the content, decode it, wrap it
in add parenthesis, echo it because I want it to be a shell command and then I will try to pipe it
and grep for better. And here I have all my, I have all the comments on the end of Python that
have better. I can also grab this to see if they have the import these things and indeed they say
that you need to do import this, we can check, we can import this and we see that we have the end of
Python. So here you can use request and you can pipe it to grep. Let's try the other direction, see if
we can use the value get first. Okay, so let's import JSON and let's try to get everything from
Cunch. So this was the Cunch API page to list the repository. You see that JSON is a bit long. So now we
will just wrap things and to get the curl and pass it into JSON loads, loads of strings. So the
dollar parenthesis will evaluate the sub process, making it to a string, pass it into Python, Python
gets JSON load and so we should just get an object. Yes, we have a Python dictionary and so I could
have assigned this dictionary to some things but I should be able to just loop over with a list
comprehension and look at the repository name. So let's try to do that. So JSON loads, same thing
we do the long things and bang, we get also the repository name. And there are not much that I had
to do. It's pretty natural to do that. If you would have to do that in bash, it would be quite
difficult. You would have to use tool like JQ, which allows you to parse JSON with custom
language expression and I'm never able to do that. Okay, what else can you do? You can do more
advanced stuff. Let's see if we can modify things on the PEP repository. The PEP repository is nice
but the PEP repository has a lot of RST PEP that are actually with a TXT extension and so they don't
render on GitHub because they have a TXT extension and GitHub will assume they are plain text. You
can make a Python loop that renames things but removing things on the repository pattern is
difficult especially if you want to do a Git MV and also you have to glob things the correct way to
only get PEP files. So we will use the advantage that is crunch if you use back tick. The thing
which is inside back tick will be interpreted as a regular expression and you will get the list of
files that match this regular expression. It's kind of the star glob syntax except it's regular
expression so often you know it's better than the glob syntax which has also some backtrack that I
never remember either. So let's see if we can do that. So sure I haven't done it before and here we
will use the, I just show you the glob syntax. Here we look at all PEPs that have four digits and with
the two first digits that are the same as the two other digits just to show you that. That's pretty
hard to do when you're using the normal star globbing. Sorry. And now we want to list all files and
now we will use the file variable which is a Python one to loop over and directly if the PEP has a
line which says content type is RST just use Git MV for this PEP. So you do a normal loop, you open
your file, you can check if your file has content type RST in it and if it has content type RST here
you will do a Git MV and now because you are on a shell line because Git is not in the Python name
space you will interpret the names that you just created for the for loop here and you will move this
particular file to the same file where you replace TXT by RST. And it takes a few seconds and now
boom, it's done. And you can see that Conch will automatically say that my branch has been dirty. I
was on master. Master was clean here and master is dirty here. I can do Git status. You see that
all my PEP files have been renamed and I can get stash if I want again and get my branch clean. And
all of that you don't have to set up. Conch knows about Git and if he doesn't know about your
specific version controlling system because we have all the power of Python we can just install an
extension for Conch that will teach Conch about your specific use case. So I'm starting to be
sharp on time so let's try to do something a little bit crazier. I will try to go to the Conch
directory. Ooh, that's bad. Live demo. I cannot even quit. So let's quit that. Let's restart
Conch. Let's see if we can get some help. And go to talks, talks. So for those of you who haven't
seen that, I have some help and some part of the talk are not actually typed by me. Okay. So I was on
section 20. That's something I developed just for Pi Bay. So let's retry. Let's do something like
prompt equal. Let's look at the prompt. And let's do prompt equal. Prompt.replace. And let's replace.
So user and host name by nothing. That should make the prompt shorter. Yay. So yeah. So that's the
prompt environment variable. And it works as a normal prompt environment variable like PS1 where
you have section except it's using Python string formatting. So you can replace all of these things by a
key and you can provide a function that will compute all of this value. So the prompt can be either a
string like that which is simple or you can define your own custom function that will build the prompt at
every step of your environment. And because it's an asynchronous prompt, you could even have a prompt
that displays the time, the current time and updates every second. So let's see. Let's try to grab
through all the conch source tree for all of the function definition and count how many times we have
the same function, name of a function definition which is the same again and again. I'm often trying
to sort things in directory like that. One of the issues I have, I never remember how to use said to
strip white space from each side of the line. So you see here that I will have depth definition
functions that are for space from the beginning of the file. But if I have a nested class, I will have
definition that are eight space or even things that are nested more. So here, if you know how to use
cut, so cut allows you to remove a specific part of your input and here you see that I have sometimes
spaces and sometimes I don't have spaces. And I want to strip that. How can I do that? I don't know how to
do that in bash but I know how to do it in Python. I can just take a string, I split the string online and for
each line I call strip and then I recombine the strings with new lines and I should have my white space at
the end of each, at the end of the line that are gone. And I can just, what I can do is just define that
as an alias. So I will call this alias strip and I make a lambda function and it takes all the things
that are in, it splits the line and it recombines them. And now that it's in an alias, I can just pipe
things through. So I should just be able to get to use back this expression and pipe it to strip and it
should, it should just work. Boom. I don't have my white space. And now what I can do is you cannot
either with cut, if you know how to use cut, you cannot use parenthesis as a delimiter. So if I want to
get just a function name, I cannot pass the parenthesis as an option. So I can define an alias on the
fly directly on a, oops, what I pipe. So I'm going to zoom a bit out so that you can see that. So here
you can see that I definitely directly made an alias online here and I was able to remove the part
which is, which is with the parenthesis. And so let's do the same thing but let's cut more and try to
count and sort things and try to find how many functions are in each things. And now you can,
basically I, I sorted that. I used unique to get the count. I resorted to have the number in
increasing value and I passed. I'm out of time so I will probably go a bit further. And so you see that
I got all of the function and now I can do nice things. I can directly use matplotlib to plot some
statistic on my, on my, on my code base. Okay. So let's see if we can get matplotlib to work. So you can
just import matplotlib because we're in a terminal, you have to tell it to use AGG not to try to
plot anything before importing pipelots. And I can use NumPy to make, to make, to make some tests. So here,
here I'm just doing this fake data but I could have a parse which is just before. And so I can
plot things on my matplotlib. I can save as a specific file. And because here I'm in item two,
what I can do is actually get this figure data, base 64 encoded and I should be able to display it,
display it in line. For that I need to define a lambda function which is, this is specific, this is a
specific syntax which is only item two and some terminal on, on, on Linux. And you can, you can
basically directly get, use that to, to get things in line in your terminal. So here I can do directly
have my image here from, from the data and what I can do, I can directly also do something like plot,
I think it was num I had before or res. And what I can do also is if you don't have this ability to
display image in lines, you can ask Conch to convert it to ASCII art for you. Tada! You have your
plot in line. That's not really useful but you can actually zoom out a lot and it will take quite
some time. But if you do the same, after a few seconds, oops, yay, you have your graph. So you
can have your graph in line. I don't know why you would like to use that. Maybe if you're on SSH
and you cannot, you cannot really use it. And that's, that's about it for, for, for the demo. That
went not too bad. I didn't want to do all the detail. You can have captured and uncaptured
sub processes with either a dollar or bank and they will either stream or not stream the data to
you, which can be useful depending on the process on the thing you want to do. You have like
I Python, you have help and super help with question mark or double question mark, which will
try to fetch as much information as possible you want from either sub process or a Python, a
Python, a Python function. You can customize your prompt, which is completely asynchronous. And
of course we have our own, our own file format, which is SSH, which is parsed as Conch script
where you can mix and match your Python and, and your shell. And we have an import hook, which
means that if you install the import hook, you can even import SSH file from within Python. And
because they are compiled as Python AST, it's just completely transparent from the Python, for
the Python interpreter. So you can use Conch from, from inside, from inside Python. We have much
with sure that that's for sure for many of, of our internal object representation, like the
history is full JSON with timestamp before you run the command, after you run the command. It has
a return value. So if you are a data scientist and you want to log all your work, this will really
help you because you can come back afterwards and say, hey, where did I put that here? And you can
dig into, into things. And we have our contrib package, which are a lot of extension, like the
one you showed me that helped me to type during, during this demo. It was not completely recorded.
It was like half-recorded, half-live. And you can post things at any time and resume. It's still,
still using threads with locks. So it's not, it's, it's not yet ready for, for, for, for broad,
broad usage. And because we're using prompt tool kit, we have also a lot of hooks, like if you
have a few lines that are starting, starting to, to grow and you want to actually edit it in a
max or in Vim, there you can actually bind a shortcut, which will get the input, send it to a
max. You can edit in a max, finish your things and say to a max, hey, I'm finished and you will
have your prompt that edits and you don't have to do your copy-pasting with, with a mouse. And we
have syntax coloration as you type, as you, as you saw and all the things are, are configurable.
There are more crazy stuff that I don't understand. Like for example, there is this context
manager because we have our own AST and the context manager don't execute the block which is
inside. It actually gets a string of what is inside. Technically, you can do whatever you
want with this and you could have a different language. It's still roughly limited by the fact
that the thing which is inside here has to be a Python syntax, but we should be able to get, to,
to, to remove that. And let's try to get Shell and Python to work, to work together and I'm running
out of time. So please come ask questions later if you want and I will be around. Thank you.
Quick question maybe here.
I think for now, I don't know how many people use it and it's a really nice playground. So I doubt
many of the core developers want to release a 1.0 because it's forced us to start to have things
that are stable. And it's really fun to play with that and break things all the time. I'm using it
every day as a shell. I wouldn't recommend it to, on production. I don't see, anyway, if you want
stable code, you don't want to use, to, to, to use, that's my, my own opinion is, is something
that is really, really, really great as long as you're, you're using it on every day and if you
want to be, to be productive because it has a nice features that make it interactive. I guess at
some point when we have an enough mass of people behind, we want a 1.0, but you would have to
ask Anthony, which is the main developers, what is thinking about that? Sorry if it's disappointing
you. Though one thing I would hope is that this allows us to explore some things that might,
but we might want to push through the Python side after a few years because we can explore a lot of
things.
Oh, with the, uh, and, uh, so we have, uh, on custom lexer, parser and everything and it's
half context sensitive and half context insensitive. So sometimes it's still buggy. So for example,
we also have the feature request that and A and D and or, or R would also do this kind of
double ampersand and double, uh, oh yeah, the question was how do you distinguish with, uh,
ampersand, ampersand and, and, uh, pipe, pipe for or, uh, and so for example, we had bug reports
where someone had, uh, homemade movies that had and in the name and the two part of the name were
actually being, uh, being expressed, uh, trying to be parsed as sub processes and it was trying to
do, oh, I don't find this to process and I don't find this to process either. Uh, you have way
around that, which is because you're, you're on Python, you can force one way to parse by using
strings. If you're using strings, you say, okay, this is a string and Python will take precedence
and sometimes you still have to go through some hoops, but it's, um, it's becoming rarer and rarer.
A few months ago, you, you had a syntax issue every couple of days and now it's, uh, it's every
month we have one, one request. One more question. Okay. No question. Thank you very much and, uh,
looking forward for the next talks on how to do a bad programming.
