Today we're going to talk about the Mythical Man Month.
It's written by a guy called Fred Brooks,
who's part of the IBM New York team
in the, I guess he must have started in the 50s,
moving on into the 60s.
And this was the era of IBM wanting to step beyond
architectures that absolutely needed
to be programmed in assembler.
They wanted a paradigm shift in writing operating systems,
although they still ended up using assembler for that.
They wanted higher level languages.
They wanted a big leap forward.
And the 360 series did give us several big leaps forward.
There is no question about it.
The Mythical Man Month is a myth because,
unless you are very, very lucky,
and it only happens occasionally,
men and months are not interchangeable.
Now, since it was first written,
getting on for 45 years ago now in 1975,
I'm afraid there was no chance of getting it called
a person month or anything like that.
So I am only following the actuality,
and I'm afraid that some of the graph side draw
will have men versus months.
But if you want to put person power down there, absolutely fine.
The era that you've got to project your self-backing
to, which is a lot easier for me than for many of you,
is the 1960s.
And there was a really awkward situation
that the basics of computer hardware,
at least, were understood.
IBM computers solve in minutes problems
that once took weeks, months, even years.
And what was understood was that having more memory
cost a lot of money.
In a previous video, I pointed out,
and two IBM salesmen came, buttoned up, holding,
that one megabyte of IBM memory for the 360 series,
which came as a meg in a box for demonstration purposes,
but could be supplied in a more chassis-mountable format later,
that one megabyte would have cost you $100,000.
Now, Fred was the leader of the team
that had not only got to specify the hardware,
was it gonna be six-bit characters?
How much maximum memory could you have and all that?
They not only were going to specify the hardware,
they were also going to try and move on from that
to writing an operating system,
because they realized that this was classic 60 situation.
Even IBM customers won't be able to afford to buy,
let alone air condition,
one of these mainframes per programmer.
It's gonna be a big shared machine,
so we're gonna have to give value for money
and make sure that it's got a good multi-user,
multi-tasking operating system,
and there's another major task that has to be taken on.
Turn of 1950 to 1960 is not very long
after genuinely first-generation machines
were gradually getting, how shall we say, outdated.
And think back, EDSAC 1949, I'm familiar with,
it used basically the Bordeaux code.
It was five bits.
Two to the power five is 32.
That's not too bad.
You say until you reflect that for your data,
you want alphabetics, 26, and you want numerics, 10.
That's 36 slots gone already.
How do you get over it?
Well, you have what's called a shift character.
This is still here on keyboards
or simulated keyboards we use today.
All of this was a known factor,
and the pressure then on all architects was,
shall we make a tentative step forward?
How about going for six bits?
And in, how shall we say, group discussions within ICL,
within boroughs, within every other IBM competitors,
oh, an extra bit, oh, that's gonna cost a fortune.
Will our customers pay for that?
Because, you know, adding that onto every single location,
oh, it doesn't bear thinking about it.
Yes, I think if we price it carefully,
we can get away with six bits.
And certainly, again, some of you may remember,
I think I referred to this earlier,
when I came to Nottingham,
we were stuck with a six bits per character computer.
The ICL 1900 series, it had six bit characters,
and you could pack four of them into a word,
which might be able to hold a big-ish integer,
although 24 bits isn't very big,
so to get even bigger agglomerations,
you had to, as it were, electronically,
link two of these together.
About the time you got to 48 bit words,
you were getting to a stage
that at least you could do single precision arithmetic,
almost accurately enough to keep an engineer happy.
If you look up, as I have had to do,
the details about Fred,
by the way, he's aged in his early nineties,
and for those of you who are going to make
sarcastic comments in the comments,
no, I haven't met him, I'd love to meet him,
I really would.
It would be a great treat and a great privilege.
But Fred, leader of the team,
who had been on earlier IBM six-bit machines,
not going to have the power and penetration
of this new plan series, he said,
no, no, no, no, really, six bits is not enough.
Okay, you could do the alphabet,
but you can't do the alphabet in upper and lower case,
which is what we want.
We increasingly want to be able to type a set of stuff,
so we need to be able to distinguish
between lower case G and upper case G,
and they really ought to have codes of their own.
And when you tot it up, numbers,
upper case, lower case, some punctuation,
two to the six, 64, it's not quite big enough.
Obviously, all hardware people know,
it's unthinkable to have a hardware byte
that is actually an odd number of bits.
That way does madness lie,
but we've got to be brave here.
Let's go for the eight-bit byte.
And of course, a byte meant in those days
any agglomeration of bits that your machine
deemed to be worthy of holding a character.
And I can just imagine,
Fred, have you gone completely off your rocker?
Have you any idea how much this will cost?
And I think that my retort would have been,
well, look, they're IBM customers,
and they know they're getting the best.
This isn't any a memory, this is IBM memory.
And in a way, I can see that if anybody
was going to pioneer and do this,
it should better be IBM,
because they had customers that could afford
to be alpha testers on this idea for them,
and to report back whether it was a good idea or not.
To shorten the story somewhat,
they did go for the eight-bit bytes,
but also what came along with that,
and I don't know again if it was somebody else on the team,
or whether it was Fred or whatever,
also came up with the idea of as follows.
There'll be a temptation to put in or make possible
an agglomeration of four of these eight-bit entities.
That's 32 bits.
That will hold a very decent size integer indeed,
because on a six-bit machine,
digging out each six-bit character
from a 24-bit agglomeration.
Oh, it makes me shudder to think about it.
You needed bit-shift operators.
You needed to shift left the six-bits on the left
into a vacant word as it was, 24-bit word,
and then shift them back again
as for all the other stuff or do whatever.
And somebody on that IBM team said,
no, we make the bytes be addressable.
Had IBM the chief hardware man,
and I've probably had 50 fits,
because you are making the address bus
be that much wider, yeah?
You're basically saying, no, it's not, you know?
I'm not pointing at one big thing.
I'm pointing at lots of smaller things individually.
However, of course, Fred would say, yes,
but once you've landed on that thing,
and don't forget a lot of our programmers
and a lot of our customers use COBOL.
And if we make our characters be eight-bits,
then all our character-based programming
on which, from which our bread and butter comes,
is immediately, probably in order of magnitude faster,
almost, than it would be on lesser machines,
because we've got the eight-bit addressable byte.
So anyway, he won the day,
and I think the rest is history,
because looking up his biography now,
I was amused around at the bottoms when people said,
Fred, what are you most proud of?
What was your biggest contribution
to system 360 architecture?
And he didn't say,
making people aware of the Mythical Man moment.
He said, no, winning the battle,
that we didn't need a six-bit byte,
we needed an eight-bit byte.
And I was so glad to see that down there in black and white.
In a way, the thing we're going to talk about
for the latter part of this talk now,
he would have regarded, I guess,
as a very nice, desirable side effect.
He decided in the 1970s
to write an account of how we did it on the 360,
but in a chatty, accessible kind of storytelling,
almost, kind of mode.
And right at the start,
and in various places in this book,
do make sure you get the 1995, 20 years after version,
because it's got not only the original reproduced,
but it's also got an analysis
of where I went wrong, says Fred Brooks.
Why did he make his name with that?
And what was it all about?
I have here a chart.
He plots out a task,
which is typically reckoned to be nine-man months of labor.
And he said, okay, let's accept that,
see what it means, nine-man months.
What this means is that if I put one person on that task,
it will indeed take them nine months.
If I put two persons on that task, then of course,
it'll halve the time, won't it?
It'll only take four and a half months.
If I put three people on it,
it'll take one third of the time.
It'll take three-man months, and so on and so on,
until the limit point comes
that if I can only afford nine programmers
to put onto this task, it will all be done in one month.
Stop, he says.
That is an idealized situation,
almost never realized in practice,
because it assumes that your nine people
do not have a need to communicate with each other,
that these tasks are truly separable and in parallel.
Bit like picking tomatoes or strawberries
or something like that.
You have your own patch,
you don't bump into anybody else.
You can pick independently
of all the other pickers in the vegetable field.
Something like that.
And he said, this very, very rarely happens.
It just isn't like that.
The situations in the layer below you in the hardware
where you can get genuine parallelism like that,
like fetching bits in parallel,
since those bits are on separate wires and don't interfere,
then yes, this sort of argument,
but when it's real people who need to consult,
then it goes more like this.
First, he said, let's take a look
at the absolute polar opposite of everything being separated
and everybody can do their own thing.
I do believe that this thing that is now on my left,
I think it's a rectangular hyperbola
because the product of the X and the Y numbers
yields a constant number as it were,
nine times one is nine, three times three is nine and so on.
He then points out, he said,
your worst nightmare is to take on nine people
in order to get a ninefold increase, you hope.
But unfortunately, your underlying task
is not fully and independently partitionable.
It's one of these horrid things
where the person who does a little bit at the beginning
and says, oh, that's my month now, I want my money,
has to hand over the state of his calculation
to the next person at all.
And he said, well, why can't the person hand it over earlier?
No, no, if it's one of these awful problems,
where you have to compute a magic number
to be handed on to the next stage,
you can't hand it on until you've computed it.
So it's pointless hiring nine folks up front,
you're just gonna have to pay them furlough money
while they're twiddling their thumbs
because they haven't had the kickstart,
that their particular contribution.
So it's like a passing on of a token in a relay race.
If you've got a problem that really is like that,
it's innately serial from start to finish,
then you are in deep trouble.
You can pour men and money and material into it
until you're blue in the face,
you won't get it below nine months.
Worst possible case.
But then he said, oh, it's never quite that bad often.
Let's go to intermediate possibilities on the next sheet.
Now, as you might imagine, all that that does
is it takes our previous perfect rectangular hyperbola,
shifts it up a bit, and you can see here
the net result is pretty much what you expect.
You try adding men as fast as you can,
but it levels off higher than being down here,
which is the genuine asymptote
where it's headed for the axis.
It doesn't do that.
And that's because there's inherent,
enough inherent serial communication there
to shove the curve up a bit
and you can't do any better than that.
So that would be the case for,
if you're like an average programmer to team might write,
with some intra-team communication.
If you get unlucky and you get a task
that has got more complex communication,
you've still got time up here,
you still get men along here,
but can you see what's happening now?
That little curve I've drawn there
is trying to get more and more
like a flat straight line at the top.
You remember the diagram before last.
There's still enough parallelism in there
that it doesn't quite flatten itself out into a straight line,
but you can see what happens.
You get some improvement and then you get none at all
and you just head up towards the inevitable,
it's nine man months whether you like it or not.
So task with complex into communications
can have a curve looking something like that.
And what he said was,
you really must bear this in mind all the time.
It's no use talking about men and months
as if they're interchangeable and trade-offable.
They're not.
One of the things I thought when I saw this
is then there's the other thing about,
you've got to have the hand over, right?
Yes, that's right.
That famous person has to explain
what's going on to the second person.
That's exactly right, Sean.
I think he more or less in different words
says that this is another thing
about adding manpower to a project particularly late on.
You spent so much time explaining to the newcomers
who are quite talented
just why this intricate structure was necessary
before they can even start any programming
that you'd have been better off not to take them on at all.
And so there are various homilies in here
which say if you think you are underpowered
on a project, try and realise it early.
You can probably rescue the situation
with more men and whatever
if you recognise it early enough and take drastic action.
But don't leave it until it's one month away
from delivery time and then have a panic and saying,
oh my God, it is a year's work to go.
Memorable phrase number two.
How did this project get to be a year late?
Says the big boss and the answer is
one day at a time.
They're all sending their data as well.
So now what we've got is a situation
that wasn't handled by this concept of flow control.
What we're now going to need is...
I think Mike's going to demonstrate this in a second.
It's that log for J is like milk.
It's like water. It's everywhere.
