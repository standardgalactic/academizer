I guess you've learned just about all you need to know about me, but let me repeat a little bit.
I moved into this area about 15 years ago. I'm sorry, I apologize. Your mic's not on.
We're going to have your interest in it again, so we're going to re-rack.
This mic forgot my microphone too, so again, please welcome Chuck Moore.
Thank you for being here. I moved into this area about 15 years ago from Silicon Valley, and I love it here.
I moved first to Sierra City, in California, which is on the Pacific Crest Trail, a long trail.
I hiked it many times. Then I moved to Assets, which is five miles closer to the ridge of Sierra.
I moved into the inclined village. I moved into Carson City, and now I'm living in Rollington.
All this generation of Reno has remained my social city.
The libraries are fantastic, and I'm a great library person.
I've been ever since I started this genre of software development, basically.
I invented the fourth language in 1968. That was at the same time that the sea was invented.
One was created, period, for inventing languages, computer languages.
There was FORTRAN, COBOL, ALGOL, LISP, C.
Basically, there are three kinds of computer languages.
Based on the notation, C, for instance, has expressions like A plus B equals something.
It's called in-sixth notation. The operator is in between the two arguments.
LISP has a prefix notation, which would be plus AB, with the operator coming first.
Fourth is post-fix notation, where you have AB plus.
Now, in my mind, that is by far the superior notation. It leads to much simpler programs.
For instance, in C, you have a lot of parentheses.
In LISP, you have an enormous number of parentheses, and in fourth, you have no parentheses.
It's a much more natural language for human beings who did not learn algebra in grade school.
Algebra teaches you to put the operator in between the arguments, which is unnatural.
The operator really goes last. You have a column of numbers, and the sum is at the bottom.
The sum is the last thing you develop.
I developed fourth, and I used the three profiler in my programming.
I convinced a few other people to use it.
Back in the 70s, there was quite a community of thousands of fourth-programmers all over the world.
A lot of them in Germany and Russia and China.
As faded, there are still thousands of fourth-programmers, but they're invisible.
Partly because fourth can be used to trade secret.
If you write fourth-programs, they'll be smaller, faster, and bug-free.
And these are attributes that people don't like to share. They like to hold it close.
I took great pride in writing programs that I could use to do things that I wanted to do.
I had to write programs for other people in order to earn money, but those were not really satisfactory experiences.
It's better to do my thing my way.
One of the first things I did was design circuit boards.
So it is very convenient that this slide is out there.
I would like to suggest that some of you, some of the younger of you, might like to write their own software.
Back in the 70s, that's what you did. You could not buy software. There was no software to buy.
And I thought the future would be everyone writing their own software using the most efficient language, the simplest language they could.
Until Bill Gates came along and persuaded everybody to buy software instead of building it.
In fact, his genius was he persuaded you to buy it over and over and over again.
And that is the way he corrected the bugs or lack of features in the original versions.
More software is simpler than C software. When does this program then C?
When does this program then C?
OS, I think you probably see. There's only two languages in the world today, C, Java, and Fourth.
And you've never heard of Fourth. But it is orbiting Saturn.
The first program I wrote for my own use was the design circuit boards.
All I recorded was a small Fourth program and the ability to draw rectangles.
So that is a good exercise in programming. You can find any language on a computer that you have.
And they can draw pictures, draw rectangles, and move them around and make circuit boards.
You can see the rectangles here. Most lines are rectangles.
Most, well, these are contacts of octabels or taxigones, but they could be rectangles.
And you can do something on trivial and you can have a lot of fun doing it.
You can add a lot of color, draw color pictures. That's fun.
The reason for doing it is that current languages can do everything.
C is designed to do everything you want to do.
Fourth does not do that. Fourth lets you do anything, but not everything.
Fourth is what I call extensible. If you want to add a new command to do something you had not anticipated wanting to do,
you can do that easily. You can build the language in whatever direction you want to go.
Everything isn't there at the beginning, so you don't have that overhead.
Now, the overhead is significant.
The design of a circuit board might take a megabyte of code.
And fourth would take a kilobyte. Three orders of magnitude less code.
Three orders of magnitude, not one percent, but one tenth of one percent of the amount of code.
I have demonstrated this numerous times nobody wants to know.
There's a whole industry built up around large, inefficient buggy software.
It starts with windows.
It even goes into the standards committee with this bug they found recently in the secure socket layer.
You might say it's shocking. You might say it's fraudulent. You might say it's a conspiracy.
But it's good business because people are willing to pay money. It makes a lot of jobs.
You don't want a disruptive technology that will put nine million of the ten million programmers out of work.
But you can run your own software, do your own thing, and get a lot of satisfaction from it.
It's a lot more fun than, of course, for the puzzles.
After designing circuit boards, I thought it would be fun to design computers.
So I took the same philosophy I used with circuit boards and I shrink it down three orders of magnitude and designed a computer chip.
It isn't as hard as you might think.
In fact, it's really quite easy and all you have to do is draw rectangles.
The fact that the rectangles are tiny instead of macroscopic is not important.
And you lay out these rectangles nicely, three or four layers of them, and you have a computer chip.
To actually make such a chip will cost you from $5,000 to $25 million, depending on exactly what you're doing.
It's really not affordable, but actually making the chip is not important.
What you want to do is design it and simulate it and test it in virtual space instead of in real space.
And if you get a really hot design that you like and you can convince someone else to finance, then you become a product.
Now, we've got a product. We've got 144 computers on a one centimeter chip in a very conservative technology.
That's what it costs us $5,000 to make in small quantities.
So it can be done. Why would you do that?
Personally, I'm doing it to prove out how everyone else is doing a bad job.
My software is making 100 kilobytes to design the chip.
Cadence and metro graphics are the standard tools the industry uses to design chips and they're 100 megabytes.
You hear of programs that contain a million lines of code.
I know the software used in fighter planes, F-22, has more than a million lines of code, several million.
A million lines of code is my following.
It would be a stack of paper this deep.
You can't read a million lines of code.
You've got a thousand people contributing to a million lines of code.
Nobody knows what it does.
No one person does. It takes the entire corporation to know what that code does.
And no one in that corporation can answer your question or you have to ask it.
You have to trust that somehow it all works together.
And we all know how badly it works.
Windows comes out every year.
And it's probably a million lines of code.
But it isn't as big as some of the big codes.
Big codes are for weather forecasting, for nuclear test simulation,
for coordinating the motion of all the ships in the world.
There are big problems and there are big data, but they don't require big programs.
You can see this for yourself when you download an app to your smart phone.
Apps are of 10 megabytes of code.
10 megabytes.
If I were to do that in fourth, it would be 10 megabytes.
On the other hand, I would have to program the entire phone in order to get that kind of an advantage.
And so far, I've been unwilling to program on a smart phone.
Maybe I will.
I have 144 little computers that can do it.
You do need memory to store images.
You need memory for large databases.
Memory is a good thing.
But memory is not a good thing to show off the software.
Because 10 megabytes of code has bugs.
10 kilobytes of code does not.
If you want efficiency, if you want compactness, if you want viability,
you want small programs.
That means the program can do everything, but it can do anything.
We had written a browser in fourth.
It was small.
It wasn't as small as I would make it because I didn't like the way they were doing it.
But it's possible.
You can write an email application.
The way phones work, the way everything works in this world,
people don't really write software.
They take software packages from various sources and stick them together.
It's the same way to make software.
The software in the cell phone contains a chip which does amazingly many things.
A component from here, a component from there, all glued together.
This uses ten times as much energy, ten times as much area,
ten times as much design effort as it needs to,
but that's the way people are doing fixed holidays.
Not conspiracy.
It just seems to be the easiest way to do it.
It's the way the corporate managers want you to do it.
It doesn't have to be that way.
We can do better, smaller, faster, cheaper,
and it's up to the young generation coming along to change some of these trade-offs.
The way you do it is to write a program that does something you're interested in,
show it off a little bit, and prove it.
It's quite true on software.
One of the things about fourth is perhaps to help the back.
It's very easy to write a fourth operating system, fourth system.
It only takes about 10k of code.
Everyone who got interested in fourth wrote their own system.
There's many systems out there.
You want to know about it just to Google and find all kinds of references.
I have a website out there called ColorForce.com.
That's C-O-L-O-R-F-O-R-T-H.
The company I'm working with now is called Greenerays.
They have a website.
There's a fourth.com website, which has been around for as long as the internet.
Lots of information out there.
I'm very pleased to have been involved in it.
The conventional way of doing things is not always the right way.
It was probably arranged as a historical accident.
That's kind of true for a fourth.
A fourth came along and became what it is more or less accidentally.
If I had not been a fourth, I don't think it would have been a third.
It's not a popular way of doing things.
There's no great opportunity working there.
It's turned out to be a good thing.
I'm very proud of it.
Thank you for listening to me.
