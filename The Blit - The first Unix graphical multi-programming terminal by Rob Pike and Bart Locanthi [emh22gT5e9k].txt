Early computers could be used by just one person running one program.
To overcome this inefficiency so many people could use the machine, time-sharing was developed.
The obvious next step was to allow each person to run several programs.
UNIX is one of the multi-programming operating systems that now lets each person execute several programs simultaneously.
But the usefulness of multi-programming was restricted by the existing terminals.
Then the first multi-programming terminal was built.
The Blit fully exploits the new style of operating system.
The Blit has a 68000 microprocessor, a quarter megabyte of memory, and a standard RS232 terminal connection, all on one small board.
A hundred kilobytes of the memory is visible on an 800 by 1024 dot screen.
The Blit also has a keyboard and a digitizing mouse.
I point to things on the screen with the mouse.
I can also use the mouse to sweep out working areas instead of typing in coordinates.
The mouse fits comfortably in the hand with its three buttons under the fingers.
A small arrow on the screen shows where the mouse is pointing.
Buttons are often used to select actions from a menu.
Moving the mouse with the button depressed changes the selection.
Lifting the button completes the selection, such as deleting a working area.
But sometimes an extra button hit is needed to confirm the action.
What are these working areas?
They are called windows or layers.
All share the same screen and act like regular independent terminals.
I can make a new layer at any time and use it to run Unix commands.
For example, I can type who to see who's using the computer.
Each layer is separately programmable, so I can customize each one to a particular job, such as text editing.
The editor is controlled mostly by the mouse, which selects the text,
deletes it, rearranges it, makes changes.
When I want to compile the program, I don't have to exit the editor.
I just go to another layer and type make.
It's just like another terminal on the same screen.
Unix compilers are slow, so to entertain myself while I'm waiting, I can play asteroids.
You see? Compiler errors print out even while asteroids is running.
Is graphics good for anything other than playing games?
Of course. Graphics is useful for many things, such as integrated circuit design.
I can browse across the surface of a chip and instantly see design errors.
Now you can see the unique advantage of this terminal.
The debugger is running independently, debugging the circuit plotting program,
and it stopped the program as it drew the error.
Usually a debugger is a clumsy tool because it involves two separate processes,
the debugger and the broken program.
But a debugger fits smoothly into the Blit environment.
I've always been able to think about several things at once, but the terminal stood in the way.
Through the combination of graphics and Unix, the Blit has given me access to the power of multi-programming.
It's the only terminal that lets people multi-program.
It's the only terminal that lets people multi-program.
It's the only terminal that lets people multi-program.
It's the only terminal that lets people multi-program.
It's the only terminal that lets people multi-program.
It's the only terminal that lets people multi-program.
It's the only terminal that lets people multi-program.
It's the only terminal that lets people multi-program.
It's the only terminal that lets people multi-program.
It's the only terminal that lets people multi-program.
It's the only terminal that lets people multi-program.
It's the only terminal that lets people multi-program.
It's the only terminal that lets people multi-program.
It's the only terminal that lets people multi-program.
