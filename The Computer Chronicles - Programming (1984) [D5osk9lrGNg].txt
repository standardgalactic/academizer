Evet!
Micro Focus, creators of visual programming tools for software development, is pleased
to provide major funding for the Computer Chronicles, the story of this continuing evolution.
Welcome to the Computer Chronicles, I'm Stuart Schiffay and this is Gary Kildall.
Monsieur Kildall, est-ce que je peux avoir un dollar?
If you got me on that one.
What I was asking you was would you lend me a dollar?
Only I was using the French language to communicate to your brain, your computer and I guess
you're programmed in the English language so you didn't perform the program the way
I hoped you would and you didn't give me the dollar.
The point of this little story is that our subject today is computer programming languages
Gary and of course there are many languages you can program in just like there are many
languages we can speak in.
Before we talk about these different individual programming languages I thought you might explain
the different levels of computer language.
Well there are three major levels of computer programming languages that sort of depend upon
your level of sophistication, what you're going to use the language for.
The lowest level is what's called machine language and that's the language the machine
understands, the ones and the zeros.
The next level up from that is what they call systems languages and languages like the
programming language C would be in that category and those languages are used to program applications
such as word processors or spreadsheets and then the third level, the highest level is
what's called an application language or an end user language and those languages like
Fortran, Cobol, Logo, so forth fit into that category and so we'll get a chance today to
talk about some of those languages and see how they're used.
Okay indeed we'll see a demonstration of Cobol, Fort, Logo, we'll talk about Pascal.
First though let's try to understand a bit better this problem created by having so many
different programming languages.
This multi-lingual keyboard can perform the tasks of interpreter, grammatical advisor
and artist in translating English sounds into Japanese text.
The program does for human languages what most computers are incapable of doing with
their own languages.
Because machine codes vary from one microprocessor to another the same programming language cannot
be shared by two different computers for example AppleBasic is not IBMBasic, a language
customized for one machine will not run on another.
Like their human counterparts computer programming languages differ in structure, syntax, code
and even symbols.
But the lack of standard transferable code puts the programmer at a time consuming disadvantage.
After learning to write a program for one computer he must rewrite it for another.
As of a computer's wide range of applications languages are specialized, Fortran for science
and math, Cobol for business, Logo for education.
The more friendly a high level language the more translation it requires before it can
be executed at the machine level and correspondingly the slower it runs.
In some cases lack of speed at the machine level is a trade-off for quick interaction
with the user.
Using a third layer of complexity to computer programming is the assembly language required
to translate high level languages into machine code.
Programs written in assembly language are faster in execution but more difficult to
write than those in a high level language.
Software firms are developing more powerful portable languages for use in micros but as
long as computer manufacturers design exclusivity into their products and languages users are
faced with the same dilemma.
Businesses that will communicate with everyone accept each other.
Our guests today are Paul O'Grady, Paul is executive vice president for a strategic development
at Micro Focus and Paul works with Cobol and next to Paul Dave Eisenberg a senior engineer
and software developer with Apple computers and Dave works with Pascal.
Gary?
Stuart there has been a lot of languages around for several years that are considered traditional
languages like PL1, Fortran, Cobol is a good example of that and one of the difficulties
in the small computer industry is trying to bring those down into really usable languages.
Nowadays people expect a lot more interaction in the way they deal with computer systems
and I know that Micro Focus has been working on Cobol trying to make that more of a personal
orientation so what have you done?
Well we see ourselves Gary as in the business of exploding myths about Cobol.
The mainframe people have myths about it that it can't run on this kind of equipment and
the micro computer people have myths about it in the sense that they just don't like
the language at all, a lot of people.
What we try to do is we try to differentiate between the environment and the language itself
and the environment in the past for Cobol has been the mainframe environment.
We believe that that is what has led to much dissatisfaction in that environment.
What we've done here though with Personal Cobol which is one of our latest products
is show what we believe is the kind of thing that can be done and which is very appealing
on this kind of equipment.
I've already put us into Personal Cobol and Personal Cobol is a combination of an editor,
a forms generator, a checker, syntax checker and the ability to run programs.
In this case I'm going to go straight into the forms part and I've already created a
form for us.
This is a form that you created by drawing the lines in and so forth.
Yes, everything that you see on this screen here was created by directly keying in the
lines, the text, the X's, the square brackets, the whole thing.
I did it in approximately five minutes or so before the programs started.
What I'm going to do now is to start to generate the Cobol for this because another of the
businesses that Microfocus sees itself as being in is trying to redefine the term programming.
Form for us is simply generating code in whatever way possible, the most effective way possible.
In this case we're going to generate all of the code for this screen automatically.
That I'll do now.
We also wrote this program so that people who have finger trouble like me never really
crash the program.
I hope to prove that.
I'm going to create a complete program, an index program.
I've positioned the cursor as it tells me to and we're now generating Cobol in the
lower part of the screen.
Now this traditionally again, if you talk about traditional Cobol programming, you'd
start with a program that would work out all the details of it that would produce this
screen.
Is that correct?
Yes.
In this case what you've done is you've manually made the screen up by moving the cursor
around and it's doing the inverse.
It's actually producing the program instead.
That is correct.
Yes.
And we've already produced it.
We've produced the Cobol for that.
What I can now do is I can decide whether or not I want to save that.
In this case I'll exit without saving.
I've already created the text elsewhere.
As I said, some people have finger trouble and I always have finger trouble at points
like this.
Paul, you mentioned that some programmers have not liked Cobol in the past.
Why is that?
What is it about it that created a problem?
There is a lot of detail to the syntax.
The period at the end of each Cobol statement often cause problems.
There is also the need to define records at the beginning of a program prior to getting
into the guts of it, making the program do the work.
However, that comes from the type of application that Cobol was designed to bear upon.
Those are typically data handling applications, file manipulating applications.
For that kind of application, it is necessary to create the records to start with.
This is what you work with here is, again, a program generation concept.
If you talk about forms, you put up forms ahead of time and then you generate a Cobol
program.
Can you also do that for data structures for accessing files, or is this something that
would come up in the future?
In terms of the data structures, they're already built into the index sequential file mechanism
of the Cobol, and we adhere to the Cobol standard.
But yes, in the future, one can conceive of the ability to input the data structure directly
into the program prior to generating it.
Dave, you work primarily with Pascal, and tell us about Pascal and why you like it.
What are its special features?
One of the nicer things about Pascal is its power of expression in terms of, for a small
amount of text on the screen, which is given the right program or awfully readable, you
can get a lot of power out of it.
It allows you to express an algorithm, a method for doing a computation or some process, the
way you think about it instead of having to force it into some other mold.
That's one of the advantages of Cobol for business applications.
It's built for that, such that you can think in terms of a business or record problem and
do it that way.
Pascal was similar, but pretty much for more general purpose applications.
Pascal had several years ago a lot of interest in terms of using it as a systems language
and it was sort of touted as the all-purpose language of doing everything.
What happened?
Why did that not really take place?
Pascal was first designed as a language for teaching about computing and computer science,
and even its inventor admitted that that was what it was for.
He's been at work lately on something called Modula, which is designed to take over from
Pascal in terms of the systems area, which lets you get closer to the machine level,
but still again have the power of expression that Pascal has.
Paul, in coming up with something like Personal Cobol, Cobol we think of as you say a mainframe,
big corporation environment type language, what kind of use, what kind of application
do you see with something like Personal Cobol?
Well, we see not just the classic business data processing applications, we see personal
applications such as diary application, personal filing applications, and we also see office
automation applications all being applicable to Cobol.
They all require data handling and file maintenance, which Cobol was originally designed for.
I think it's also important to think of Cobol as being a system implementer's language,
but it's not the kind of language that you really promote as, say, an end user language.
Is that correct?
I would agree with that.
More to the kind of individual who is going to go out and write some extensive programs
and then go off and sell those programs.
So there's a whole layer of programming languages that fit in that category that maybe an end
user might not even want to consider, at least until they've had some experience with programming
languages.
Yes, I agree.
I think none of the standard, the normally accepted programming languages are applicable
for end users at this point, personally, not even basic.
Okay, well, our third guest is going to talk to us about fourth, and that's coming up in
just a moment.
Joining us now is Elizabeth Rather.
Elizabeth is president of Fourth Incorporated over most of Beach, California.
Elizabeth, tell us about fourth.
What makes that a unique programming language?
It's unique in two respects.
First, it is the only language that I'm aware of that was designed from first principles
to run in a small computer doing interactive software development for real-time applications.
The second area that it's unique relates to Gary's remark early in the program when he
mentioned the three levels of programming, and fourth incorporates all of them.
You can work right down at the machine code level when you need to.
You can do system programming and fourth.
In fact, the operating system that we're running on here was all written in fourth.
And you can do very high-level kinds of things, very high-level application-oriented programming.
For example, we have here a graphics program that is loaded, and I have a list of a large
number of demo programs that I could run here.
I'm going to try one of them called logos, which draws, it's not related to the language
logo, it draws our company's logo, which is a little bit chauvinistic, but the principal
thing that this is illustrating, this is a rather complex figure here, and we're doing
area fill, which is a fairly sophisticated graphics technique, and it's doing it very
fast and very well.
It's now got everything all white except for what was concealed in the little spots there,
and eventually we'll be able to make even the little spots go away.
But there are high-level words that put together this entire process, and I can show you some
of them.
Was that entirely done in fourth?
As far as any assembly language involved in that area fill, or was that entirely done
in fourth?
No, there is some assembly language.
So it's a mixture of those two in fourth, I see.
And you put in as much assembly language as you need, either to control hardware directly
or to make things run fast, and you notice this is a very fast program, but you have
the high-level version, I can say locate logos, locate fill, for example.
This is the area fill routine, which is written in code, because area fill is something that
needs to run very, very fast, so you have assembly language code here.
And then we have some other words called dark and light that are what we call high-level.
So this is assembly language, you're showing us part of this as fourth in the fourth statement,
is that true?
Yes, that's right.
The word dark, for example, that I'm highlighting here, makes the screen go dark, like that.
And it simply picks up the color and blackens the screen and then resets what the previous
color was so that when you draw something again you'll draw it in whatever color it
was.
So what we're seeing right here are the high-level things.
So the highlighted line itself is fourth in this case.
Yes, that's right.
Gary, you have your company, Digital Research, has logo out on it.
I just happen to have a disc with you.
And maybe you could load up logo for a minute and show us how logo comes in.
Let's go and give me some help over there with that.
Compare us to these other languages.
Dave, while we're waiting for logo to boot up there, let me ask you, are there always
going to be all these different languages, or are they going to merge into a smaller
number?
Well, it would be nice to have an ideal language, but I don't think it'll ever really happen.
Because, well, for example, COBOL, which we saw earlier, is designed and used primarily
for business applications.
Fourth is designed for real-time applications.
Logo is designed for education, teaching people to program.
And well, when you discuss languages, it almost becomes a religious argument, but really a
language is just a tool, and it's like arguing, well, which is better, a hammer or a screwdriver?
And you tell me what you want to do with it, and then I'll tell you which one's better.
I think that's probably the most important point about languages is that if you use the
right one for the right application, then it's the most effective thing you can do.
Logo is like a lot of different interpreted languages.
It gives you an immediate feedback to the work that you're doing.
And what I'll do here, I'm just going to make this screen into a split screen.
And I'll show you what I mean by the immediate interaction.
For example, if I type forward 30, then you see the pointer or the turtle is called moved
in a direction.
Now, that's immediate feedback to what you typed in.
Now, a lot of programming languages like Fortran or, let's say, many Pascal versions are what
they call compiled languages, and you don't get immediate feedback.
You have to go through an edit step and a compile step and maybe even linkage editing.
And that requires a lot of abstraction, a lot of thinking about what you're doing, where
languages that are interactive like Logo and Forth and other interpreters give you immediate
feedback.
Now, the next thing I'm going to load in here is called Blackjack, and it happens to be
a demo program.
That's familiar with that program, right?
You're familiar with that one?
Okay.
Now, the reason I'm loading this one, this happens to be an example of how you use turtle
graphics or graphics to draw pictures.
And this particular program was written by a 13-year-old in about three or four days.
Now, it's a rather precocious 13-year-old.
Is your son.
Well, no, actually.
He's a son.
It's genetically superior, Gary.
He's actually his friend.
But the point of it is that you can do things like this, like a little game of Blackjack,
without a great deal of effort in a language that's interactive and graphical in nature.
One of the nice things about these languages where you define your own words is that you
can make it read fairly close to English.
You can actually pick up a program and read it.
Gary.
Well, you're playing Blackjack there.
Many most new computer users get exposed to BASIC as their kind of language, and we
haven't really talked about that yet.
You're showing how easy it is to do a game like this in Logo.
How is it better than BASIC?
What are the problems in BASIC as a programming language?
Well, BASIC historically came from Fortran and has a lot of the original problems of
Fortran.
Fortran is one of the, in fact, may have been the very first, I guess, high-level programming
language, recognized high-level programming language.
So BASIC sort of followed that genealogy and has a scientific orientation to it, step-by-step
breakdown of the problem into simple steps that sometimes, not really the best way to
think about the breaking a problem apart.
Now, Logo came from the MIT Learning Project where they thought about the problem of problem
solving itself and then an underlying language that would be good for that.
So I think BASIC is just, it's an easy language to learn, but it has its limitations as soon
as you start to do anything complicated.
Well, BASIC was designed to be learned quickly by college undergraduates doing very simple
things.
It wasn't designed to do either sophisticated programs, nor was it designed to grow, and
I think both Fortran and Logo have the capacity to grow in the sense that you can teach them
new things, and there is a learning process going on in the computer, or between the programmer
and the computer, which is very similar to the learning process of teaching a small child
to do new things.
Well, I think that's interesting with Logo, also, is that it's sort of a bait-and-switch
tactic in the sense that you sort of get children interested in the language because of the
graphics, because they think of it as a big track that the programmer runs around the
floor, in this case a turtle.
But behind it is a language, a LISP, which has been used for years in artificial intelligence,
and all the LISP processing that's a part of LISP is also part of Logo.
And so there's, the Fortran LISP shares some, actually some foundations that are somewhat
similar.
Dave, are there any new languages on the horizon, or do we have a finite number now?
The last roster of programming languages that I saw had about seven or eight hundred names
in it, and I don't see an end in sight.
And a lot of languages are designed for one specific thing, I guess you'd call them almost
a toy language, except for the person who invents it.
So most of them, I think, are offshoots of the main languages, like Fortran, Cobol, Algal,
or LISP.
And yeah, as long as people have ideas for things they want to do, they'll invent a
new language.
So it's a kind of evolutionary process, I think all of you said, where one language
kind of builds on them.
I think also, it's a matter of getting started as far as learning a language.
Once you've learned one language, it's not very difficult to start picking up other languages.
And it seems to be a threshold to get over the very first time.
So I think that's what an interesting thing about learning languages is that you get started
at least.
Okay.
Well, we started and we're finished, thank you very much for being with us, and thank
you for joining us in this edition of the Computer Chronicles.
Computer Chronicles.
Micro Focus.
Computer's visual programming tools for software development is pleased to provide
major funding for the Computer Chronicles, the story of this continuing evolution.
