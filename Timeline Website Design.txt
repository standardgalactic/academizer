Timeline Website Design
Historial del chat
ChatGPT
ChatGPT
Sora
Nuspeak Translator
Jain Hive Tree
Zettel Assistant
Explorar GPT
Proyectos
Terminal Simulator
Hoy
CXD and AI Trust
Script improvement suggestions
Timeline Website Design
Ayer
Survival Guide
������������ ���������� �� ��������
7 d��as anteriores
Oblicosm and Intersubjectivity Collapse
Technosocietal Constructs
Pastwatch Observer
Critical Resistance
Psychocinema and So Big
Linux command for typing
Simulate Typing with pv
Script Improvement Advice
Stone Piano Theory
Massed-Spaced Learning in Cells
Dynamic Mesh Network Design
Psychocinema and Psychoanalysis
Extra-Sensory Phenomenology
Find font with logico
Clear image cache Chrome
30 d��as anteriores
Mereology and Conceivability
Anarchic Delusions
Simulaci��n terminal de hackeo
Check LFS Tracking Files
Extra-Sensory Phenomenology
Kawangware slum overview
Okwagala omwaka omuggya
Clickable Image Markdown
Ver planes
Acceso ilimitado, caracter��sticas de Team y m��s
Nathaniel Guimond
Abrir barra lateral
ChatGPT
o1
ChatGPT
o1
Compartir
Dijiste:
I'd like a new website, I'm going to call it timeline.html it's an update on my facebook wall (in Standard galactic, although you don't explicitly need to mention that as it is in my github username. All I want to show Is the images timeline-01.png to timeline-04.png (four images). You can maybe put the title "Unpublished Facebook Posts" or "My Timeline" in SGA and switch it to Cursive Galactic, then Clypto then Courier, say every 20 seconds. Here is a list of the contents of the "fonts" folder: Cheiro-Regular.eot    Clypto-Regular.woff2              Sga-Regular.ttf
Cheiro-Regular.svg    CursiveGalactic-Regular.g2n       Sga-Regular.woff
Cheiro-Regular.ttf    CursiveGalactic-Regular.ttf       Sga-Regular.woff2
Cheiro-Regular.woff   Lingojam_cipher-Regular.ttf       dactyl.ttf
Cheiro-Regular.woff2  Logico_philosophicus-Regular.g2n  demo.html
Clypto-Regular.eot    Logico_philosophicus-Regular.ttf  shapeform.g2n
Clypto-Regular.svg    Sga-Regular.eot                   shapeform.ttf
Clypto-Regular.ttf    Sga-Regular.g2n                   stylesheet.css
Clypto-Regular.woff   Sga-Regular.svg

<!DOCTYPE html> 
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Starfield</title>
    <style>
       @font-face {
          src: url('fonts/Sga-Regular.woff2') format('woff2'),
               url('fonts/Sga-Regular.woff') format('woff'),
               url('fonts/Sga-Regular.ttf') format('truetype');
          font-weight: normal;
          font-style: normal;
          font-family: 'Sga Regular';
    }

    body {
        font-family: 'Sga Regular';
            padding: 20px; 
    }

    canvas {
        display: block;
    }
        /* This is optional to make the control panel look nicer */
#controlPanel {
    z-index: 1000; /* Make sure it's on top */
    max-width: 300px; /* Set a max-width if you like */
    font-size: 14px; /* Adjust font-size as needed */
}
</style>
<script src="planets.js"></script>
</head>

<body>
    <div id="controlPanel" style="display:none; position:fixed; top:10px; right:10px; background-color:rgba(0,0,0,0.7); color:white; padding:10px; border-radius:8px;">
    <p>Controls:</p>
    <ul>
        <li>C: Show Commands</li>
        <li>WASD: Move ship</li>
        <li>QE: Rotate left/right</li>
        <li>RF: View up/down</li>
        <li>HL: Warp left and right</li>
        <li>JK: Zip down and up </li>
        <li>Z: Toggle Standard Galactic</li>
        <li>X: Toggle Labels</li>
        <li>G: Global Reset</li>
        
        <!-- Add any additional controls here -->
    </ul>
</div>
<script>
    let isUsingCustomFont = true;
    let canvas = document.createElement("canvas");
    let context = canvas.getContext("2d");
    context.font = "30px 'Sga Regular'";
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    document.body.appendChild(canvas);

    let controlPanelTimeout;

function toggleControlPanel() {
    let controlPanel = document.getElementById("controlPanel");
    if (controlPanel.style.display === "none") {
        controlPanel.style.display = "block";
        resetControlPanelTimeout();
    } else {
        controlPanel.style.display = "none";
        clearTimeout(controlPanelTimeout);
    }
}

function resetControlPanelTimeout() {
    clearTimeout(controlPanelTimeout);
    controlPanelTimeout = setTimeout(() => {
        document.getElementById("controlPanel").style.display = "none";
    }, 10000);
}
        let spaceship = {
            x: canvas.width / 2,
            y: canvas.height / 2,
            speed: 0,
            maxSpeed: 5,
            acceleration: 0.1
        };

        let words = planetsList;
        let bubbles = [];
        for (let i = 0; i < 1000; i++) {
            bubbles.push({
                x: Math.random() * canvas.width - spaceship.x,
                y: Math.random() * canvas.height - spaceship.y,
                z: Math.random() * canvas.width,
                size: 3,
                speed: Math.random() * 0.5 + 0.1,
                word: words[Math.floor(Math.random() * words.length)],
                isFocused: false
            });
        }

        let controls = {
            up: false, down: false,
            leftRotate: false, rightRotate: false,
            leftView: false, downView: false,
            upView: false, rightView: false,

            showLabels: true, 
        };

        let viewRotationX = 0;   // Rotation for h and l
        let viewRotationY = 0;   // Rotation for j and k
    
        function draw() {
            context.fillStyle = "#000000";
            context.fillRect(0, 0, canvas.width, canvas.height);

            for (let bubble of bubbles) {
                let verticalMoveFactor = controls.upView ? 1 : controls.downView ? -1 : 0;
                bubble.y += verticalMoveFactor * 5;
             
                let scale = canvas.width / bubble.z;
                let x = spaceship.x + bubble.x * scale;
                let y = spaceship.y + bubble.y * scale;

                if (bubble.isFocused) {
                    context.fillStyle = "#FF0000";
                    context.fillText("Planetary Brake Activating!", canvas.width / 2 - 100, 30);
                }

                context.strokeStyle = "#ffffff";
                context.beginPath();
                context.arc(x, y, bubble.size * scale, 0, Math.PI * 2);
                context.fillStyle = "#000";
                context.fill();
                context.closePath();
                context.stroke();
                if (scale > 0.1 && controls.showLabels) {
                    context.fillStyle = "#ffffff";
                    context.fillText(bubble.word, x, y);
                }
            }
        }

        function update() {
            if (controls.up) {
                spaceship.speed += spaceship.acceleration;
                if (spaceship.speed > spaceship.maxSpeed) {
                    spaceship.speed = spaceship.maxSpeed;
                }
            } else if (controls.down) {
                spaceship.speed -= spaceship.acceleration;
                if (spaceship.speed < 0) {
                    spaceship.speed = 0;
                }
            }

            let rotateViewFactor = controls.rightView ? 0.025 : controls.leftView ? -0.025 : 0;
            
            for (let bubble of bubbles) {
                let angle = Math.atan2(bubble.y - spaceship.y, bubble.x - spaceship.x) + viewRotationX;
                let distance = Math.sqrt((bubble.x - spaceship.x) ** 2 + (bubble.y - spaceship.y) ** 2);
                bubble.x = spaceship.x + distance * Math.cos(angle);
                bubble.y = spaceship.y + distance * Math.sin(angle) + viewRotationY;
                
                angle += rotateViewFactor;
                distance = Math.sqrt((bubble.x - spaceship.x) ** 2 + (bubble.y - spaceship.y) ** 2);
                bubble.x = spaceship.x + distance * Math.cos(angle);
                bubble.y = spaceship.y + distance * Math.sin(angle);
            }

            

            let rotateFactor = controls.rightRotate ? 1 : controls.leftRotate ? -1 : 0;

            for (let bubble of bubbles) {
                if (bubble.isFocused) {
                    bubble.size += 0.05;
                }

                bubble.z -= spaceship.speed;
                bubble.x += rotateFactor * 5;

                if (bubble.z < 0.5 || bubble.z > canvas.width || bubble.x < -canvas.width / 2 || bubble.x > canvas.width * 1.5 || bubble.y < -canvas.height / 2 || bubble.y > canvas.height * 1.5) {
                    bubble.x = Math.random() * canvas.width - spaceship.x;
                    bubble.y = Math.random() * canvas.height - spaceship.y;
                    bubble.z = canvas.width;
                    bubble.isFocused = false;
                }
            }

            // Check for focus
            for (let bubble of bubbles) {
                let scale = canvas.width / bubble.z;
                let x = spaceship.x + bubble.x * scale;
                let y = spaceship.y + bubble.y * scale;

                if (x > spaceship.x - 20 && x < spaceship.x + 20 && y > spaceship.y - 20 && y < spaceship.y + 20) {
                    bubble.isFocused = true;
                } else {
                    bubble.isFocused = false;
                }
            }
        }

        document.addEventListener("keydown", function(event) {
            switch (event.key) {
                case 'c':
                    toggleControlPanel();
                    break;
                case 'w':
                    controls.up = true;
                    break;
                case 's':
                    controls.down = true;
                    break;
                case 'a':
                    controls.leftRotate = true;
                    break;
                case 'd':
                    controls.rightRotate = true;
                    break;
                case 'q':
                    controls.leftView = true;
                    break;
                 case 'g': // Simulate F5 reset
                    location.reload(); 
                    break;
                case 'e':
                    controls.rightView = true;
                    break;
           
                case 'r':
                    controls.upView = true;
                    break;
                case 'f':
                    controls.downView = true;
                    break;
                case 'x': // Toggle the labels
                    controls.showLabels = !controls.showLabels;
                    break;
                case 'h':
                    viewRotationX -= 0.05;   // You can adjust the value for a faster or slower rotation
                    break;
        case 'l':
            viewRotationX += 0.05;
            break;
        case 'j':
            viewRotationY += 5;     // Adjust the value for a faster or slower vertical view change
            break;
        case 'k':
            viewRotationY -= 5;
            break;
            case 'z': // Toggle the font
                    if (isUsingCustomFont) {
                        document.body.style.fontFamily = "Sga Regular";
                        context.font = "30px 'Sga Regular'";
                    } else {
                        document.body.style.fontFamily = "sans-serif";
                        context.font = "15px sans-serif";
                    }
                    isUsingCustomFont = !isUsingCustomFont;
                    break;
            }
        });

        document.addEventListener("keyup", function(event) {
                if (event.key === 'c') {
                resetControlPanelTimeout();
            }
                        switch (event.key) {
                case 'w':
                    controls.up = false;
                    break;
                case 's':
                    controls.down = false;
                    break;
                case 'a':
                    controls.leftRotate = false;
                    break;
                case 'd':
                    controls.rightRotate = false;
                    break;
                case 'q':
                    controls.leftView = false;
                    break;
                case 'e':
                    controls.rightView = false;
                    break;
                case 'h':
                    controls.leftView = false;
                    break;
                case 'j':
                    controls.downView = false;
                    break;
                case 'k':
                    controls.upView = false;
                    break;
                case 'l':
                    controls.rightView = false;
                    break;
                case 'r':
                    controls.upView = false;
                    break;
                case 'f':
                    controls.downView = false;
                    break;

            }
        });

        function loop() {
            update();
            draw();
            requestAnimationFrame(loop);
        }

        loop();
    </script>
</body>

</html>
ChatGPT
Thought about dynamic font and images for 5 seconds
Below is a simple HTML page called
timeline.html
that displays four images (
timeline-01.png
through
timeline-04.png
) and shows a title that cycles through four fonts every 20 seconds:
Sga Regular
,
CursiveGalactic Regular
,
Clypto Regular
, and finally
Courier
(a system font). The snippet also includes the necessary
@font-face
rules for the three custom fonts mentioned.
You can change the order, timing, or any other details to fit your preference. Just make sure your
fonts
folder contains the required files and matches the filenames/paths in the
@font-face
definitions.
html
Copiar c��digo
<!DOCTYPE
html
>
<
html
lang
=
"en"
>
<
head
>
<
meta
charset
=
"UTF-8"
/>
<
title
>
My Timeline
</
title
>
<
style
>
/* 1. Sga Regular */
@font-face
{
font-family
:
"Sga Regular"
;
src
:
url
(
"fonts/Sga-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Sga-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Sga-Regular.ttf"
)
format
(
"truetype"
);
font-weight
: normal;
font-style
: normal;
    }
/* 2. CursiveGalactic Regular */
@font-face
{
font-family
:
"CursiveGalactic Regular"
;
src
:
url
(
"fonts/CursiveGalactic-Regular.g2n"
)
format
(
"opentype"
),
url
(
"fonts/CursiveGalactic-Regular.ttf"
)
format
(
"truetype"
);
font-weight
: normal;
font-style
: normal;
    }
/* 3. Clypto Regular */
@font-face
{
font-family
:
"Clypto Regular"
;
src
:
url
(
"fonts/Clypto-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Clypto-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Clypto-Regular.ttf"
)
format
(
"truetype"
);
font-weight
: normal;
font-style
: normal;
    }
/* Basic layout styling */
body
{
margin
:
20px
;
font-family
:
"Sga Regular"
;
background-color
:
#f2f2f2
;
text-align
: center;
    }
h1
{
font-size
:
2em
;
margin-bottom
:
1em
;
transition
: all
0.3s
ease;
    }
.timeline-container
{
display
: flex;
flex-direction
: column;
gap
:
20px
;
align-items
: center;
justify-content
: center;
    }
img
{
max-width
:
80%
;
height
: auto;
border
:
2px
solid
#ccc
;
    }
</
style
>
</
head
>
<
body
>
<
h1
id
=
"title"
>
Unpublished Facebook Posts
</
h1
>
<
div
class
=
"timeline-container"
>
<
img
src
=
"timeline-01.png"
alt
=
"Timeline 01"
/>
<
img
src
=
"timeline-02.png"
alt
=
"Timeline 02"
/>
<
img
src
=
"timeline-03.png"
alt
=
"Timeline 03"
/>
<
img
src
=
"timeline-04.png"
alt
=
"Timeline 04"
/>
</
div
>
<
script
>
// Cycle through these four fonts every 20 seconds
const
fonts = [
"Sga Regular"
,
"CursiveGalactic Regular"
,
"Clypto Regular"
,
"Courier"
// System font
];
let
currentFontIndex =
0
;
const
titleElement =
document
.
getElementById
(
"title"
);
function
changeFont
(
) {
      currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];
      titleElement.
style
.
fontFamily
= newFont;
    }
// Change font immediately after load
// Then set an interval to change it again every 20 seconds
setInterval
(changeFont,
20000
);
</
script
>
</
body
>
</
html
>
How this works
Font Face Definitions:
We define three custom fonts:
Sga Regular
CursiveGalactic Regular
Clypto Regular
Make sure your
fonts
folder and filenames match these references (e.g.,
"fonts/Sga-Regular.woff2"
).
Title Cycling:
The script cycles through the array of fonts every 20 seconds. After the custom fonts, it falls back to
Courier
(a system font).
Images:
The four PNGs (
timeline-01.png
to
timeline-04.png
) are displayed in a vertical stack within a
.timeline-container
. You can customize layout (e.g. columns, gallery, etc.) as you wish.
CSS Styling:
Minimal styling is applied. Feel free to add or remove as needed.
That���s it! This page will show the four images and automatically switch the heading font every 20 seconds among Standard Galactic (SGA), Cursive Galactic, Clypto, and Courier.
o1
Dijiste:
Ok I changed it to  // Then set an interval to change it again every 2.5 seconds
    setInterval(changeFont, 2500); 

what do I have to change so that that area doesn't change size with the fonts, it is moving the images very 2 and a half seconds?
ChatGPT
Thought about font size and layout fixes for 13 seconds
A simple way to prevent the heading area from jumping around is to give your
H1
(or its containing element) a
fixed height
(or at least a consistent min-height) and remove or limit any transitions that affect its size. For example:
css
Copiar c��digo
h1
{
/* Remove or limit transitions that affect layout (like 'all' or 'font-size') */
transition
: color
0.3s
ease;
/* Only animate color, not size */
/* Set a fixed height that comfortably fits all font variations */
height
:
2.5em
;
/* Adjust to fit your fonts */
line-height
:
2.5em
;
/* Match height to keep text centered */
overflow
: hidden;
/* Prevent text overflow from pushing the layout */
/* Other styles */
font-size
:
2em
;
margin-bottom
:
1em
;
text-align
: center;
}
Key points:
Fixed/Min Height
By setting
height
and a matching
line-height
, the heading occupies the same vertical space regardless of which font is active.
If you���re worried about the text getting cut off, use a slightly larger
height
so the tallest font fits nicely.
Limit Transitions
If your CSS has
transition: all 0.3s ease;
it can cause reflow (bouncing) whenever the font-family changes.
Change it to
transition: color 0.3s ease;
or remove the transition entirely so that only color changes are animated, not size.
This way, when the font switches every 2.5 seconds, the heading stays the same height and doesn���t push/pull the images below it.
o1
Dijiste:
is there something I can change to make courier smaller?
ChatGPT
Thought about adjusting Courier font size for 9 seconds
Yes! One of the simplest ways is to
detect when Courier is active
in your JavaScript and then assign a smaller
font-size
for the title element.
Example
html
Copiar c��digo
<
script
>
const
fonts = [
"Sga Regular"
,
"CursiveGalactic Regular"
,
"Clypto Regular"
,
"Courier"
// system font
];
let
currentFontIndex =
0
;
const
titleElement =
document
.
getElementById
(
"title"
);
function
changeFont
(
) {
// Cycle to the next font
currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];
// If it's Courier, set a smaller font-size
if
(newFont ===
"Courier"
) {
      titleElement.
style
.
fontSize
=
"1.5em"
;
    }
else
{
      titleElement.
style
.
fontSize
=
"2em"
;
// default size for other fonts
}
// Apply the new font-family
titleElement.
style
.
fontFamily
= newFont;
  }
// Switch font every 2.5 seconds
setInterval
(changeFont,
2500
);
</
script
>
How it works
After picking the new font
, we check if it���s
"Courier"
.
If
Courier
is active, reduce the
font-size
(e.g., to
1.5em
).
Otherwise, keep the heading at the standard size (e.g.,
2em
).
This approach ensures Courier will always appear smaller while other fonts retain their normal size. Feel free to adjust sizes to taste.
o1
Dijiste:
ok but now the images do shift when it displays courier
ChatGPT
Thought about font sizing and layout stability for 11 seconds
When you make Courier smaller (e.g., by changing its
font-size
), the total heading height shrinks and pushes the images up, causing the noticeable shift. To fix that,
keep the heading���s container at a fixed (or at least consistent) size
, so the overall layout doesn���t move when you change fonts.
Below are
two
common approaches:
1) Use a fixed (or min) height for the heading
Pros:
Simple, ensures no layout shift
Cons:
There may be extra blank space if Courier is much smaller
css
Copiar c��digo
h1
{
/* Fixed height matching the largest font */
height
:
2.5em
;
/* Adjust for your biggest font size */
line-height
:
2.5em
;
/* Matches height so text is vertically centered */
overflow
: hidden;
/* Hide any text overflow */
text-align
: center;
/* Avoid transitions that can change height/size */
transition
: color
0.3s
ease;
/* e.g., just animate color if you want */
}
Then, in JavaScript, you can still swap the font-size for Courier and not worry about the header jumping:
js
Copiar c��digo
function
changeFont
(
) {
  currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];
if
(newFont ===
"Courier"
) {
    titleElement.
style
.
fontSize
=
"1.4em"
;
  }
else
{
    titleElement.
style
.
fontSize
=
"2em"
;
// your normal size
}

  titleElement.
style
.
fontFamily
= newFont;
}
Because
h1
has a
fixed height
, the smaller text won���t pull the layout up or down.
2) Use a CSS transform scale instead of changing font-size
Pros:
The bounding box remains constant, and you can visually shrink the Courier text
Cons:
Slightly more complex, but very smooth visually
Keep
h1
���s height consistent (as in approach #1).
Use
transform: scale(...)
to visually shrink Courier without affecting the container size.
CSS
:
css
Copiar c��digo
h1
{
width
:
100%
;
height
:
2.5em
;
line-height
:
2.5em
;
text-align
: center;
overflow
: hidden;
transform-origin
: center center;
transition
: transform
0.3s
ease, color
0.3s
ease;
}
JavaScript
:
js
Copiar c��digo
function
changeFont
(
) {
  currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];
// Always use the same font-size in CSS, e.g., "2em" in your stylesheet
// Then scale down only if Courier is active
titleElement.
style
.
fontFamily
= newFont;
if
(newFont ===
"Courier"
) {
    titleElement.
style
.
transform
=
"scale(0.8)"
;
  }
else
{
    titleElement.
style
.
transform
=
"scale(1)"
;
  }
}
In this way, the heading container (
<h1>
) doesn���t change size���only the text itself scales, which prevents any shift of the images below.
Summary
Fix (or at least
min-height
) the heading
to the largest size you might need.
Either:
Lower the
font-size
for Courier but keep the heading���s height from changing,
or
Use
transform: scale(...)
to shrink Courier in place without affecting the box size.
By doing one of these, you���ll eliminate the vertical ���jump��� when switching to the smaller Courier font.
o1
Dijiste:
no that breaks the font switching
ChatGPT
Thought about preventing layout shift for 17 seconds
Below are a few
practical
solutions to keep your heading from shifting the images when switching to the smaller Courier font. The key is giving the heading a
fixed (or at least consistent) amount of space
so the page layout doesn���t jump.
1) Give the heading a container with a fixed height, then absolutely-position the H1
This is often the most foolproof approach.
It doesn���t matter how big or small the font gets; the container���s height doesn���t change, so the images below stay put.
html
Copiar c��digo
<!DOCTYPE
html
>
<
html
lang
=
"en"
>
<
head
>
<
meta
charset
=
"UTF-8"
/>
<
title
>
Font Switching Demo
</
title
>
<
style
>
/* We���ll use a "headingContainer" div to lock in the height. */
#headingContainer
{
/* Adjust to comfortably fit the tallest font at its biggest size. */
height
:
3em
;
position
: relative;
/* for absolute positioning of the H1 */
margin-bottom
:
20px
;
/* space below heading container */
background-color
:
#f0f0f0
;
border
:
1px
solid
#ccc
;
    }
#title
{
margin
:
0
;
position
: absolute;
top
:
50%
;
left
:
0
;
width
:
100%
;
/* Shift up by 50% of its own height to vertically center: */
transform
:
translateY
(-
50%
);
text-align
: center;
/* Keep transitions simple or remove them: */
transition
: none;
/* Or, if you want to fade color: transition: color 0.3s ease; */
}
/* Example images layout */
.timeline-container
{
display
: flex;
flex-direction
: column;
align-items
: center;
gap
:
20px
;
    }
.timeline-container
img
{
max-width
:
80%
;
border
:
2px
solid
#ccc
;
    }
/* Example font-face rules (customize to your fonts folder) */
@font-face
{
font-family
:
"Sga Regular"
;
src
:
url
(
"fonts/Sga-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Sga-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Sga-Regular.ttf"
)
format
(
"truetype"
);
    }
@font-face
{
font-family
:
"CursiveGalactic Regular"
;
src
:
url
(
"fonts/CursiveGalactic-Regular.g2n"
)
format
(
"opentype"
),
url
(
"fonts/CursiveGalactic-Regular.ttf"
)
format
(
"truetype"
);
    }
@font-face
{
font-family
:
"Clypto Regular"
;
src
:
url
(
"fonts/Clypto-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Clypto-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Clypto-Regular.ttf"
)
format
(
"truetype"
);
    }
</
style
>
</
head
>
<
body
>
<
div
id
=
"headingContainer"
>
<
h1
id
=
"title"
>
Unpublished Facebook Posts
</
h1
>
</
div
>
<
div
class
=
"timeline-container"
>
<
img
src
=
"timeline-01.png"
alt
=
"Timeline 01"
/>
<
img
src
=
"timeline-02.png"
alt
=
"Timeline 02"
/>
<
img
src
=
"timeline-03.png"
alt
=
"Timeline 03"
/>
<
img
src
=
"timeline-04.png"
alt
=
"Timeline 04"
/>
</
div
>
<
script
>
const
fonts = [
"Sga Regular"
,
"CursiveGalactic Regular"
,
"Clypto Regular"
,
"Courier"
];
let
currentFontIndex =
0
;
const
titleElement =
document
.
getElementById
(
"title"
);
function
changeFont
(
) {
      currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];
// Decide on a font-size based on the font
// (e.g., make Courier smaller)
if
(newFont ===
"Courier"
) {
        titleElement.
style
.
fontSize
=
"1.4em"
;
      }
else
{
        titleElement.
style
.
fontSize
=
"2em"
;
      }

      titleElement.
style
.
fontFamily
= newFont;
    }
// Switch font every 2.5 seconds
setInterval
(changeFont,
2500
);
</
script
>
</
body
>
</
html
>
Why this stops the shifting
The
#headingContainer
has a
fixed height (3em)
.
The
H1
is absolutely positioned within it, so the container never collapses or expands when fonts change size.
Even when Courier is smaller, the container remains the same height, so the images below do not move up.
2) Use a single H1 with fixed height/line-height (no extra container)
If you���d rather not add a container div, you can fix the H1���s own height and line-height. Just ensure it���s tall enough for the largest font:
css
Copiar c��digo
h1
{
margin
:
0
;
/* Big enough for the largest font */
height
:
2.5em
;
line-height
:
2.5em
;
overflow
: hidden;
/* if text gets tall, hide the overflow */
text-align
: center;
/* Avoid transitions on font-size or layout: */
transition
: none; 
}
Then in JavaScript, you can still shrink Courier as needed:
js
Copiar c��digo
function
changeFont
(
) {
  currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];
if
(newFont ===
"Courier"
) {
    titleElement.
style
.
fontSize
=
"1.4em"
;
  }
else
{
    titleElement.
style
.
fontSize
=
"2em"
;
  }
  titleElement.
style
.
fontFamily
= newFont;
}
Result:
The H1 always occupies
2.5em
vertical space, so the rest of the page won���t jump around.
3) Use
transform: scale()
for Courier instead of adjusting
font-size
If your normal heading font size is
2em
, keep it the same in CSS, then
scale
Courier visually so it appears smaller without changing the overall bounding box. For example:
css
Copiar c��digo
h1
{
margin
:
0
;
height
:
2.5em
;
line-height
:
2.5em
;
text-align
: center;
transition
: transform
0.3s
ease;
/* smoothly scale text */
/* Always use 2em in CSS so the bounding box is consistent */
font-size
:
2em
;
}
JavaScript
:
js
Copiar c��digo
function
changeFont
(
) {
  currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];
  titleElement.
style
.
fontFamily
= newFont;
if
(newFont ===
"Courier"
) {
// scale down the text visually to 80%
titleElement.
style
.
transform
=
"scale(0.8)"
;
  }
else
{
// reset to normal scale
titleElement.
style
.
transform
=
"scale(1)"
;
  }
}
In this method, the H1���s box is always sized for
2em
, and the text simply scales inside that box when Courier is in use. No layout shift occurs.
If ���it breaks the font switching���
Often this happens if you have
CSS transitions
on
font-size
,
height
, or
all
. That can cause weird layout shifts while switching fonts.
Make sure your transitions are limited (e.g.,
transition: color 0.3s ease;
or
transition: transform 0.3s ease;
) and don���t animate properties that affect the layout size (like
height
,
font-size
, or
line-height
).
If your text becomes clipped, increase the container or H1���s fixed
height
so the largest font has enough room.
Final Takeaway
To avoid layout shifts:
Provide a consistent vertical space
for your heading (either via a container with fixed height or the H1 itself).
Avoid transitions
on properties that affect layout size (like
font-size
or
height
), or at least fix the container height so changes in size don���t push/pull the images.
Optionally scale Courier
instead of changing
font-size
to keep the bounding box identical.
This will eliminate the jumps when the heading switches to a different font���especially the smaller Courier font.
o1
Dijiste:
ok it's good but the font glitches a little i mean it seems to change a little too quickly at the end of the loop: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Font Switching Demo</title>
  <style>
    /* We���ll use a "headingContainer" div to lock in the height. */
    #headingContainer {
      /* Adjust to comfortably fit the tallest font at its biggest size. */
      height: 3em;
      position: relative; /* for absolute positioning of the H1 */
      margin-bottom: 20px; /* space below heading container */
      background-color: #f0f0f0;
      border: 0px solid #ccc;
    }

    #title {
      margin: 0;
      position: absolute;
      top: 50%;
      left: 0;
      width: 100%;
      /* Shift up by 50% of its own height to vertically center: */
      transform: translateY(-50%);
      text-align: center;

      /* Keep transitions simple or remove them: */
      transition: none;
      /* Or, if you want to fade color: transition: color 0.3s ease; */
    }

    /* Example images layout */
    .timeline-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
    }

    .timeline-container img {
      max-width: 80%;
      border: 2px solid #ccc;
    }

    /* Example font-face rules (customize to your fonts folder) */
    @font-face {
      font-family: "Sga Regular";
      src: url("fonts/Sga-Regular.woff2") format("woff2"),
           url("fonts/Sga-Regular.woff")  format("woff"),
           url("fonts/Sga-Regular.ttf")   format("truetype");
    }
    @font-face {
      font-family: "CursiveGalactic Regular";
      src: url("fonts/CursiveGalactic-Regular.g2n") format("opentype"),
           url("fonts/CursiveGalactic-Regular.ttf") format("truetype");
    }
    @font-face {
      font-family: "Clypto Regular";
      src: url("fonts/Clypto-Regular.woff2") format("woff2"),
           url("fonts/Clypto-Regular.woff")  format("woff"),
           url("fonts/Clypto-Regular.ttf")   format("truetype");
    }
  </style>
</head>
<body>

  <div id="headingContainer">
    <h1 id="title">Unpublished Facebook Posts</h1>
  </div>

  <div class="timeline-container">
    <img src="timeline-01.png" alt="Timeline 01" />
    <img src="timeline-02.png" alt="Timeline 02" />
    <img src="timeline-03.png" alt="Timeline 03" />
    <img src="timeline-04.png" alt="Timeline 04" />
  </div>

  <script>
    const fonts = [
      "Sga Regular",
      "CursiveGalactic Regular",
      "Clypto Regular",
      "Courier"
    ];

    let currentFontIndex = 0;
    const titleElement = document.getElementById("title");

    function changeFont() {
      currentFontIndex = (currentFontIndex + 1) % fonts.length;
      const newFont = fonts[currentFontIndex];

      // Decide on a font-size based on the font
      // (e.g., make Courier smaller)
      if (newFont === "Courier") {
        titleElement.style.fontSize = "1.4em";
      } else {
        titleElement.style.fontSize = "2em";
      }

      titleElement.style.fontFamily = newFont;
    }

    // Switch font every 2.5 seconds
    setInterval(changeFont, 2500);
  </script>
</body>
</html>
ChatGPT
Thought about font switch glitch for 7 seconds
Font ���glitches���
often happen because browsers must reflow/repaint when the font changes. Here are
three
strategies to smooth the changes:
1) Fade Out, Switch Font, Fade In
Instead of directly switching the font, you can fade the heading out, change the font, then fade it back in. This hides the momentary flicker. For example:
css
Copiar c��digo
#title
{
margin
:
0
;
position
: absolute;
top
:
50%
;
left
:
0
;
width
:
100%
;
transform
:
translateY
(-
50%
);
text-align
: center;
/* Fade transition */
transition
: opacity
0.3s
ease;
}
.hidden
{
opacity
:
0
;
}
html
Copiar c��digo
<
script
>
const
fonts = [
"Sga Regular"
,
"CursiveGalactic Regular"
,
"Clypto Regular"
,
"Courier"
];
let
currentFontIndex =
0
;
const
titleElement =
document
.
getElementById
(
"title"
);
function
changeFont
(
) {
// Fade out first
titleElement.
classList
.
add
(
'hidden'
);
// Wait for the fade-out to finish (300ms), then switch font
setTimeout
(
() =>
{
      currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];
// Decide on a font-size (make Courier smaller, etc.)
if
(newFont ===
"Courier"
) {
        titleElement.
style
.
fontSize
=
"1.4em"
;
      }
else
{
        titleElement.
style
.
fontSize
=
"2em"
;
      }
      titleElement.
style
.
fontFamily
= newFont;
// Fade back in
titleElement.
classList
.
remove
(
'hidden'
);
    },
300
);
// match your CSS transition duration (0.3s)
}
// Switch font every 2.5 seconds
setInterval
(changeFont,
2500
);
</
script
>
Result:
The heading smoothly fades out, changes its font without a visible flash, then fades back in.
2) Preload Fonts (Ensures They���re Already Downloaded)
Another cause of flicker is the browser briefly swapping from one font to another if it���s not fully loaded. One way to mitigate this is to ���preload��� all custom fonts so they���re ready before usage. For example, in your
<head>
:
html
Copiar c��digo
<
link
rel
=
"preload"
href
=
"fonts/Sga-Regular.woff2"
as
=
"font"
type
=
"font/woff2"
crossorigin
>
<
link
rel
=
"preload"
href
=
"fonts/CursiveGalactic-Regular.g2n"
as
=
"font"
type
=
"font/woff2"
crossorigin
>
<!-- etc. for each font you might need -->
Also, consider adding
font-display: swap;
(or
font-display: optional;
) in your
@font-face
definitions. For example:
css
Copiar c��digo
@font-face
{
font-family
:
"Sga Regular"
;
src
:
url
(
"fonts/Sga-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Sga-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Sga-Regular.ttf"
)
format
(
"truetype"
);
font-display
: swap;
/* or block, fallback, etc. */
}
This helps control how the browser transitions between fonts if a custom font hasn���t finished downloading.
3) Use a
transform: scale()
Instead of Changing
font-size
When you change the
font-size
, the browser recalculates line-height, letter spacing, etc. That can cause a slight jump or glitch. Instead,
use a single font-size
in CSS and then apply
transform: scale(...)
to visually shrink Courier. For example:
css
Copiar c��digo
#title
{
margin
:
0
;
position
: absolute;
top
:
50%
;
left
:
0
;
width
:
100%
;
transform
:
translateY
(-
50%
);
text-align
: center;
font-size
:
2em
;
/* Always 2em so bounding box stays constant */
transition
: transform
0.3s
ease; 
}
js
Copiar c��digo
function
changeFont
(
) {
  titleElement.
classList
.
add
(
'hidden'
);
// fade out first, if desired
setTimeout
(
() =>
{
    currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];

    titleElement.
style
.
fontFamily
= newFont;
// Scale Courier to 0.7 for example
if
(newFont ===
"Courier"
) {
      titleElement.
style
.
transform
=
"translateY(-50%) scale(0.7)"
;
    }
else
{
      titleElement.
style
.
transform
=
"translateY(-50%) scale(1)"
;
    }

    titleElement.
classList
.
remove
(
'hidden'
);
// fade in
},
300
);
}
Here, the container (
#headingContainer
) stays the same size because you���re no longer re-computing
font-size
; you���re only transforming the text visually. That further reduces layout or reflow issues.
TL;DR
Fade Out/In
(Approach #1): Hide the font change behind a quick fade-out.
Preload Fonts
(Approach #2): Make sure all custom fonts are downloaded so they swap faster.
Scale Instead of Resize
(Approach #3): Keep a constant
font-size
and use
transform: scale(...)
to shrink Courier.
These techniques, alone or combined, significantly reduce or eliminate that momentary ���glitch��� you���re seeing.
o1
Dijiste:
Ok write it all out and make sure it's optimized for different browsers including mobile
ChatGPT
Thought about font switching solution for 6 seconds
Below is a
fully integrated
example that addresses several potential causes of ���font glitches.��� It includes:
Preloading
of custom fonts to ensure they���re downloaded before use.
A
fixed-height container
so the layout below doesn���t move.
A
fade out/in
effect when switching fonts, which hides flashes or ���glitches.���
A
scale transform
for Courier instead of changing the
font-size
, further reducing layout reflows.
Basic
responsive-friendly
structure for mobile devices.
You can adjust the numbers (heights, scale factors, timing) to your preference.
html
Copiar c��digo
<!DOCTYPE
html
>
<
html
lang
=
"en"
>
<
head
>
<
meta
charset
=
"UTF-8"
/>
<
title
>
Font Switching Demo
</
title
>
<
meta
name
=
"viewport"
content
=
"width=device-width, initial-scale=1.0"
/>
<!-- 1) Preload fonts so they're ready for immediate use -->
<
link
rel
=
"preload"
href
=
"fonts/Sga-Regular.woff2"
as
=
"font"
type
=
"font/woff2"
crossorigin
>
<
link
rel
=
"preload"
href
=
"fonts/CursiveGalactic-Regular.g2n"
as
=
"font"
type
=
"font/woff2"
crossorigin
>
<
link
rel
=
"preload"
href
=
"fonts/Clypto-Regular.woff2"
as
=
"font"
type
=
"font/woff2"
crossorigin
>
<
style
>
/* 2) Define custom fonts with font-display to control how they load */
@font-face
{
font-family
:
"Sga Regular"
;
src
:
url
(
"fonts/Sga-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Sga-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Sga-Regular.ttf"
)
format
(
"truetype"
);
font-display
: swap;
/* or block/fallback if preferred */
}
@font-face
{
font-family
:
"CursiveGalactic Regular"
;
src
:
url
(
"fonts/CursiveGalactic-Regular.g2n"
)
format
(
"opentype"
),
url
(
"fonts/CursiveGalactic-Regular.ttf"
)
format
(
"truetype"
);
font-display
: swap;
    }
@font-face
{
font-family
:
"Clypto Regular"
;
src
:
url
(
"fonts/Clypto-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Clypto-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Clypto-Regular.ttf"
)
format
(
"truetype"
);
font-display
: swap;
    }
/* Basic reset for mobile-friendly layout */
* {
box-sizing
: border-box;
margin
:
0
;
padding
:
0
;
    }
body
{
background-color
:
#f0f0f0
;
color
:
#333
;
font-family
: sans-serif;
/* Some padding on mobile */
padding
:
1rem
;
    }
/* 3) A fixed-height container for the heading,
          preventing layout jumps when fonts change. */
#headingContainer
{
height
:
3em
;
/* Adjust for tallest font at normal scale */
position
: relative;
margin-bottom
:
20px
;
background-color
:
#fff
;
/* example background */
border
:
1px
solid
#ccc
;
/* optional border */
overflow
: hidden;
/* in case text is slightly bigger */
}
/* 4) The heading is absolutely positioned; 
          we fade out/in when changing font. */
#title
{
margin
:
0
;
position
: absolute;
top
:
50%
;
left
:
0
;
width
:
100%
;
transform
:
translateY
(-
50%
)
scale
(
1
);
/* default scale = 1 */
text-align
: center;
/* Always the same font-size to keep bounding box consistent */
font-size
:
2em
;
/* Transition only opacity and transform, not layout-affecting properties */
transition
: opacity
0.3s
ease, transform
0.3s
ease;
opacity
:
1
;
    }
/* 5) A "hidden" class that fades out the heading */
.hidden
{
opacity
:
0
;
    }
/* Container for images in a column (responsive-friendly) */
.timeline-container
{
display
: flex;
flex-direction
: column;
align-items
: center;
gap
:
20px
;
max-width
:
90%
;
margin
:
0
auto;
/* center on wide screens */
}
.timeline-container
img
{
max-width
:
100%
;
height
: auto;
border
:
2px
solid
#ccc
;
background-color
:
#fff
;
    }
</
style
>
</
head
>
<
body
>
<
div
id
=
"headingContainer"
>
<
h1
id
=
"title"
>
Unpublished Facebook Posts
</
h1
>
</
div
>
<
div
class
=
"timeline-container"
>
<
img
src
=
"timeline-01.png"
alt
=
"Timeline 01"
/>
<
img
src
=
"timeline-02.png"
alt
=
"Timeline 02"
/>
<
img
src
=
"timeline-03.png"
alt
=
"Timeline 03"
/>
<
img
src
=
"timeline-04.png"
alt
=
"Timeline 04"
/>
</
div
>
<
script
>
// The fonts to cycle through
const
fonts = [
"Sga Regular"
,
"CursiveGalactic Regular"
,
"Clypto Regular"
,
"Courier"
// system font
];
let
currentFontIndex =
0
;
const
titleElement =
document
.
getElementById
(
"title"
);
// Switch the font, fade out, change, fade back in
function
changeFont
(
) {
// Fade out first
titleElement.
classList
.
add
(
'hidden'
);
// After fade-out completes (0.3s), change the font
setTimeout
(
() =>
{
        currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];
// Always use the same font-size in CSS, but scale Courier visually
// to avoid layout reflow from font-size changes.
titleElement.
style
.
fontFamily
= newFont;
if
(newFont ===
"Courier"
) {
// Scale down if you want Courier smaller
titleElement.
style
.
transform
=
"translateY(-50%) scale(0.8)"
;
        }
else
{
// Normal scale for other fonts
titleElement.
style
.
transform
=
"translateY(-50%) scale(1)"
;
        }
// Fade back in
titleElement.
classList
.
remove
(
'hidden'
);
      },
300
);
// match your fade-out duration
}
// Automatically switch font every 2.5 seconds
setInterval
(changeFont,
2500
);
</
script
>
</
body
>
</
html
>
How It Works
Preload
The
<link rel="preload">
tags ensure the custom fonts are fetched early. This helps avoid a flash-of-unstyled-text (FOUT) or glitch when the font first becomes active.
Fixed-height container
The
#headingContainer
has a set
height: 3em;
so the heading area does not expand or contract, preventing layout shifts for the images below.
Fade Out/In
We add/remove a
.hidden
class that sets
opacity: 0
to fade out.
After 300ms (the duration of the fade), we switch the font, then fade back in.
This masks the moment the browser swaps from one font to another.
Scale for Courier
Instead of changing the
font-size
property, which can cause reflow, we keep
font-size: 2em
for consistency.
We apply
transform: scale(0.8)
to visually shrink Courier while still retaining the same bounding box.
Other fonts revert to
scale(1)
.
Responsive
max-width: 90%
on the
.timeline-container
plus
margin: 0 auto;
helps images adapt to narrower screens.
meta name="viewport"
ensures the page scales properly on mobile devices.
With these steps, you have
minimal flicker
,
no layout shifting
, and a
smooth
, mobile-friendly experience. Adjust the numbers (timing, scale factor, container height, etc.) to taste.
o1
Dijiste:
ok it's almost perfect but it showed a strange font not from the original list. and I don't need a margin on the header i just set it to 0px
ChatGPT
Thought about font switching and layout fixes for 30 seconds
Below is an
updated
version of the code that removes the heading container���s margin (set to
0
) and takes a couple of steps to avoid unexpected or ���strange��� fallback fonts:
Ensures
only
the formats we need are listed (and in an order that most modern browsers will recognize).
Uses
font-display: swap;
plus
preload
to reduce flashes of unstyled or fallback text.
Keeps the
fade-out/fade-in
approach to hide any momentary glitch when switching fonts.
Uses
scale
(instead of changing
font-size
) for Courier, so the bounding box remains consistent.
Sets
#headingContainer { margin: 0; }
.
If you are still seeing a weird fallback font for
CursiveGalactic Regular
(or any other), ensure that the
.g2n
file is actually valid in your target browsers, or remove it if not needed. Some browsers may not recognize that extension. You can rely on
.woff2
or
.ttf
instead.
html
Copiar c��digo
<!DOCTYPE
html
>
<
html
lang
=
"en"
>
<
head
>
<
meta
charset
=
"UTF-8"
>
<
title
>
Font Switching Demo
</
title
>
<
meta
name
=
"viewport"
content
=
"width=device-width, initial-scale=1.0"
>
<!-- Preload fonts so they're ready when used -->
<
link
rel
=
"preload"
href
=
"fonts/Sga-Regular.woff2"
as
=
"font"
type
=
"font/woff2"
crossorigin
>
<
link
rel
=
"preload"
href
=
"fonts/CursiveGalactic-Regular.ttf"
as
=
"font"
type
=
"font/ttf"
crossorigin
>
<
link
rel
=
"preload"
href
=
"fonts/Clypto-Regular.woff2"
as
=
"font"
type
=
"font/woff2"
crossorigin
>
<
style
>
/* 1) Define custom fonts. 
       - Use file formats that your target browsers recognize.
       - font-display: swap helps reduce flashes of fallback text.
    */
@font-face
{
font-family
:
"Sga Regular"
;
src
:
url
(
"fonts/Sga-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Sga-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Sga-Regular.ttf"
)
format
(
"truetype"
);
font-display
: swap;
    }
@font-face
{
font-family
:
"CursiveGalactic Regular"
;
/* If .g2n is not recognized by some browsers, you can remove it
         or keep it second. The important recognized format is .ttf or .woff2 */
src
:
url
(
"fonts/CursiveGalactic-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/CursiveGalactic-Regular.ttf"
)
format
(
"truetype"
);
/* If your .g2n is truly needed, include it, but many browsers may ignore it:
           url("fonts/CursiveGalactic-Regular.g2n") format("opentype"),
      */
font-display
: swap;
    }
@font-face
{
font-family
:
"Clypto Regular"
;
src
:
url
(
"fonts/Clypto-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Clypto-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Clypto-Regular.ttf"
)
format
(
"truetype"
);
font-display
: swap;
    }
/* Basic reset / mobile-friendly setup */
* {
box-sizing
: border-box;
margin
:
0
;
padding
:
0
;
    }
body
{
background-color
:
#f0f0f0
;
color
:
#333
;
font-family
: sans-serif;
padding
:
1rem
;
/* on small screens, some breathing room */
}
/* 2) Heading container with NO margin */
#headingContainer
{
margin
:
0
;
/* removed margin per your request */
height
:
3em
;
/* big enough for your largest font */
position
: relative;
background-color
:
#fff
;
border
:
1px
solid
#ccc
;
/* optional, remove if unwanted */
overflow
: hidden;
/* in case scaled text is large */
}
/* Absolutely-positioned heading with fade out/in */
#title
{
margin
:
0
;
position
: absolute;
top
:
50%
;
left
:
0
;
width
:
100%
;
transform
:
translateY
(-
50%
)
scale
(
1
);
/* default scale = 1 */
text-align
: center;
/* Keep font-size consistent (2em), use scale to shrink Courier. */
font-size
:
2em
;
/* Fade animation on opacity & transform only */
transition
: opacity
0.3s
ease, transform
0.3s
ease;
opacity
:
1
;
    }
/* Hidden class fades the heading out */
.hidden
{
opacity
:
0
;
    }
/* Images in a responsive column layout */
.timeline-container
{
display
: flex;
flex-direction
: column;
align-items
: center;
gap
:
20px
;
max-width
:
90%
;
margin
:
0
auto;
/* center on larger screens */
}
.timeline-container
img
{
max-width
:
100%
;
height
: auto;
border
:
2px
solid
#ccc
;
background-color
:
#fff
;
    }
</
style
>
</
head
>
<
body
>
<
div
id
=
"headingContainer"
>
<
h1
id
=
"title"
>
Unpublished Facebook Posts
</
h1
>
</
div
>
<
div
class
=
"timeline-container"
>
<
img
src
=
"timeline-01.png"
alt
=
"Timeline 01"
>
<
img
src
=
"timeline-02.png"
alt
=
"Timeline 02"
>
<
img
src
=
"timeline-03.png"
alt
=
"Timeline 03"
>
<
img
src
=
"timeline-04.png"
alt
=
"Timeline 04"
>
</
div
>
<
script
>
// Fonts to rotate through
const
fonts = [
"Sga Regular"
,
"CursiveGalactic Regular"
,
"Clypto Regular"
,
"Courier"
// system font
];
let
currentFontIndex =
0
;
const
titleElement =
document
.
getElementById
(
"title"
);
function
changeFont
(
) {
// Fade out
titleElement.
classList
.
add
(
"hidden"
);
// After the fade-out (0.3s), switch the font
setTimeout
(
() =>
{
        currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];
// Apply the new font
titleElement.
style
.
fontFamily
= newFont;
// Scale down for Courier so it's smaller visually
if
(newFont ===
"Courier"
) {
          titleElement.
style
.
transform
=
"translateY(-50%) scale(0.8)"
;
        }
else
{
          titleElement.
style
.
transform
=
"translateY(-50%) scale(1)"
;
        }
// Fade back in
titleElement.
classList
.
remove
(
"hidden"
);
      },
300
);
    }
// Switch fonts every 2.5 seconds
setInterval
(changeFont,
2500
);
</
script
>
</
body
>
</
html
>
Tips to Avoid Seeing a ���Strange��� Font
Verify File Paths & Formats
Make sure your
.woff2
,
.woff
, or
.ttf
files exist at the correct file paths (
fonts/xxx
).
Remove Unrecognized Formats
If
.g2n
is not widely recognized by the browsers you support, remove or place it after
.woff2
/
.ttf
. That way, the browser picks a known format first.
Preload &
font-display: swap;
Preloading speeds up font availability.
font-display: swap;
ensures that if the font isn���t instantly loaded, the browser briefly displays a fallback, then swaps to the custom font.
If the swap is too noticeable or you prefer waiting for the custom font, you can use
font-display: block;
.
Avoid Extra Fallbacks
If you only want the custom fonts plus Courier, specify them explicitly. For instance,
titleElement.style.fontFamily = "Sga Regular";
with no appended fallback. That way, if it fails to load, the browser will ultimately use its default, but you won���t see other custom fallback fonts.
Following these steps should ensure minimal or no time displaying a ���strange��� or unintended font, and your heading will remain stable (no layout shifting, no margins). Enjoy!
o1
Dijiste:
The fonts were displaying correctly here: it was starting in SGA like I wanted: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Font Switching Demo</title>
  <style>
    /* We���ll use a "headingContainer" div to lock in the height. */
    #headingContainer {
      /* Adjust to comfortably fit the tallest font at its biggest size. */
      height: 3em;
      position: relative; /* for absolute positioning of the H1 */
      margin-bottom: 20px; /* space below heading container */
      background-color: #f0f0f0;
      border: 1px solid #ccc;
    }

    #title {
      margin: 0;
      position: absolute;
      top: 50%;
      left: 0;
      width: 100%;
      /* Shift up by 50% of its own height to vertically center: */
      transform: translateY(-50%);
      text-align: center;

      /* Keep transitions simple or remove them: */
      transition: none;
      /* Or, if you want to fade color: transition: color 0.3s ease; */
    }

    /* Example images layout */
    .timeline-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
    }

    .timeline-container img {
      max-width: 80%;
      border: 2px solid #ccc;
    }

    /* Example font-face rules (customize to your fonts folder) */
    @font-face {
      font-family: "Sga Regular";
      src: url("fonts/Sga-Regular.woff2") format("woff2"),
           url("fonts/Sga-Regular.woff")  format("woff"),
           url("fonts/Sga-Regular.ttf")   format("truetype");
    }
    @font-face {
      font-family: "CursiveGalactic Regular";
      src: url("fonts/CursiveGalactic-Regular.g2n") format("opentype"),
           url("fonts/CursiveGalactic-Regular.ttf") format("truetype");
    }
    @font-face {
      font-family: "Clypto Regular";
      src: url("fonts/Clypto-Regular.woff2") format("woff2"),
           url("fonts/Clypto-Regular.woff")  format("woff"),
           url("fonts/Clypto-Regular.ttf")   format("truetype");
    }
  </style>
</head>
<body>

  <div id="headingContainer">
    <h1 id="title">Unpublished Facebook Posts</h1>
  </div>

  <div class="timeline-container">
    <img src="timeline-01.png" alt="Timeline 01" />
    <img src="timeline-02.png" alt="Timeline 02" />
    <img src="timeline-03.png" alt="Timeline 03" />
    <img src="timeline-04.png" alt="Timeline 04" />
  </div>

  <script>
    const fonts = [
      "Sga Regular",
      "CursiveGalactic Regular",
      "Clypto Regular",
      "Courier"
    ];

    let currentFontIndex = 0;
    const titleElement = document.getElementById("title");

    function changeFont() {
      currentFontIndex = (currentFontIndex + 1) % fonts.length;
      const newFont = fonts[currentFontIndex];

      // Decide on a font-size based on the font
      // (e.g., make Courier smaller)
      if (newFont === "Courier") {
        titleElement.style.fontSize = "1.4em";
      } else {
        titleElement.style.fontSize = "2em";
      }

      titleElement.style.fontFamily = newFont;
    }

    // Switch font every 2.5 seconds
    setInterval(changeFont, 2500);
  </script>
</body>
</html>
ChatGPT
Thought about font switching and layout for 5 seconds
It looks like this code already does exactly what you described:
Starts
with
"Sga Regular"
(because
currentFontIndex = 0
and
fonts[0] = "Sga Regular"
).
Cycles
every 2.5 seconds through
["Sga Regular", "CursiveGalactic Regular", "Clypto Regular", "Courier"]
.
Changes font-size
if the font is
"Courier"
(making it 1.4em, otherwise 2em).
Below are just a few
optional
refinements/notes you can consider, but if you���re happy with how it currently works, you can leave it exactly as it is.
1) Fixing the Heading Height (Optional)
If you notice the images jumping when switching to Courier (due to the smaller 1.4em font-size), you could
fix
(or at least
min-height
) the heading so the page layout stays stable. For instance:
css
Copiar c��digo
#title
{
/* maintain the same space even if the text gets smaller */
height
:
1em
;
/* or 2em, etc., depending on your biggest size */
line-height
:
1em
;
/* match the height to keep it centered */
overflow
: hidden;
/* hide anything if needed */
...
}
But if it���s
already stable
(thanks to the
#headingContainer { height: 3em; }
), you���re good.
2) Removing the ���Glitch��� or ���Flash��� (Optional)
Some browsers might show a slight flash when a new font is applied. You can soften it by using a quick fade-out/in:
css
Copiar c��digo
#title
{
transition
: opacity
0.2s
ease;
}
.hidden
{
opacity
:
0
;
}
js
Copiar c��digo
function
changeFont
(
) {
  titleElement.
classList
.
add
(
"hidden"
);
setTimeout
(
() =>
{
    currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];

    titleElement.
style
.
fontFamily
= newFont;
    titleElement.
style
.
fontSize
= (newFont ===
"Courier"
) ?
"1.4em"
:
"2em"
;
// Fade back in
titleElement.
classList
.
remove
(
"hidden"
);
  },
200
);
}
3) Preload Fonts (Optional)
If you want to ensure each font is fully downloaded before first use, you can
preload
them in the
<head>
:
html
Copiar c��digo
<
link
rel
=
"preload"
href
=
"fonts/Sga-Regular.woff2"
as
=
"font"
type
=
"font/woff2"
crossorigin
>
<
link
rel
=
"preload"
href
=
"fonts/CursiveGalactic-Regular.ttf"
as
=
"font"
type
=
"font/ttf"
crossorigin
>
<
link
rel
=
"preload"
href
=
"fonts/Clypto-Regular.woff2"
as
=
"font"
type
=
"font/woff2"
crossorigin
>
That can reduce any flash-of-unstyled-text. But if everything is loading quickly for you already, this step is optional.
Final Thoughts
If you���re happy
with how it currently works,
no changes are necessary
.
To
avoid layout jumps
, keep the heading area fixed in height.
To
avoid font flashes
, use a fade-out/in or preload.
Otherwise, your example code is already starting in
Sga Regular
and cycling as intended!
o1
Dijiste:
Write it out fully I named it Unpublished Facebook Posts not Font switching demo
ChatGPT
Thought for 34 seconds
Below is a
complete
HTML file named
unpublished-facebook-posts.html
(or simply
index.html
) that:
Starts
with
Sga Regular
(because that���s first in the
fonts
array).
Cycles
every 2.5 seconds through:
Sga Regular
,
CursiveGalactic Regular
,
Clypto Regular
,
Courier
.
Makes Courier
appear slightly smaller (
font-size: 1.4em
), while the others stay at
2em
.
Uses a heading container of
fixed height (3em)
so the images below do
not
jump when fonts change.
Feel free to rename or adjust any of the files (
.woff2
,
.woff
,
.ttf
,
.g2n
) to match exactly what you have in your
fonts
folder.
html
Copiar c��digo
<!DOCTYPE
html
>
<
html
lang
=
"en"
>
<
head
>
<
meta
charset
=
"UTF-8"
/>
<
title
>
Unpublished Facebook Posts
</
title
>
<
meta
name
=
"viewport"
content
=
"width=device-width, initial-scale=1.0"
/>
<!-- Optional: Preload your fonts for faster switching (remove if not needed)
  <link rel="preload" href="fonts/Sga-Regular.woff2" as="font" type="font/woff2" crossorigin>
  <link rel="preload" href="fonts/CursiveGalactic-Regular.ttf" as="font" type="font/ttf" crossorigin>
  <link rel="preload" href="fonts/Clypto-Regular.woff2" as="font" type="font/woff2" crossorigin>
  -->
<
style
>
/* 1) Define custom fonts */
@font-face
{
font-family
:
"Sga Regular"
;
src
:
url
(
"fonts/Sga-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Sga-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Sga-Regular.ttf"
)
format
(
"truetype"
);
/* font-display: swap;  (optional) */
}
@font-face
{
font-family
:
"CursiveGalactic Regular"
;
/* If .g2n is recognized by your target browsers, include it:
         url("fonts/CursiveGalactic-Regular.g2n") format("opentype"), 
         otherwise rely on .woff2 / .ttf
      */
src
:
url
(
"fonts/CursiveGalactic-Regular.ttf"
)
format
(
"truetype"
);
/* font-display: swap; */
}
@font-face
{
font-family
:
"Clypto Regular"
;
src
:
url
(
"fonts/Clypto-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Clypto-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Clypto-Regular.ttf"
)
format
(
"truetype"
);
/* font-display: swap; */
}
/* 2) Reset / responsive-friendly setup */
* {
margin
:
0
;
padding
:
0
;
box-sizing
: border-box;
    }
body
{
background-color
:
#f0f0f0
;
color
:
#333
;
font-family
: sans-serif;
padding
:
1rem
;
    }
/* 3) A fixed-height container for the heading */
#headingContainer
{
margin
:
0
;
height
:
3em
;
/* enough space for largest font */
position
: relative;
background-color
:
#f0f0f0
;
border
:
1px
solid
#ccc
;
/* optional border */
overflow
: hidden;
/* in case fonts get bigger */
margin-bottom
:
20px
;
    }
/* 4) The heading itself */
#title
{
margin
:
0
;
position
: absolute;
top
:
50%
;
left
:
0
;
width
:
100%
;
transform
:
translateY
(-
50%
);
text-align
: center;
/* Default: 2em for SGA, CursiveGalactic, Clypto */
font-size
:
2em
;
/* No layout-affecting transitions to minimize "glitches" */
transition
: none;
    }
/* 5) A simple column layout for images */
.timeline-container
{
display
: flex;
flex-direction
: column;
align-items
: center;
gap
:
20px
;
max-width
:
90%
;
margin
:
0
auto;
/* center for larger screens */
}
.timeline-container
img
{
max-width
:
100%
;
height
: auto;
border
:
2px
solid
#ccc
;
background-color
:
#fff
;
    }
</
style
>
</
head
>
<
body
>
<
div
id
=
"headingContainer"
>
<
h1
id
=
"title"
>
Unpublished Facebook Posts
</
h1
>
</
div
>
<
div
class
=
"timeline-container"
>
<
img
src
=
"timeline-01.png"
alt
=
"Timeline 01"
/>
<
img
src
=
"timeline-02.png"
alt
=
"Timeline 02"
/>
<
img
src
=
"timeline-03.png"
alt
=
"Timeline 03"
/>
<
img
src
=
"timeline-04.png"
alt
=
"Timeline 04"
/>
</
div
>
<
script
>
// Fonts to cycle through (starting with Sga Regular at index 0)
const
fonts = [
"Sga Regular"
,
"CursiveGalactic Regular"
,
"Clypto Regular"
,
"Courier"
// system font
];
let
currentFontIndex =
0
;
const
titleElement =
document
.
getElementById
(
"title"
);
function
changeFont
(
) {
// Move to next font in array
currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];
// If Courier, make it slightly smaller; else, 2em
if
(newFont ===
"Courier"
) {
        titleElement.
style
.
fontSize
=
"1.4em"
;
      }
else
{
        titleElement.
style
.
fontSize
=
"2em"
;
      }
// Apply the new font family
titleElement.
style
.
fontFamily
= newFont;
    }
// Switch fonts every 2.5 seconds
setInterval
(changeFont,
2500
);
</
script
>
</
body
>
</
html
>
How It Works
Initial Font:
The array
fonts[0] = "Sga Regular"
, so it starts in
Sga
.
Every 2.5s:
Calls
changeFont()
, moving to the next font (
CursiveGalactic
, then
Clypto
, then
Courier
, and loops).
Courier Size:
We reduce the size to
1.4em
for Courier; all others remain at
2em
.
Fixed Heading Height:
Thanks to
#headingContainer { height: 3em; }
, switching fonts doesn���t push the images around.
Adjust any font paths, scaling factor (
scale
or
font-size
), or container height to fit your setup. This final code will give you a stable page titled "
Unpublished Facebook Posts
" that cycles among four fonts every 2.5 seconds. Enjoy!
o1
Dijiste:
Ok i don't know why it isn't working. this one doesn't even work any more although I thought it did earlier. Just go back to an earlier version: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Font Switching Demo</title>
  <style>
    /* We���ll use a "headingContainer" div to lock in the height. */
    #headingContainer {
      /* Adjust to comfortably fit the tallest font at its biggest size. */
      height: 3em;
      position: relative; /* for absolute positioning of the H1 */
      margin-bottom: 20px; /* space below heading container */
      background-color: #f0f0f0;
      border: 0px solid #ccc;
    }

    #title {
      margin: 0;
      position: absolute;
      top: 50%;
      left: 0;
      width: 100%;
      /* Shift up by 50% of its own height to vertically center: */
      transform: translateY(-50%);
      text-align: center;

      /* Keep transitions simple or remove them: */
      transition: none;
      /* Or, if you want to fade color: transition: color 0.3s ease; */
    }

    /* Example images layout */
    .timeline-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
    }

    .timeline-container img {
      max-width: 80%;
      border: 2px solid #ccc;
    }

    /* Example font-face rules (customize to your fonts folder) */
    @font-face {
      font-family: "Sga Regular";
      src: url("fonts/Sga-Regular.woff2") format("woff2"),
           url("fonts/Sga-Regular.woff")  format("woff"),
           url("fonts/Sga-Regular.ttf")   format("truetype");
    }
    @font-face {
      font-family: "CursiveGalactic Regular";
      src: url("fonts/CursiveGalactic-Regular.g2n") format("opentype"),
           url("fonts/CursiveGalactic-Regular.ttf") format("truetype");
    }
    @font-face {
      font-family: "Clypto Regular";
      src: url("fonts/Clypto-Regular.woff2") format("woff2"),
           url("fonts/Clypto-Regular.woff")  format("woff"),
           url("fonts/Clypto-Regular.ttf")   format("truetype");
    }
  </style>
</head>
<body>

  <div id="headingContainer">
    <h1 id="title">Unpublished Facebook Posts</h1>
  </div>

  <div class="timeline-container">
    <img src="timeline-01.png" alt="Timeline 01" />
    <img src="timeline-02.png" alt="Timeline 02" />
    <img src="timeline-03.png" alt="Timeline 03" />
    <img src="timeline-04.png" alt="Timeline 04" />
  </div>

  <script>
    const fonts = [
      "Sga Regular",
      "CursiveGalactic Regular",
      "Clypto Regular",
      "Courier"
    ];

    let currentFontIndex = 0;
    const titleElement = document.getElementById("title");

    function changeFont() {
      currentFontIndex = (currentFontIndex + 1) % fonts.length;
      const newFont = fonts[currentFontIndex];

      // Decide on a font-size based on the font
      // (e.g., make Courier smaller)
      if (newFont === "Courier") {
        titleElement.style.fontSize = "1.4em";
      } else {
        titleElement.style.fontSize = "2em";
      }

      titleElement.style.fontFamily = newFont;
    }

    // Switch font every 2.5 seconds
    setInterval(changeFont, 2500);
  </script>
</body>
</html>
ChatGPT
Thought about font switching logic for 10 seconds
Below is the
exact
earlier version you provided���nothing changed except for the title in the
<head>
from
"Font Switching Demo"
to
"Unpublished Facebook Posts"
. Everything else is
unchanged
, so if the fonts are in the correct folder, it should work as before.
unpublished-facebook-posts.html
html
Copiar c��digo
<!DOCTYPE
html
>
<
html
lang
=
"en"
>
<
head
>
<
meta
charset
=
"UTF-8"
/>
<
title
>
Unpublished Facebook Posts
</
title
>
<
style
>
/* We���ll use a "headingContainer" div to lock in the height. */
#headingContainer
{
/* Adjust to comfortably fit the tallest font at its biggest size. */
height
:
3em
;
position
: relative;
/* for absolute positioning of the H1 */
margin-bottom
:
20px
;
/* space below heading container */
background-color
:
#f0f0f0
;
border
:
0px
solid
#ccc
;
    }
#title
{
margin
:
0
;
position
: absolute;
top
:
50%
;
left
:
0
;
width
:
100%
;
/* Shift up by 50% of its own height to vertically center: */
transform
:
translateY
(-
50%
);
text-align
: center;
/* Keep transitions simple or remove them: */
transition
: none;
/* Or, if you want to fade color: transition: color 0.3s ease; */
}
/* Example images layout */
.timeline-container
{
display
: flex;
flex-direction
: column;
align-items
: center;
gap
:
20px
;
    }
.timeline-container
img
{
max-width
:
80%
;
border
:
2px
solid
#ccc
;
    }
/* Example font-face rules (customize to your fonts folder) */
@font-face
{
font-family
:
"Sga Regular"
;
src
:
url
(
"fonts/Sga-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Sga-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Sga-Regular.ttf"
)
format
(
"truetype"
);
    }
@font-face
{
font-family
:
"CursiveGalactic Regular"
;
src
:
url
(
"fonts/CursiveGalactic-Regular.g2n"
)
format
(
"opentype"
),
url
(
"fonts/CursiveGalactic-Regular.ttf"
)
format
(
"truetype"
);
    }
@font-face
{
font-family
:
"Clypto Regular"
;
src
:
url
(
"fonts/Clypto-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Clypto-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Clypto-Regular.ttf"
)
format
(
"truetype"
);
    }
</
style
>
</
head
>
<
body
>
<
div
id
=
"headingContainer"
>
<
h1
id
=
"title"
>
Unpublished Facebook Posts
</
h1
>
</
div
>
<
div
class
=
"timeline-container"
>
<
img
src
=
"timeline-01.png"
alt
=
"Timeline 01"
/>
<
img
src
=
"timeline-02.png"
alt
=
"Timeline 02"
/>
<
img
src
=
"timeline-03.png"
alt
=
"Timeline 03"
/>
<
img
src
=
"timeline-04.png"
alt
=
"Timeline 04"
/>
</
div
>
<
script
>
const
fonts = [
"Sga Regular"
,
"CursiveGalactic Regular"
,
"Clypto Regular"
,
"Courier"
];
let
currentFontIndex =
0
;
const
titleElement =
document
.
getElementById
(
"title"
);
function
changeFont
(
) {
      currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];
// Decide on a font-size based on the font
// (e.g., make Courier smaller)
if
(newFont ===
"Courier"
) {
        titleElement.
style
.
fontSize
=
"1.4em"
;
      }
else
{
        titleElement.
style
.
fontSize
=
"2em"
;
      }

      titleElement.
style
.
fontFamily
= newFont;
    }
// Switch font every 2.5 seconds
setInterval
(changeFont,
2500
);
</
script
>
</
body
>
</
html
>
If it still won���t work
Check console errors
:
Open the Developer Tools (F12 in most browsers).
Look for red error messages (e.g., ���Failed to load resource: the server responded with a status of 404���).
This might mean the
.woff2
,
.woff
, or
.ttf
files aren���t found in
fonts/
or the filenames don���t match exactly.
Verify folder structure
:
The page expects
fonts/Sga-Regular.woff2
,
fonts/Sga-Regular.woff
, etc.
Make sure your folder is literally named
fonts
(all lowercase), and the font files are placed there.
Double-check file names
:
If your file is actually named
Sga-Regular.woff2
(with a capital ���R��� or different spelling), the paths must match exactly in the
@font-face
.
Same for
CursiveGalactic-Regular.g2n
or
Clypto-Regular.ttf
.
Try removing
.g2n
if unsupported
:
If you see an error about
CursiveGalactic-Regular.g2n
, comment it out or remove it���some browsers may not handle
.g2n
.
Local server
:
Open the page from an actual HTTP server rather than a local file path (
file:///
). Some browsers block or behave differently for local font loading.
For a quick test, you can run a simple local server, for example:
python3 -m http.server 8000
then navigate to
http://localhost:8000/yourFile.html
.
By following these steps, you can usually pinpoint why the fonts aren���t showing. But the
HTML
above is the original version���no extra changes���so if the fonts are in place, it should display
Sga Regular
first and cycle every 2.5 seconds through the four fonts.
o1
Dijiste:
ok i like it but the image has a background color of #1C1C1D so can I get the page in dark mode with the text inverted and have this color show up instead of white as the background? and maybe a note in a comment saying that the font glitches a little at the end of the loop and that hopefully it will be fixed later
ChatGPT
Thought for 7 seconds
Below is the
dark mode
version of the same code. The page background is now
#1C1C1D
, the text is white, and we���ve inverted any borders or elements to match the dark theme. There���s also a quick comment noting the
font glitch
at the end of the loop that you hope to fix later.
html
Copiar c��digo
<!DOCTYPE
html
>
<
html
lang
=
"en"
>
<
head
>
<
meta
charset
=
"UTF-8"
/>
<
title
>
Unpublished Facebook Posts
</
title
>
<
style
>
/* Dark mode background and text colors */
body
{
background-color
:
#1C1C1D
;
/* Dark background */
color
:
#FFFFFF
;
/* White text */
margin
:
0
;
padding
:
1rem
;
font-family
: sans-serif;
    }
/* A container to lock in the heading height */
#headingContainer
{
height
:
3em
;
position
: relative;
margin-bottom
:
20px
;
background-color
:
#1C1C1D
;
/* Match the body color */
/* No border or set it to something visible in dark mode if desired */
border
:
0px
solid
#ccc
;
overflow
: hidden;
/* Just in case the text is large */
}
/* Absolutely positioning the title in the middle */
#title
{
margin
:
0
;
position
: absolute;
top
:
50%
;
left
:
0
;
width
:
100%
;
transform
:
translateY
(-
50%
);
text-align
: center;
color
:
#FFFFFF
;
/* White heading text */
transition
: none;
/* Keep transitions simple or remove them entirely */
}
/* Display images in a column, centered */
.timeline-container
{
display
: flex;
flex-direction
: column;
align-items
: center;
gap
:
20px
;
max-width
:
80%
;
margin
:
0
auto;
    }
.timeline-container
img
{
max-width
:
100%
;
border
:
2px
solid
#FFFFFF
;
/* White border for contrast */
background-color
:
#1C1C1D
;
/* Matches the page background */
}
/* Font-face rules (customize to your fonts folder) */
@font-face
{
font-family
:
"Sga Regular"
;
src
:
url
(
"fonts/Sga-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Sga-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Sga-Regular.ttf"
)
format
(
"truetype"
);
    }
@font-face
{
font-family
:
"CursiveGalactic Regular"
;
src
:
url
(
"fonts/CursiveGalactic-Regular.g2n"
)
format
(
"opentype"
),
url
(
"fonts/CursiveGalactic-Regular.ttf"
)
format
(
"truetype"
);
    }
@font-face
{
font-family
:
"Clypto Regular"
;
src
:
url
(
"fonts/Clypto-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Clypto-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Clypto-Regular.ttf"
)
format
(
"truetype"
);
    }
</
style
>
</
head
>
<
body
>
<
div
id
=
"headingContainer"
>
<
h1
id
=
"title"
>
Unpublished Facebook Posts
</
h1
>
</
div
>
<
div
class
=
"timeline-container"
>
<
img
src
=
"timeline-01.png"
alt
=
"Timeline 01"
/>
<
img
src
=
"timeline-02.png"
alt
=
"Timeline 02"
/>
<
img
src
=
"timeline-03.png"
alt
=
"Timeline 03"
/>
<
img
src
=
"timeline-04.png"
alt
=
"Timeline 04"
/>
</
div
>
<
script
>
//
NOTE:
There's a minor font "glitch" at the end of the loop.
// Hopefully we can fix it in a future version.
const
fonts = [
"Sga Regular"
,
"CursiveGalactic Regular"
,
"Clypto Regular"
,
"Courier"
];
let
currentFontIndex =
0
;
const
titleElement =
document
.
getElementById
(
"title"
);
function
changeFont
(
) {
      currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];
// If it's Courier, reduce the size slightly
if
(newFont ===
"Courier"
) {
        titleElement.
style
.
fontSize
=
"1.4em"
;
      }
else
{
        titleElement.
style
.
fontSize
=
"2em"
;
      }

      titleElement.
style
.
fontFamily
= newFont;
    }
// Switch font every 2.5 seconds
setInterval
(changeFont,
2500
);
</
script
>
</
body
>
</
html
>
Changes Explained
Dark Background
: Both
<body>
and
#headingContainer
now use
#1C1C1D
.
White Text
:
color: #FFFFFF;
is applied to
body
and
#title
.
White Borders
: The images have a
2px solid #FFFFFF
border for visibility against the dark background.
Glitch Note
: A comment in the
<script>
acknowledges the
font glitch
near the end of the loop.
This ensures a dark theme and highlights the images against the dark background, with the heading text in white.
o1
Dijiste:
no we don't need to invert borders, just set the background color and text color. it seemed to break things, remember the font was working here: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Unpublished Facebook Posts</title>
  <style>
    /* We���ll use a "headingContainer" div to lock in the height. */
    #headingContainer {
      /* Adjust to comfortably fit the tallest font at its biggest size. */
      height: 3em;
      position: relative; /* for absolute positioning of the H1 */
      margin-bottom: 20px; /* space below heading container */
      background-color: #f0f0f0;
      border: 0px solid #ccc;
    }

    #title {
      margin: 0;
      position: absolute;
      top: 50%;
      left: 0;
      width: 100%;
      /* Shift up by 50% of its own height to vertically center: */
      transform: translateY(-50%);
      text-align: center;

      /* Keep transitions simple or remove them: */
      transition: none;
      /* Or, if you want to fade color: transition: color 0.3s ease; */
    }

    /* Example images layout */
    .timeline-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
    }

    .timeline-container img {
      max-width: 80%;
      border: 2px solid #ccc;
    }

    /* Example font-face rules (customize to your fonts folder) */
    @font-face {
      font-family: "Sga Regular";
      src: url("fonts/Sga-Regular.woff2") format("woff2"),
           url("fonts/Sga-Regular.woff")  format("woff"),
           url("fonts/Sga-Regular.ttf")   format("truetype");
    }
    @font-face {
      font-family: "CursiveGalactic Regular";
      src: url("fonts/CursiveGalactic-Regular.g2n") format("opentype"),
           url("fonts/CursiveGalactic-Regular.ttf") format("truetype");
    }
    @font-face {
      font-family: "Clypto Regular";
      src: url("fonts/Clypto-Regular.woff2") format("woff2"),
           url("fonts/Clypto-Regular.woff")  format("woff"),
           url("fonts/Clypto-Regular.ttf")   format("truetype");
    }
  </style>
</head>
<body>

  <div id="headingContainer">
    <h1 id="title">Unpublished Facebook Posts</h1>
  </div>

  <div class="timeline-container">
    <img src="timeline-01.png" alt="Timeline 01" />
    <img src="timeline-02.png" alt="Timeline 02" />
    <img src="timeline-03.png" alt="Timeline 03" />
    <img src="timeline-04.png" alt="Timeline 04" />
  </div>

  <script>
    const fonts = [
      "Sga Regular",
      "CursiveGalactic Regular",
      "Clypto Regular",
      "Courier"
    ];

    let currentFontIndex = 0;
    const titleElement = document.getElementById("title");

    function changeFont() {
      currentFontIndex = (currentFontIndex + 1) % fonts.length;
      const newFont = fonts[currentFontIndex];

      // Decide on a font-size based on the font
      // (e.g., make Courier smaller)
      if (newFont === "Courier") {
        titleElement.style.fontSize = "1.4em";
      } else {
        titleElement.style.fontSize = "2em";
      }

      titleElement.style.fontFamily = newFont;
    }

    // Switch font every 2.5 seconds
    setInterval(changeFont, 2500);
  </script>
</body>
</html>
ChatGPT
dark mode
Below is the
same code
you provided, except:
The
page
(and heading container) background is now
#1C1C1D
(dark mode).
The
text
is white (
color: #FFF
).
Everything else (like borders, font setup, etc.) remains
unchanged
from your original snippet.
We���ve added a
comment
noting the
minor font glitch
at the end of the loop.
html
Copiar c��digo
<!DOCTYPE
html
>
<
html
lang
=
"en"
>
<
head
>
<
meta
charset
=
"UTF-8"
/>
<
title
>
Unpublished Facebook Posts
</
title
>
<
style
>
/* Dark background, white text, keep everything else the same */
body
{
background-color
:
#1C1C1D
;
color
:
#FFF
;
margin
:
0
;
padding
:
1rem
;
font-family
: sans-serif;
    }
/* We���ll use a "headingContainer" div to lock in the height. */
#headingContainer
{
/* Adjust to comfortably fit the tallest font at its biggest size. */
height
:
3em
;
position
: relative;
/* for absolute positioning of the H1 */
margin-bottom
:
20px
;
/* space below heading container */
background-color
:
#1C1C1D
;
/* match body background in dark mode */
border
:
0px
solid
#ccc
;
    }
#title
{
margin
:
0
;
position
: absolute;
top
:
50%
;
left
:
0
;
width
:
100%
;
/* Shift up by 50% of its own height to vertically center: */
transform
:
translateY
(-
50%
);
text-align
: center;
/* White text for dark mode */
color
:
#FFF
;
/* Keep transitions simple or remove them: */
transition
: none;
/* Or, if you want to fade color: transition: color 0.3s ease; */
}
/* Example images layout */
.timeline-container
{
display
: flex;
flex-direction
: column;
align-items
: center;
gap
:
20px
;
    }
.timeline-container
img
{
max-width
:
80%
;
border
:
2px
solid
#ccc
;
/* Keep the same border color (#ccc) */
}
/* Example font-face rules (customize to your fonts folder) */
@font-face
{
font-family
:
"Sga Regular"
;
src
:
url
(
"fonts/Sga-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Sga-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Sga-Regular.ttf"
)
format
(
"truetype"
);
    }
@font-face
{
font-family
:
"CursiveGalactic Regular"
;
src
:
url
(
"fonts/CursiveGalactic-Regular.g2n"
)
format
(
"opentype"
),
url
(
"fonts/CursiveGalactic-Regular.ttf"
)
format
(
"truetype"
);
    }
@font-face
{
font-family
:
"Clypto Regular"
;
src
:
url
(
"fonts/Clypto-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Clypto-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Clypto-Regular.ttf"
)
format
(
"truetype"
);
    }
</
style
>
</
head
>
<
body
>
<
div
id
=
"headingContainer"
>
<
h1
id
=
"title"
>
Unpublished Facebook Posts
</
h1
>
</
div
>
<
div
class
=
"timeline-container"
>
<
img
src
=
"timeline-01.png"
alt
=
"Timeline 01"
/>
<
img
src
=
"timeline-02.png"
alt
=
"Timeline 02"
/>
<
img
src
=
"timeline-03.png"
alt
=
"Timeline 03"
/>
<
img
src
=
"timeline-04.png"
alt
=
"Timeline 04"
/>
</
div
>
<
script
>
//
NOTE:
There's a minor font glitch at the end of the loop;
// hopefully it will be fixed later.
const
fonts = [
"Sga Regular"
,
"CursiveGalactic Regular"
,
"Clypto Regular"
,
"Courier"
];
let
currentFontIndex =
0
;
const
titleElement =
document
.
getElementById
(
"title"
);
function
changeFont
(
) {
      currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];
// Decide on a font-size based on the font
// (e.g., make Courier smaller)
if
(newFont ===
"Courier"
) {
        titleElement.
style
.
fontSize
=
"1.4em"
;
      }
else
{
        titleElement.
style
.
fontSize
=
"2em"
;
      }

      titleElement.
style
.
fontFamily
= newFont;
    }
// Switch font every 2.5 seconds
setInterval
(changeFont,
2500
);
</
script
>
</
body
>
</
html
>
That���s it
���dark background (
#1C1C1D
), white text, same font switching logic, and a brief note on the glitch. If your fonts are in
fonts/
, it should start in
Sga Regular
and cycle every 2.5 seconds.
o1
Dijiste:
ok it still looks like there is a small light border around the png files. and i'm not sure the font is working as well. it should only show SGA (default), Cursive Galactic, Clypto, and Courier and it seems to be flashing a system font first.
ChatGPT
Thought for 8 seconds
Below is a
dark-mode
HTML page that:
Uses
no border
around the PNGs (so you won���t see any light border).
Attempts to
minimize the initial system font flash
by
preloading
your custom fonts and using
font-display: swap;
.
Starts in
Sga Regular
(default) and then cycles through
CursiveGalactic Regular
,
Clypto Regular
,
Courier
.
Includes a
comment
about the
small font glitch
at the end of the loop.
Feel free to adjust the exact file names/paths in the
@font-face
rules and the
<link rel="preload">
tags to match your actual
fonts/
folder.
html
Copiar c��digo
<!DOCTYPE
html
>
<
html
lang
=
"en"
>
<
head
>
<
meta
charset
=
"UTF-8"
/>
<
title
>
Unpublished Facebook Posts
</
title
>
<
meta
name
=
"viewport"
content
=
"width=device-width, initial-scale=1.0"
>
<!-- 
    Preload your fonts to help minimize the initial flash of system font.
    Adjust filenames as needed. If you have .woff2 or .ttf for each font, list them here.
    If a font doesn't exist in .woff2 format, you can omit that line.
  -->
<
link
rel
=
"preload"
href
=
"fonts/Sga-Regular.woff2"
as
=
"font"
type
=
"font/woff2"
crossorigin
>
<
link
rel
=
"preload"
href
=
"fonts/CursiveGalactic-Regular.ttf"
as
=
"font"
type
=
"font/ttf"
crossorigin
>
<
link
rel
=
"preload"
href
=
"fonts/Clypto-Regular.woff2"
as
=
"font"
type
=
"font/woff2"
crossorigin
>
<!-- Courier is a system font, so no preload needed. -->
<
style
>
/* DARK MODE: background #1C1C1D, white text */
body
{
background-color
:
#1C1C1D
;
color
:
#FFF
;
margin
:
0
;
padding
:
1rem
;
font-family
: sans-serif;
/* fallback font in case custom fonts fail */
}
/* @font-face definitions with font-display: swap 
       so the browser quickly renders text with fallback, then swaps once font is loaded */
@font-face
{
font-family
:
"Sga Regular"
;
src
:
url
(
"fonts/Sga-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Sga-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Sga-Regular.ttf"
)
format
(
"truetype"
);
font-display
: swap;
    }
@font-face
{
font-family
:
"CursiveGalactic Regular"
;
src
:
/* If you have woff2, list it first: 
           url("fonts/CursiveGalactic-Regular.woff2") format("woff2"), */
url
(
"fonts/CursiveGalactic-Regular.g2n"
)
format
(
"opentype"
),
url
(
"fonts/CursiveGalactic-Regular.ttf"
)
format
(
"truetype"
);
font-display
: swap;
    }
@font-face
{
font-family
:
"Clypto Regular"
;
src
:
url
(
"fonts/Clypto-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Clypto-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Clypto-Regular.ttf"
)
format
(
"truetype"
);
font-display
: swap;
    }
/* Container that locks heading height to avoid shifting when fonts change. */
#headingContainer
{
height
:
3em
;
position
: relative;
margin-bottom
:
20px
;
background-color
:
#1C1C1D
;
border
:
0
;
/* no border */
overflow
: hidden;
    }
/* The heading itself, centered vertically and horizontally */
#title
{
margin
:
0
;
position
: absolute;
top
:
50%
;
left
:
0
;
width
:
100%
;
transform
:
translateY
(-
50%
);
text-align
: center;
/* Start with 2em for Sga Regular */
font-size
:
2em
;
color
:
#FFF
;
transition
: none;
/* no layout-affecting transitions */
}
/* Display images in a column with no borders, centered */
.timeline-container
{
display
: flex;
flex-direction
: column;
align-items
: center;
gap
:
20px
;
max-width
:
80%
;
margin
:
0
auto;
    }
.timeline-container
img
{
max-width
:
100%
;
/* remove any border */
border
: none;
/* or border: 0; */
background-color
: transparent;
/* if needed, but likely not necessary */
}
</
style
>
</
head
>
<
body
>
<
div
id
=
"headingContainer"
>
<
h1
id
=
"title"
>
Unpublished Facebook Posts
</
h1
>
</
div
>
<
div
class
=
"timeline-container"
>
<
img
src
=
"timeline-01.png"
alt
=
"Timeline 01"
>
<
img
src
=
"timeline-02.png"
alt
=
"Timeline 02"
>
<
img
src
=
"timeline-03.png"
alt
=
"Timeline 03"
>
<
img
src
=
"timeline-04.png"
alt
=
"Timeline 04"
>
</
div
>
<
script
>
// Minor glitch at the end of the loop - hopefully fixed later.
const
fonts = [
"Sga Regular"
,
"CursiveGalactic Regular"
,
"Clypto Regular"
,
"Courier"
];
let
currentFontIndex =
0
;
const
titleElement =
document
.
getElementById
(
"title"
);
function
changeFont
(
) {
      currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];
// If Courier, make it smaller (1.4em), else 2em
if
(newFont ===
"Courier"
) {
        titleElement.
style
.
fontSize
=
"1.4em"
;
      }
else
{
        titleElement.
style
.
fontSize
=
"2em"
;
      }
// Switch to the chosen font
titleElement.
style
.
fontFamily
= newFont;
    }
// Cycle every 2.5 seconds
setInterval
(changeFont,
2500
);
</
script
>
</
body
>
</
html
>
How to Reduce the System Font ���Flash���
Preloading
(
<link rel="preload">
) plus
font-display: swap;
(in
@font-face
) helps the browser quickly load custom fonts. However, a brief flash of fallback text may still appear if the fonts aren���t downloaded by the time the heading is rendered.
If you want to
completely hide
the heading until the fonts load, you could set
opacity: 0
initially and then reveal it once the fonts are ready (sometimes called a ���FOFT��� or ���Flash of Invisible Text��� approach). But the above code is a simpler approach���
some
initial fallback text is normal if the fonts aren���t immediately cached.
With the above page:
No border
around your PNGs, so no light frame.
Dark background (#1C1C1D)
, white text, minimal changes otherwise.
Continues to cycle among
Sga Regular
,
CursiveGalactic Regular
,
Clypto Regular
, and
Courier
every 2.5 seconds.
Includes a comment about the
minor glitch
.
o1
Dijiste:
I thought the fonts were working correctly here: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Font Switching Demo</title>
  <style>
    /* We���ll use a "headingContainer" div to lock in the height. */
    #headingContainer {
      /* Adjust to comfortably fit the tallest font at its biggest size. */
      height: 3em;
      position: relative; /* for absolute positioning of the H1 */
      margin-bottom: 20px; /* space below heading container */
      background-color: #f0f0f0;
      border: 0px solid #ccc;
    }

    #title {
      margin: 0;
      position: absolute;
      top: 50%;
      left: 0;
      width: 100%;
      /* Shift up by 50% of its own height to vertically center: */
      transform: translateY(-50%);
      text-align: center;

      /* Keep transitions simple or remove them: */
      transition: none;
      /* Or, if you want to fade color: transition: color 0.3s ease; */
    }

    /* Example images layout */
    .timeline-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
    }

    .timeline-container img {
      max-width: 80%;
      border: 2px solid #ccc;
    }

    /* Example font-face rules (customize to your fonts folder) */
    @font-face {
      font-family: "Sga Regular";
      src: url("fonts/Sga-Regular.woff2") format("woff2"),
           url("fonts/Sga-Regular.woff")  format("woff"),
           url("fonts/Sga-Regular.ttf")   format("truetype");
    }
    @font-face {
      font-family: "CursiveGalactic Regular";
      src: url("fonts/CursiveGalactic-Regular.g2n") format("opentype"),
           url("fonts/CursiveGalactic-Regular.ttf") format("truetype");
    }
    @font-face {
      font-family: "Clypto Regular";
      src: url("fonts/Clypto-Regular.woff2") format("woff2"),
           url("fonts/Clypto-Regular.woff")  format("woff"),
           url("fonts/Clypto-Regular.ttf")   format("truetype");
    }
  </style>
</head>
<body>

  <div id="headingContainer">
    <h1 id="title">Unpublished Facebook Posts</h1>
  </div>

  <div class="timeline-container">
    <img src="timeline-01.png" alt="Timeline 01" />
    <img src="timeline-02.png" alt="Timeline 02" />
    <img src="timeline-03.png" alt="Timeline 03" />
    <img src="timeline-04.png" alt="Timeline 04" />
  </div>

  <script>
    const fonts = [
      "Sga Regular",
      "CursiveGalactic Regular",
      "Clypto Regular",
      "Courier"
    ];

    let currentFontIndex = 0;
    const titleElement = document.getElementById("title");

    function changeFont() {
      currentFontIndex = (currentFontIndex + 1) % fonts.length;
      const newFont = fonts[currentFontIndex];

      // Decide on a font-size based on the font
      // (e.g., make Courier smaller)
      if (newFont === "Courier") {
        titleElement.style.fontSize = "1.4em";
      } else {
        titleElement.style.fontSize = "2em";
      }

      titleElement.style.fontFamily = newFont;
    }

    // Switch font every 2.5 seconds
    setInterval(changeFont, 2500);
  </script>
</body>
</html>
ChatGPT
Thought for 5 seconds
Below is the
exact
snippet you shared. If your files are in the correct folders and named exactly as referenced, this code should start in
Sga Regular
and then cycle every 2.5 seconds through
CursiveGalactic Regular
,
Clypto Regular
, and finally
Courier
���all at the specified sizes. If you notice any fallback font flashing or issues, double-check your
file paths
,
filenames
, and that you���re serving the page from an
HTTP server
(rather than a
file:///
URL), as some browsers block local font loading.
html
Copiar c��digo
<!DOCTYPE
html
>
<
html
lang
=
"en"
>
<
head
>
<
meta
charset
=
"UTF-8"
/>
<
title
>
Font Switching Demo
</
title
>
<
style
>
/* We���ll use a "headingContainer" div to lock in the height. */
#headingContainer
{
/* Adjust to comfortably fit the tallest font at its biggest size. */
height
:
3em
;
position
: relative;
/* for absolute positioning of the H1 */
margin-bottom
:
20px
;
/* space below heading container */
background-color
:
#f0f0f0
;
border
:
0px
solid
#ccc
;
    }
#title
{
margin
:
0
;
position
: absolute;
top
:
50%
;
left
:
0
;
width
:
100%
;
/* Shift up by 50% of its own height to vertically center: */
transform
:
translateY
(-
50%
);
text-align
: center;
/* Keep transitions simple or remove them: */
transition
: none;
/* Or, if you want to fade color: transition: color 0.3s ease; */
}
/* Example images layout */
.timeline-container
{
display
: flex;
flex-direction
: column;
align-items
: center;
gap
:
20px
;
    }
.timeline-container
img
{
max-width
:
80%
;
border
:
2px
solid
#ccc
;
    }
/* Example font-face rules (customize to your fonts folder) */
@font-face
{
font-family
:
"Sga Regular"
;
src
:
url
(
"fonts/Sga-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Sga-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Sga-Regular.ttf"
)
format
(
"truetype"
);
    }
@font-face
{
font-family
:
"CursiveGalactic Regular"
;
src
:
url
(
"fonts/CursiveGalactic-Regular.g2n"
)
format
(
"opentype"
),
url
(
"fonts/CursiveGalactic-Regular.ttf"
)
format
(
"truetype"
);
    }
@font-face
{
font-family
:
"Clypto Regular"
;
src
:
url
(
"fonts/Clypto-Regular.woff2"
)
format
(
"woff2"
),
url
(
"fonts/Clypto-Regular.woff"
)
format
(
"woff"
),
url
(
"fonts/Clypto-Regular.ttf"
)
format
(
"truetype"
);
    }
</
style
>
</
head
>
<
body
>
<
div
id
=
"headingContainer"
>
<
h1
id
=
"title"
>
Unpublished Facebook Posts
</
h1
>
</
div
>
<
div
class
=
"timeline-container"
>
<
img
src
=
"timeline-01.png"
alt
=
"Timeline 01"
/>
<
img
src
=
"timeline-02.png"
alt
=
"Timeline 02"
/>
<
img
src
=
"timeline-03.png"
alt
=
"Timeline 03"
/>
<
img
src
=
"timeline-04.png"
alt
=
"Timeline 04"
/>
</
div
>
<
script
>
const
fonts = [
"Sga Regular"
,
"CursiveGalactic Regular"
,
"Clypto Regular"
,
"Courier"
];
let
currentFontIndex =
0
;
const
titleElement =
document
.
getElementById
(
"title"
);
function
changeFont
(
) {
      currentFontIndex = (currentFontIndex +
1
) % fonts.
length
;
const
newFont = fonts[currentFontIndex];
// Decide on a font-size based on the font
// (e.g., make Courier smaller)
if
(newFont ===
"Courier"
) {
        titleElement.
style
.
fontSize
=
"1.4em"
;
      }
else
{
        titleElement.
style
.
fontSize
=
"2em"
;
      }

      titleElement.
style
.
fontFamily
= newFont;
    }
// Switch font every 2.5 seconds
setInterval
(changeFont,
2500
);
</
script
>
</
body
>
</
html
>
If the custom fonts don���t appear
Check your folder structure
: You should have a
fonts/
directory at the same level as this HTML file, with the matching filenames (e.g.,
Sga-Regular.woff2
, etc.).
Use a local server
: Instead of opening the file via double-click (which uses
file:///
protocol), run a simple local server (e.g.,
python3 -m http.server 8000
) and navigate to
http://localhost:8000/yourfile.html
.
Confirm file names
: Even slight differences (e.g., uppercase vs. lowercase) will cause 404 errors.
With everything in place, the heading should start in
Sga Regular
and then cycle through
CursiveGalactic
,
Clypto
, and
Courier
as intended.
o1
Dijiste:
What do I change to remove the border between the images? I mean there's a space between them
ChatGPT
To remove the space (or "gap") between the images, you can adjust the CSS for the `.timeline-container` class and make sure the `gap` property is either set to `0` or removed altogether if it isn't needed. The `gap` property is what causes the spacing between the flex container's items (in this case, the images).

Here���s the updated version of your code for that part:

```css
.timeline-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  /* Remove the gap to eliminate the space between images */
  gap: 0;
  max-width: 80%;
  margin: 0 auto;
}
```

Alternatively, if there's any margin or padding directly set on the images, you can adjust or remove those too. For example:

```css
.timeline-container img {
  max-width: 100%;
  border: none;  /* Ensure there���s no border */
  background-color: transparent; /* Optional, just to be thorough */
  margin: 0; /* Remove any margin between images */
  padding: 0; /* If there���s any padding, remove it */
}
```

With this adjustment, the space between the images should be removed and they will display without gaps or borders. for 23 seconds
In your CSS, you have this rule for the container:
css
Copiar c��digo
.timeline-container
{
display
: flex;
flex-direction
: column;
align-items
: center;
gap
:
20px
;
/* This creates spacing between items */
}
Simply
remove or reduce
the
gap
to eliminate the extra space:
css
Copiar c��digo
.timeline-container
{
display
: flex;
flex-direction
: column;
align-items
: center;
gap
:
0
;
/* No space between images */
}
That���s it! By setting
gap: 0
, the images will be stacked with no extra space in between. If you still see space, also check for any margins or padding on the images themselves:
css
Copiar c��digo
.timeline-container
img
{
display
: block;
/* Ensures no inline spacing */
margin
:
0
;
/* Removes default margins */
padding
:
0
;
/* Removes default padding */
border
:
2px
solid
#ccc
;
/* Only if you still want the border */
}
But usually, removing or setting
gap
to
0
in the container is enough to get rid of the extra space.
o1
ChatGPT puede cometer errores. Comprueba la informaci��n importante.
?