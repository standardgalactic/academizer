Hello everyone, in my last video I began creating this little game where you fly around a miniature
version of the world, delivering packages to various cities.
It was a lot of fun to work on, and I was also amazed by how many people were interested
in the project, so I've decided to continue experimenting with it, and see where things
go.
But first, there's a problem.
The game runs fine on my computer, but it seems other computers are not so fond of it.
This message likes to pop up right at the beginning, saying that the machine hasn't
heard anything from the GPU in a while, so it's going to try turning it off and on again.
Unsurprisingly this crashes everything.
To try figure it out, I started by setting the resolution of everything extremely low
so that it would actually run on my little test device, and then one by one I switched
them back to full resolution, until that error showed up again.
The main culprit turned out to be a ComputeShade I had written that takes all the country
outlines and fills them in with the index of each country.
If you've seen the last video, you might remember how that was used to highlight the
countries as you fly over them, and also to figure out which country your packages have
actually landed in.
So I could spend who knows how many hours trying to optimize that code, but since it
does run fine for me, I decided to just save the result as a regular image file, which
can then simply be loaded in, instead of having to actually compute it each time.
I then made a few other optimizations here and there, before trying it out once again
on my test device.
Hopefully this is going to work, and it does seem to be running fairly well.
Admittedly one of my optimizations was just turning off the clouds, which I guess is kind
of cheating, but I'll need to revisit those later because they're really slow.
Now something that's been bothering me a bit is the quality of the color map.
I do have it on the largest allowed size here, a whopping 16,000 pixels across, but considering
how much ground it has to cover, that's not actually that big.
The original map I downloaded is made up of 8 tiles, each with a size of about 21,000
square pixels.
I'm going to compromise a bit, and scale each of them down to around 8,000 square pixels
instead, which doubles the resolution we had before.
This does not take up a fairly hefty 256MB of graphics memory, but I really want that
extra detail and crispness.
While I'm at it, I think I'll also switch maps from February to September, just so
it's a little less snowy.
I then also want to take the height map, and use it to regenerate the normal map we created
last video, at this higher resolution.
I really love looking at this normal map, because it gives such a nice sense of the shape of
the terrain, with the added bonus of some pretty funky colours.
Here's a closer look at the higher resolution natural colours, as well as the heights for
this region.
Which the normal map is really the one that I could stare at for hours.
As I was meandering about, my eye was drawn to this mysterious swirly shape in West Africa,
which I have noticed before but somehow failed to investigate.
Looking it up, I learnt that it's this incredible looking structure of concentric rings, known
rather poetically as the Eye of the Sahara.
Now something I've been wanting to experiment with actually is rendering a tiny piece of
the Earth in much greater detail, and this seems like a good excuse to try that.
So I'm using the Earth Explorer here to track down the height map tiles for this particular
region around the eye.
The data here has been captured with a resolution of 3 arc seconds, which translates to about
90m per pixel, so downloading every height tile would be hundreds of gigabytes of data.
Anyway, here's the map I'm going to use, this is an area of about 540 square kilometres,
going from black at sea level, to white at an elevation of around 900m.
After some tweaks to the mesh generator to create a flat plane instead of a sphere, here's
the result.
Like before, the heights have been exaggerated so we can see things more clearly, I think
I did maybe about 8 fold vertical exaggeration.
Now I'd like to try flying around a bit, but it turns out my code for that has a hard
time coping with the concept of a flat Earth.
I've quickly been working on fixing that though, and we can finally now head out across
the sands on an expedition to the Eye.
I initially assumed it was an impact crater, because it reminded me of some of the images
I looked at while researching craters for my old procedural planets project.
But apparently it was formed by natural terrestrial processes.
I have no idea how that happens, but I'm glad it did, because it looks stunning.
I've quickly done one more test, this time in Southern Africa.
I'm pretty happy with the detail of the height maps, but I haven't yet figured out
how to get my hands on equally detailed colour maps, because if I disable the interpolation
here, you can see just how blocky it is at this extremely zoomed in scale.
Still, it's pretty fun to fly around these mountains here.
I'd love to be able to have the entire world at this scale, but that would obviously involve
dynamically streaming the data in as you're playing, which is not something I feel like
tackling at the moment.
So I'll leave this experiment here for now, and see if I can remember what we were doing
before I got sidetracked with all of this.
Okay, so we have these eight colour tiles which now need to be mapped to a sphere.
We also have this little function for converting a latitude and longitude to a point on a sphere,
so we could just use that to wrap up each of the eight tiles like so.
But if we look at the triangles of the underlying mesh, they look good around the equator, but
get really pinched and distorted near to the poles.
So last video we made something called a cube sphere, which we then chopped up into 96 separate
pieces to help with rendering performance, the idea being that any pieces that are off
the screen can quickly be discarded.
So we need to match each of those up with the correct portion of the correct colour
tile.
My first attempt at this had some subtle issues, which I was worried might bother the
geography boffins out there.
So I kept tinkering and tinkering, and eventually came up with this bit of code.
Here we begin by setting up our eight texture tiles, and then once all 96 little mesh pieces
have been created, we loop through them and find their centre points, each of which then
gets converted to a latitude and longitude using this inverse function up here.
We can then do some simple maths to figure out which of the tiles each point landed on,
which lets us assign the correct texture to each mesh.
I'm never quite sure if the words I'm saying make any sense, so here's a little animation
that shows essentially what the code is doing.
Now if we just draw these textures the same ways before, it's not going to quite work
out.
We need to adjust the shader to something like this, so that each mesh displays the correct
little portion of its texture.
Here are the texture coordinates we just calculated, and if we use those, at last we have the correct
result.
So we can now fly around our higher resolution world, and I'm not sure if the difference
will be all that noticeable on video, but the textures do look significantly crispier
when actually playing it, so I'm glad we went to the trouble.
It also allowed me to scale the world up a bit without things getting too blurry, so
I've made it about 50% bigger than before.
I also want to mention a small but very annoying issue that I finally fixed.
If you look closely, you can see that the plane appears to be vibrating, and it's been
bugging me pretty much since the beginning of the project.
I eventually tracked it down to these two lines of code for rotating the camera to look
at the player, and by just replacing those with a call to the spiltin look at function,
suddenly everything was silky smooth.
I don't understand what was going wrong there, but right now I'm just happy it's
fixed.
Alright, now something I've been itching to do for a while is make cities light up
at night, and so I've started by downloading this nice map of city lights.
I'll first try simply drawing this straight onto the terrain, and let's see how that
looks.
One problem I'm noticing with this is that on steep terrain, the lights get stretched
out which looks pretty strange, and overall it's just not quite looking how I want.
I think it might fit the style I'm going for better if the lights were all individual
points, which means it's time to break out the compute shaders again.
So this code here gets run for every light we want to create, and it basically just loops
a bunch of times and picks different random points on a sphere.
At each of these random points it looks up the brightness of the corresponding pixel
in the lightmap, and keeps track of which point had the highest value, ultimately recording
the winner in this city lights buffer over here.
Then using GPU instancing I'm going to draw little spheres at each of these points with
this shader.
We start off in here by getting the light that's currently being drawn, and then calculate
a sort of time value where 1 means midday, and negative 1 means midnight.
We can then set the colour based on the light's intensity, and make it only appear when our
time value is below a certain threshold.
Finally there's just some stuff for positioning the mesh vertices, and sending that data along
to eventually be rendered over here.
So let's try this out.
Currently it's daytime so no lights are visible, but if we rotate the sunlight over here we
should see some city lights starting to appear.
We can play around with the size of these a bit, I think they're too big at the moment
so I'll scale them down a little.
Something like that maybe.
And then all of them are currently bright white, so I'm going to tweak the dim colour
over here to something more orangier shredge.
I think that looks okay, what doesn't look so good though is this harsh boundary where
the lights switch from on to off.
But that should be easy to fix, I'll just go back to the compute shader where we were
creating the lights, and give each of them a random value which will affect the time
that they turn on.
For completeness sake by the way, here's the code I'm using for generating all these
pseudo random numbers.
Anyway, let's then hop back over to the shader we're using to draw the lights, and in here
we can just add in that random value to give some variation to when the lights turn on.
Let's go test that quickly.
So here we still have our harsh line like before, but if we increase the amount of time
variation we should see that getting broken up with a bit of randomness, which I think
looks a lot better.
I've gone and made a few small tweaks, and added a bloom effect which basically just
takes the brightest parts of the image, blurs it and then adds it back on top of the original
image to give us this nice glowy effect.
I followed this really nice tutorial to implement that, if you're interested in the details.
Anyway, I think I'll fly around a bit now and enjoy the lights while I try to figure
out what I want to work on next.
Alright so I've decided to spend some time optimising the world mesh.
You can see if I switch on the wireframe view the whole thing pretty much turns black because
there are a lot of vertices in here.
But while I've hopped on previously about evenly distributing points on a sphere, in
reality we don't need nearly as many points to describe the oceans or flat areas of terrain
as we do for detailed mountainous regions for example.
But as it stands, if I want lots of vertices in the mountains then I have to have lots
of vertices everywhere, which is why the world currently has a monstrous 8.6 million of the
things.
So I want to try drastically reduce that number, which is very easy, while preserving the perceived
detail of the mesh, which makes it somewhat less easy.
But I've got a few ideas for how to tackle it, so I'm going to mess around a bit and
see what happens.
Well this is what happened.
I do think it's pretty interesting looking, but not quite what I was going for.
Alright, I've made some alterations, hopefully it'll turn out better this time.
Ah, there are some small areas where it almost seems to work, but most of it is just nonsense.
I have an idea though, nope that didn't help at all.
Okay, let's skip over a few frustrating hours.
I've now written this little compute shader, and it begins by just generating points on
a sphere using the exact same cube sphere approach we've been using so far.
Then for each point, it looks up the height of the terrain, as well as the heights at
four surrounding points.
We can then calculate an error value, which is just the difference between the height
of the current point and the average height of its neighbors.
Finally, if that error is greater than some threshold, which tells us that it's not a
very flat region of terrain, then we add the current point to be used in the mesh.
Also, since this is taking place on a sphere, even completely flat terrain is actually curved,
so I've specified this underlying grid so that points can't get spaced too far apart.
So I'll run that quickly, and here we can see the points generated for one of the terrain
faces.
At the moment, the error threshold is set to zero, which is why it looks the same as
before.
But if I increase that value just a little, you can see the Atlantic Ocean here has immediately
lost most of its points, since the height values there are all zero.
So that's again why I have this grid size here, to make sure we get enough points to
render these flat regions nicely.
Let me increase the error threshold a little further, and we can see more and more points
being removed.
So that's obviously something we can play with, to try strike a balance between detail
and performance, along with the resolution up here.
Now, these points still need to be connected up as triangles in order for them to actually
be rendered.
This is a problem I'd love to learn more about, but for now I'm just going to be relying
on the excellent triangle library, or more precisely the C sharp version of it, to solve
the problem for me.
There were some small squabbles at the start, but once those were ironed out, it worked
very nicely.
So here we can quickly take a look at the triangulation it's generating from our points.
And here's what it looks like with the full terrain, which has come down from about 9
million vertices, to just over 1 million now.
I should mention by the way, there are much cleverer solutions for this kind of thing,
where the vertices are continually updated based on the distance from the camera and
so on, and I would like to learn how to implement those techniques, but that's something for
another day.
For now, let's just zoom in over here so we can get a closer look, and I'm pretty
happy with that.
The more flat regions have obviously lost some detail, but all that's important really
is that the mesh captures the silhouette of the terrain, because once we add our normal
map back in, that's going to take care of all the little lighting details.
We don't need to capture all of that with geometry.
One downside with this new method though, is it takes quite a while to generate the
world, about 20 seconds or so, so I wrote a bit of code that just saves the vertex positions
and triangle indices to a big file, so it can very quickly be loaded in when the game
starts.
Alright, something I'd like to try adding to the game is wind, so I'm going to grab
some forecast data from the US Weather Service, and that comes in some unfamiliar format,
so I'm using a little utility here to convert it into a nice simple JSON file.
Here's what that data looks like, first it introduces itself, and lets us know we're
going to be looking at the U component of the wind, which I guess is the velocity along
one axis, and if we scroll down a bit, here are the actual values.
If we scroll all the way down to the middle, we should find the other axis of the velocity,
and these are all in meters per second, it says.
I've gone ahead and written some very uninteresting code to load these values into a texture,
so let's see what comes out of that.
In this little shader here, I'll quickly read the wind vector from the texture, and
let's maybe output the speed of the wind, so I'll get the vector's length, and divide
it by the maximum speed in the file, which was about 25 meters per second.
And here's what that looks like.
I find it really interesting how clearly defined the shapes of the continents are.
I guess it does make sense that the wind would experience a lot more friction over the land
and slow down, but it's very dramatic.
Let's go back to the shader quickly, and maybe we could try drawing the direction of
the wind in red and green like this.
That's pretty cool looking, I think, but what I'd really like to do is spawn in some
particles, and have them actually move around the globe based on this vector field.
So I've been writing a little compute shader, and in here we have this particle update kernel
which runs for every particle, and simply gets the wind velocity at the particle's
current position using this function up here, which does some little calculations to convert
the 2D velocity into a velocity on a sphere.
That velocity then just gets used to update the particle's position.
There's also a timer for each particle, and once it reaches zero, the particle gets
respawned in this function at the top, which just creates a seed from the particle's index
and current position, and uses that to generate a new random position for it.
And it also resets the timer, of course.
So here's our little globe, and I've coloured this based on the wind speed, with lighter
shades of blue representing higher speeds.
Let's go ahead and spawn in some particles, and see what happens.
Well, there's a pleasant surprise, this actually seems to be working.
There's even a cyclone over here, and it's rotating counter-clockwise, which I had to
look up is what they're supposed to do in the northern hemisphere, so that's a nice
confirmation that I didn't get anything back to front in the velocity calculations at least.
And if we go over to the southern hemisphere, here we can see the cyclones twisting around
in the opposite direction.
It's surprisingly entertaining to just watch these points flowing around.
It would be nice to see the weather actually evolving over time though, and I guess I could
blend between data from different days to do that.
I'd also love to try do some kind of fluid simulation to generate believable weather
patterns, but those are challenges for some other time.
Right now, I'm not even sure how I want to actually implement this into the game.
I've played around a bit with the old cloud system, getting them to move about based on
the wind, and then perhaps the player's speed could be affected by the winds as well.
The trouble is just that I'm not really happy with how this is looking, and I'm struggling
at the moment to figure out how to go about improving it.
But there are so many other aspects of the project I'm excited to work on that I think
I might just leave this experiment here for now, and come back to it later, whenever inspiration
decides to strike.
So let's move on to a little detail I've been wanting to add for a while, the moon.
So I'll grab the color map of the moon, and while we're at it, I guess we might as well
grab this height map as well, because we can use the same code from last video to generate
a normal map from it.
Have I mentioned I love looking at normal maps?
Only the world space ones though, there are some good technical reasons for preferring
tangent space maps, but then you don't get the pretty colors, which are much more important
to me.
Anyway, we can slap these on a sphere, and just like that, we have ourselves a moon.
Let's now get this into orbit.
So after referring to this little diagram, I've written some code that starts off by
calculating the moon's orbital plane, and then just makes it move around in a circle
on that plane.
Lastly, it tilts the moon a tiny bit, and makes it spin on its axis in synchrony with
its orbit, so that the same side of the moon is always facing the earth.
Let's see how that looks.
So because the moon's orbiting at this angle, when looking at it from the earth, we'll
sometimes be able to see a bit more of the top, and sometimes a bit more of the bottom,
and that gives the appearance that the moon is rocking back and forth.
But it should also appear to rock from side to side, and change size over time, because
the moon's orbit is actually slightly elliptical.
This is much more detailed than is necessary for the game, but I'm not in any particular
rush and it sounds like fun, so let's do it anyway.
In one of my old videos, I played around with some simple orbital simulations, and this
here was a simulation using Newton's equation of gravity.
What's nice about this approach is that we can simulate the interactions of as many bodies
as we want, but on the other hand, it can be a bit finicky, and also if you want to
know the position of a body at a certain moment in time, you have to run the whole simulation
up until that time to find it out.
So today, I'd like to try a different approach.
Say we have one big stationary body, and a second little body that orbits the first.
Technically they'd both be orbiting their shared center of mass, but I'm going to ignore
that for today.
Now one way to define the shape of the orbit is with two values, called the periapsis, which
is this distance of closest approach, and the apoapsis, which is the distance of the
furthest point in the orbit.
Use two bits of information together to define an ellipse, and I've written a bit of code
here to visualize that.
So this just starts by calculating some properties of the ellipse, and it then generates a bunch
of points along that orbit, and connects them up with the lines to display them on the screen.
And we can see that here.
Let me increase the apoapsis a bit just to get a nice elongated orbit.
What we need to do now is figure out where along this orbit the body will be at any moment
in time.
Thanks to Kepler we know one very helpful fact, which is that as the body moves in its orbit,
the area that it traces out in a certain amount of time will always be the same.
So say this is how far it moves in one week, then over the course of the next week the
distance it moves might be different, but the area it covers will be exactly the same.
With the power of geometry, we can transform this fact into an equation, which essentially
relates where the body would be if its orbit was a simple circle, to where it is on the
actual ellipse.
So of course we'd like to solve the equation for this angle big E, but it turns out there's
no exact way to do that.
Instead, we can rearrange the equation here so that if it's given the correct value
for that angle, the function will return zero.
Now all we need to do is keep guessing values until one of them gets us at least close to
zero and that will be our approximation of the answer.
We don't have to guess completely blindly, thankfully, we can use something like Newton's
method which I've implemented crudely over here, and how that works, along with much
more cool stuff, is explained in this wonderful video.
Alright, so to bring this all together is this function called calculate point on orbit,
and all it really has to do is pass the Kepler equation into Newton's method, which should
give us a very good approximation of the angle we want, and it then simply takes that angle
and converts it to a point on the ellipse.
Let's see how that goes.
Over here we can see our little satellite speeding up as it approaches the planet, whizzing
past and then slowing down as it moves further away.
I'd say it's looking pretty good, so let's apply it to the moon.
At its closest, the moon is about 360,000km from the Earth, and at its furthest, around
405,000km.
So I'll quickly change the position calculation here to use our fancy new orbit code.
Then I'd also like to add a little visualisation.
I am going to draw a white line from the moon to the centre of the Earth, and a red line
just going from the moon out in the direction it's facing.
If we watch this orbiting now, we can see from the red line how the slight eccentricity of
the orbit causes the moon's rotation around its axis to sometimes lag behind or shoot
ahead of its orbit around the Earth.
So if we look at the moon from the Earth again, we should see it not only looks like it's
wobbling up and down, but also now from side to side, and of course it appears to grow
and shrink over time as well.
This is far from super accurate what I've done by the way, there are many details to
take into account, but I did learn some new things, so I'd say it was worthwhile.
Now I thought I'd quickly set up the Earth's orbit around the Sun as well, and here we
can see the Earth is currently tilted away from the Sun, at least in the Northern Hemisphere
where our observer currently is.
So if I change the time of day here, we can see the Sun appears pretty low in the sky.
Fast forwarding about half a year though, we can see the Earth is tilted towards the Sun,
which now appears much higher in the sky at the same time of day.
Let's take a closer look at this apparent motion of the Sun, and if we actually draw
a trail behind it as we are stepping through the year in one day increments, we can see
how that traces out this famous sort of figure eight, known as an analemma in the sky.
I was curious about this one lobe being so much smaller than the other, and I learnt
that that's due to Earth's orbit also being slightly elliptical, so if I switch over here
to a simple circular orbit instead, we can see how the Sun still traces out the same
basic shape, but the lobes have now been brought into balance.
Here I've just brought the tilt of the Earth down to zero as well, and we can see how the
Sun now appears at the same spot in the sky every day.
I thought that was quite fun to play with.
Now that we have the Sun, let's add in the rest of the stars.
My first thought was to just map a giant texture like this one over the sky, but it didn't
fit in very well.
I then came across this nice compilation of star data, and I wrote a little script to
load that in.
There's over 100,000 entries in this thing, but one of the attributes is the star's apparent
magnitude, so we can select only the ones that are bright enough to be visible with
a naked eye.
The code then goes on to just calculate the star's positions, and draws them as little
spheres, which I'll need to optimise later.
So over here we have about 9,000 stars, which I've given some test colours and sizes based
on their brightness.
This one here looks like the brightest of them all, which is serious.
I'm incredibly bad at stars, recognising constellations and all that stuff, so I'd need
to consult a star chart to know if I've actually loaded these in correctly, but I'll just
hope for the time being.
One quick thing I could maybe check though is just if the North Star is actually in
the North.
So I think it should be right about here, and it is, so that's reassuring at least.
Alright, so I'll bring the moon, sun and stars into the game soon, but I first want
to finish up a rewrite I've been doing of my old atmosphere shader.
It's still very similar to the original, so have a look at that video if you're interested
in the details, but there are some nice little improvements and optimisations.
For example, the original version did all the expensive raymatching calculations for
every pixel on the screen, but this has now split up into two much cheaper steps.
Firstly, since colours in the sky mostly change quite gradually, the sky can actually be rendered
at a pretty tiny size and just scaled up.
The biggest exception is the actual disc of the sun, so that's left out and just drawn
separately on top at full resolution.
The second step is for rendering the atmosphere over the terrain, which is trickier because
the result depends on the depth of the terrain.
The main trouble is that nearby pixels can have very different depth values, for example
around the edges of mountains, so we'd get some unappealing artefacts there if we tried
the same approaches with the sky.
From this paper though, I learnt about a nice technique to get around that.
What we can do is render the atmosphere again, but instead of just storing the end result
like with a sky texture, we'll take two-dimensional slices of what the result looks like at different
depths, and store that in a three-dimensional texture.
Well, actually we need two three-dimensional textures because the result has two parts.
There's the light from the sun that reaches us after scattering through the atmosphere,
which is what we're looking at on the left here, but then there's also something called
transmittance, which tells us how much of the light that's bounced off the terrain in
the direction of the camera is actually going to reach the camera because some of it will
get scattered away as it travels through the atmosphere.
Thankfully, these textures can be really tiny and still give good results, otherwise this
obviously wouldn't be a very good optimization at all.
Here's the code by the way where this is actually applied, so we first remap the terrain
depth to a value between 0 and 1, and then that gets used to sample from the correct
slice of the 3D textures.
Or more precisely, it'll be used to blend between the two closest slices to smooth things
out a bit.
Finally, over here, it's just applied to the terrain colour.
So let's quickly see what this all looks like.
Here we have just the light from the atmosphere by itself, then here are the transmittance
values, and lastly the original colour from the terrain.
The terrain's looking a bit flat at the moment, so let's now bring all the layers together,
and we get this, which has a much better sense of depth I think.
Okay, let's finally have a look at what all this stuff we've been adding actually looks
like in the game.
So hopefully you've been able to see the stars twinkling in the background, and we should
see those now slowly fading out as the sun begins to rise.
I'll quickly veer off to the side here because I want to show how we can see the shadow that
the earth casts on the atmosphere.
It doesn't perfectly line up with the terrain unfortunately, because for annoying performance
reasons the earth is treated as a perfect sphere in the atmosphere a marching loop.
Anyway, as we head out over the ocean you might notice I've added in some little wavy
undulations onto the sphere here, just to try break up the perfect smoothness of the
horizon which I thought looked a bit strange on this miniature planet.
This is done in the vertex shader just by offsetting the heights of the vertices a little
bit based on some layers of simplex noise.
As you can see it's extremely crude, I would like to make it more lifelike and I've actually
already downloaded and processed some wave direction data, but I still need to figure
out what exactly I'm going to do with that.
In the meantime I have made some other small improvements to the water, for example most
lakes appear pretty much completely black on the colour map I'm using, so I've tried
to find alternative images of some of the larger lakes and just fit them in as best I
can.
Let's hop back into our plane and maybe go pay those lakes a visit.
Perhaps we can even drop off some packages there since that's still the only thing
you can actually do in the game.
I'm once again very guilty of neglecting the gameplay and just getting lost in all the
little details.
Still, some of you expressed interest last time in simply being able to fly about and
see the sights, which is why I've tried to put at least some effort into optimisation
this episode.
You'll probably still need a fairly powerful computer to run it, but I'll be making it
freely available to download for anyone who'd like to give it a try.
I'll also soon be making the source code available to everyone in case some of you
are interested in taking a closer look at that or even adding your own features to it.
Or fixing my bugs, of which I'm sure there are many.
I've had a lot of fun building this so far, and even if this last episode was more about
little tweaks and improvements than new exciting things, I hope it's still been interesting
to follow the process.
So thank you as always for watching, and until next time, cheers!
