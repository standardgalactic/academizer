I just wanted to talk about this really quick.
So I went ahead and added my own awesome go list
and put all my stuff on it so I can keep track
of what I need to fix and that's what we're gonna do tonight.
But you can go out to check this out,
rdbxrub slash awesome dash go.
And I put some stuff on there besides mine.
I put GDA, more as T-Cell and TVU on there.
Really important.
No, those are just GitHub tags.
You should always tag your Git repos.
Yeah, people don't tag their Go repos all the time
and that's makes, it's really bad
because it just makes an anonymous tag.
It's really bad.
You should always tag your Go repos.
I decided to factor out a bunch of the stuff
that was in my bonsai and put them into their own packages
which you can go to as I just mentioned
on awesome go that are listed there.
Three of them are not finished.
We'll be finishing those tonight.
The first one we're gonna finish
is the traditional data structs package.
And that's just, you know,
I got, there's an implementation of a stack.
That's all done.
There's an implementation of a tree, which we need to add.
I've already written it.
I just wanna clean up the one I've already written
and make it more of interface friendly.
And then there's an actual node implementation
as an interface, not just a stack.
This is actually really important because,
and I didn't wanna add too,
I went ahead and made it so that if you implement visits
async and visit, these are methods
that have already been written on the struct
to go to every single node in a node tree.
In a predictable way, order two is going to be,
we've already done the interface.
It's gonna be implementing this interface
and the scaffolding for the struct
from the stuff that I've already written
that I know works without running into, you know,
struct interface incompatibilities.
Node tree is, we can talk about that.
You're gonna be coding a lot of it.
So as I do, I'll talk about it.
If you're trying to learn about data structures
and algorithms, this is the place to be for you tonight.
This is the root of node tree is one of the most important
data structures in all of computer science.
And we're gonna be spending a lot of time in it.
And it has a link list built into it.
So you can get kind of both of those.
It doesn't have to necessarily be a tree,
but it generally looks like a tree.
I mean, you can have stuff branching out
in any direction, it doesn't matter.
It just, you know, like a star or something,
but people tend to think of it as a tree
and think about what's above it and what's below.
It kind of helps you organize in your mind
what's going on when we talk about this.
So the tree specifies a root of node tree
that's made up of node implementations.
The tree holds metadata about the node.
So we have a tree that kind of encapsulates the whole thing.
The most important thing in the tree is the root.
That's the number one node,
the beginning of the rest of the thing.
The other stuff is just string names for the integer types.
Type that's an integer, so it's not very big.
And we can set that type.
We have a value, which can be anything.
That's kind of the payload.
And a way to get all the nodes,
tell whether it has any nodes at all.
And a number of other things related to that.
Adam, destroy them and cut them out.
As I was saying, I've already done this whole thing
and hadn't got it working many, many times.
Here's the law code, it's all here.
All this code is already here.
But I want to refactor the code I have
so that it works better as being used by the interface
without overhead.
That is just an implementation of an interface
where you specify how it's supposed to behave.
You don't have to document the struct.
You can just document the interface
and then tell people that that's how it behaves.
And then you're good to go.
That's all I need to do.
Implementation of...
But I think that's kind of an anti-pattern
because I think using a knit is more important.
Being able to allow people to use a knit
and it's more of a more idiomatic go to do that.
Because you don't really want to force people
to do your initialization unless they want to.
We had a little bit of a rabbit hole.
We made this Go iMethods bash filter
which just takes an interface
and converts the interface into this
so that you can go in and fill them out
without wasting too much time writing it.
It did take me about 15 minutes to write it
but I can use this forever now.
That's always a...
How would you recommend?
And for an open source project
and streaming, how does that relate?
I think it's hard.
I think the best way to build an open source project
is just get a bunch of buddies together
and then start making something.
And that's the only way I've ever done it.
I've never been involved with a big open source project.
I wasn't making contributions.
I can tell you, somebody you do want to ask
is K-W-I-N-T, Quint, if you ever see them here.
One of the free and open source FOS developers
and organizers of the conferences out there.
So they would have better information for you
than I would.
I do think streaming has been a big thing.
In fact, the stuff that I've been doing
since I started streaming two years ago,
the projects that I've had have had a lot more visibility
and we've had a lot more input.
Oh my God, it had been so much better
because of the input from the community.
So I do agree.
Definitely stream if you're gonna do
any kind of open source development.
I think you should stream all of it.
As much as you can.
Now, granted, I have to not stream sometimes
because I can't code and stream at the same time.
And I mean, sometimes I can't, sometimes I can't.
It depends on what I'm doing, but if it's complicated.
If you do start streaming open source,
please make sure I know.
And post it in the Discord and let us know about it
so we can call on other people to come help you.
There are a lot of people who need projects.
I'm like, I don't know what to work on.
And there's like a ton of people that are starting projects
that would be open to having beginners help them.
So, you know, let us know.
Just a reminder of the task ahead.
We've got this made.
We're not gonna be implementing all of these,
giving you return values and pulling over the code
that's already been written in the other structure
that I have and resolving the interface dependencies
and things like that so that that works.
We're gonna be doing that for the next 54 minutes
in this promo session.
So that's where we're gonna fill your interfaces
to put a comment here saying what it is.
I do think referring to the interface is important.
So I think it's worth having a thing there.
Plus you get the credit where, you know,
when they, whenever the greater thing is,
it'll let you know that you passed, you know.
So I think it's worth it.
7.19, N.V, and as the receiver, it's called.
We'll change that and make sure it matches.
9.10, we got a problem with the receiver.
Still there we go.
N.T, we have to do.
Now, we fulfill the interface.
It doesn't do anything yet, right?
It's just all the fault values.
But we make, we need to make absolutely sure
that our struct has properly fulfilled the interface.
That's the very first thing to test.
Otherwise you're gonna be having interface fulfillment errors
all through and it's gonna mess you up.
You run into so many hurdles eventually
that you start to, you realize, I don't wanna do that.
That's gonna end up in a foot gun later.
I'm gonna run into a wall right later.
And just writing code is the only way
you can get this experience, honestly.
You can't learn it from reading about or watching.
So, okay, what are we doing in this promo?
We are gonna be making this readable.
So that is the default representation of a thing,
a struct, and we're gonna make it look like pretty JSON.
That's the first thing we're gonna do
by implementing a stringer interface.
One very serious path into cybersecurity
is to go into the military and ask them
to go into cybersecurity.
And I wanna hear everything you have to say about that
because I think the military has done phenomenal job
training technologists based on the people
that I've met over the course of the last 20 years,
three years.
You have to have certain capabilities or something, right?
Yeah, and you know what?
I can still work for the NSA if I wanted to.
Yeah, there's no age restriction on the FBI.
Yeah, if you're an analyst, should go in,
according to Adam Ruins College,
that you make 30% more money at every level of your career
if you have a degree of some kind.
So in United States, it's still preferable
to have a degree of some kind just to have the piece of paper.
But they don't care where you go.
Now, having said that, I do wanna say
that there's been a lot of companies that come together.
In fact, a lot of Silicon Valley companies
came together and wrote a side of affidavit saying,
we do not require college.
One of the big ones was IBM.
They said, as long as you have equivalent training
and certification, military or otherwise,
you can just work here.
And they created their own high school,
the case for 16, in order to just go right to work for them.
It really is.
It's just so much more important to have a GitHub
than anything else, more important to LinkedIn.
You can put your profile on there
and more important than the landing page for the web.
But having a nice web page is also fine.
The guy that got this junior job, 100,000 K,
that's what he did.
And that impressed us all the time.
People don't put the personal hobbies on things.
I do not forget to put your personal hobbies on there.
Your personal hobbies show what you're passionate about.
It gives you something to talk about in an interview.
And you can actually present trustable proof,
verifiable proof, you know what you're doing.
So what about your personal blogs and stuff like that?
These things are good too,
because they show that you're interested in the topic
and you can write about it intelligently.
It also shows that you know how to communicate.
So I think you should be doing it anyway.
RWX, the RW and RWX is writing.
Just make a blog about what you do and talk about it.
Another really important thing about having a blog
is particularly if you're interested in academic things.
I have a guy who went off to Columbia
who had nothing to show for his four or five years with me
because he was so random.
He would like do tons of different things.
He was learning all the time,
but he had nothing to capture.
Please, please keep a running log,
personal log of what you're writing about,
what you're discovering and everything like that.
Like as if you were like a scientist or something.
And then you can share what you have
and somebody else can read that and they'll see,
oh my gosh, this person's interested.
They may have a lot of things to show for it,
but this blog shows a lot.
I don't know.
Are soft skills more important than text skills in the industry?
I don't think they're more important.
I think they're as important.
I don't even think you should call them soft skills,
but people do.
If you can't communicate, you can't work.
You can't, you can't justify your existence.
You can't do anything.
I think this is true.
You can fake it till you make it
and brand yourself into a job
into like a massive following of people
and crazy amounts of money and not be worth shit.
Happens all the time.
There are people who have the opposite of imposter syndrome
who like get their name out there.
That's it.
It is what it is.
It's just, it's just not cool that that's true,
but it's always been true.
The people who you remember
and invented the transistor and everything,
all these people, it's because they marketed that shit.
Cause they marketed that shit.
You know, they control history.
So I hate to say it, but you have to control your brand.
You have to push your brand.
You have to know about your brand a little bit
and minimally you have to know how to market yourself
and raise them.
If you don't know how to do that,
get a contractor to help you.
Well, how do I put this?
I think it's more important.
I think a lot of people agree.
I think it's more important not that you market yourself
but that you would create quality relationships with people.
I think if you create quality relationships
with people just in life,
while you're working and stuff,
you will always have a job
and you will find a job as long as you have the skills
because now we're weak.
Because you're already building relationships
with people who trust you,
who can vouch for you
and that care about you,
that they're looking out for you.
Those are the kind of people you want to get in your camp.
And yes, I think streaming and social media
and that kind of thing helps.
I also find that less manipulative, right?
I find it to be far less manipulative.
If you're a perception manager,
I hate perception managers, I just hate them.
You could smell that shit anywhere.
I hate it.
You know, if you ever see me make a video
with, and the thumbnail is this.
Then you know I've lost my four years in college
screwing around, having them not know
what to tell you to get a job
and say, oh, you'll figure it out.
And then you're gonna go watch like two,
play around with Linux distros for two years
while you figure out that none of those are relevant
and you really have to learn how to even if you hate it
and you have to do something to get a job.
It's like, how much time do you have?
I don't have that much time.
How to manage your time.
So when people stream about things
and playing around with Arch
and doing all these things that I did in my 20s,
I just feel like it's gonna cost them in the long run
as long as they can do so quickly
and they have lots of free time or whatever.
What I don't like is when people fake who they are,
when people put on some extra personality
that they think is gonna get them more views.
And that happens all the time, all the time.
And it's really, really transparent.
And usually, and that I don't like, never have.
Some people might say, hey, learn C or C plus plus plus.
That's a great answer.
Don't say Russ, don't say Russ, don't say Russ.
Don't say Russ.
I love you.
I knew I loved him.
I knew I loved him.
I knew I loved him.
And it gives you the same expressiveness
that Python says, but the same power
and core functionality that C or C plus plus
some other glowy run.
Yeah, this guy knows his shit.
This guy knows his shit.
That's honestly God's truth.
I don't care about you.
I just want what you can give me.
It's true.
At least I'm owning it.
All right.
So, and I'm gonna make a quick little summary video
on this before I cancel everything.
So, they say and go, pass interfaces, return structs.
And I think, I've hit this problem again.
I'm gonna throw this whole interface out.
And I wanna tell everybody why.
So, let me explain that.
If you are going to, if you think you want an interface
because you just wanna make it usable
by some other person someday, you're probably wrong.
But how do you know you're wrong?
How can you tell you're wrong?
And I've been burned by this so many times, I've lost count.
And I feel like, I feel like the biggest indicator
is when your interface violates the cardinal rule itself
of go, which is pass interfaces and return structs.
You cannot return something.
If you have to return an interface
and you cannot return a specific concrete type,
you're gonna have trouble
because they won't be able to use that thing later.
Somewhere along the line.
I had to have a structure right now.
Because now, when I pass in this node,
I have no internal knowledge
about how the implementation of node has been done.
I'm only allowed to call this up from the interface
and that bypasses all the efficiencies of link lists
and graph trees and all that stuff.
I'd say is that, I mean, I've tried this like three times now.
This is like, I've done this over the last two or three years.
Every time I try to do a node try,
I always do the same thing.
I'm like, there's gotta be a way
to write an interface with this.
And even with generics or something,
there's gotta be a way for me to do it.
And I think the answer is still no.
The answer is use a struct.
Some place down the line
is gonna be able to do it more efficiently.
Picking between interfaces and structs
has gotta be deciding whether to abstract
the thing you're making
is gotta be one of the hardest decisions
in all of formal strict type computer programming.
You don't have to do that in Bash, who gives a shit?
