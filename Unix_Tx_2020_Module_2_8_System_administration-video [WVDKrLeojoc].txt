As one might expect, we can use Unix tools in order to fetch system administration data.
In this unit, we'll see how we can find Unix administration files and what they contain,
how we can list information about the running processes on both Unix and Windows,
how to find details regarding a computer's hardware configuration,
how to access the Windows registry and how to use the Windows Management Instrumentation command.
Unix systems store administrative data in the slash etc directory.
Some justingly claim that etc doesn't start for etc, but for extremely technical content.
Let's change to the etc directory.
I use the find command to count how many files exist here by piping the output to word count minus L.
I also redirect the standard error of find, the two greater than, to dev null.
I do that to suppress seeing any error messages from files that cannot be accessed.
Note that some files are inaccessible because etc contains administrative information,
which may include passwords and private keys.
As we can see, there are about 3000 files here.
The majority of the files are in text format.
For instance, you may remember the password file from a previous unit.
This file contains user information.
Specifically, each user record contains the login name, the numerical identifiers of the user and the group,
the actual full name, the home directory and the user's preferred shell.
The first entries contain administrative accounts.
The root is also called the super user.
This special user account is used for system administration and can access all commands and files.
In the past, the second field of the password file used to contain the user passwords in a crippled format.
Nowadays, they are stored in another file named shadow.
This change occurred because password is globally readable by all programs
in order to map for example numerical identifiers to user names.
As hardware also became more powerful, it was not wise to store the encrypted passwords in past the password file anymore.
In Unix systems, we can use the ps command to see the processes running on the system.
Running ps, we get a list of running processes.
We first use this command when we traverse the firewall.
For each process, we see the process ID, the terminal associated with it, the time consumed by the process and the actual executed command.
A variety of options can modify the output of ps.
For example, running psuw displays more results such as the CPU and memory percentage occupied by the process
or its virtual and resident memory sizes.
There is also status specifying whether the process is running or waiting along with the process start time.
These are my current running processes.
Including the x option, we can also see our background processes.
For instance, there is the system d process and the ss agent which is used to securely store the ssh keys.
Furthermore, adding the a argument to ps gives us information about all running processes
such as processes run by root and other users.
The slash proc directory is a virtual file system.
This means one that doesn't physically exist on the disk but is created on the fly by the operating system.
It contains tons of useful data.
Let's change to the proc directory.
Listing its contents in columnar format, we notice many numerical virtual directories.
These correspond to processes with the associated identifiers
and dynamically appear and disappear mirroring the corresponding processes.
So directory 18 corresponds to the process with process id 18.
The remaining entries are virtual text files with system-related information.
For instance, the CPU info file contains information about the CPUs of the system
such as the processor, the vendor identifier, the CPU family, the model and model name and so on.
Changing to a process directory and listing its contents, we get various entries related to process details.
Here, I change to dollar dollar which contains the identifier of my current process, the shell.
We see for example the command line, a directory with the process file descriptors,
the memory associated with the process, how it is mounted and so on.
Let's look into an entry.
I choose the command line, cmd line.
As expected, it contains bash.
We can obtain many details regarding a file through the stat command.
By default, stat outputs all sorts of information associated with the file's inode.
The inode, which stands for index node, is a unix data structure that describes a file or directory entry.
We see that the stat output for a file includes the file name, its size, the number of blocks associated with the file,
its various permissions, the owner, its group, the time it was last accessed, modified and changed
and the time it was created if this supported.
Through various arguments, we can change stat's output.
For example, the %s argument gives us the file size, about 300 bytes in this case.
The %y argument outputs the last modification time in seconds since the epoch, January 1st, 1970.
To convert the seconds into a readable date, as we've seen before, we can use a date-d command specifying the seconds after the add sign.
Here, we get June 2nd.
To verify that this is the actual date, we can list the file.
Lastly, %u gives us the user associated with the file, so the person the file belongs to.
That's me in this case.
On Windows systems, administrative information is stored in the infamous registry.
On Siegwin under Windows, there is a directory under the proc-virtual file system, named registry, which provides access to the Windows registry.
Under this directory, we can change to sub-directories associated with registry keys.
Here, I change to hkey-local-machine-software-microsoft-windows-nt-current-version.
Now, I can list and access the key values.
I first list the contents of the current directory and get its various keys.
Now, looking for example into the key product name, we see that it has the value Windows 10 Pro.
Another way to access the registry is with the regtool command.
Regtool allows us to list and access key values.
As an example, I run regtool-set-hkey-current-user-software-segwin-test-entry and set the key value to hello there.
Listing the keys contents, we verify that it contains the value hello there.
Similarly, to list the key values with regtool, we specify get instead of set, the same value hello there appears on my screen.
On Windows, we can use the wmic command to obtain all types of administrative data.
Let's say I want to find and list the DLL file versions.
I run the find command on sig drive-c-windows-system32.
I only search at the top level for files whose name ends with the suffix .dll.
For the first 10 DLLs found, I read the file in a while loop and modify it in a way that I can pass it to the wmic.
First, I convert its path to a Windows path using the sigpath command we learned.
Then, I invoke set in order to replace backslashes with double backslashes.
This is required by the way wmic expects its arguments.
Next, I run wmic on the particular DLL by specifying that name equals the DLL file name and request its name and version.
Piping the output to grep, I filter out blank lines and the customary headers of Windows programs.
At the end, for each DLL file, we get its name and version.
As another example, let's use wmic to obtain data regarding running services.
First of all, I use wmic to get for each service its name and state.
We get a list of names and their corresponding state, whether they are running or have stopped.
We can further process wmic's output by piping it to another command.
For instance, for each running process, I get its name and virtual memory size.
I then sort the output by the second field, the size, in reverse numerical order.
In this way, we get the top running processes ordered by their memory size.
As expected, Firefox and Thunderbird are at the top of the list.
If you want to find the list of running processes on Windows, we can use the task list command.
Functionality equivalent to the ps command of Unix is available on Windows through the task list command.
For each running process, we get its name, its process identifier, the associated session and the memory usage.
Note that because of the adorned format, such as the comma separating thousands in the memory usage column,
it is more difficult to process this information.
This concludes our unit on fetching data for system administration purposes. Stay with us.
