Some of the most common comments that I get from you guys, the viewers, is about Vim.
I've done so much content about Vim in the three years of the YouTube channel, and I
often say that I really think everybody owes it to themselves to learn the Vim text editor.
If you spend any kind of time in a text editor, you really owe it to yourself, and that means
if you're a programmer or a creative writer, whatever it is you do in a plain text editor,
Vim can save you so much time.
But people often ask me, like, hey, can you provide real-world examples of how Vim actually
saves time?
Because I think a lot of people assume, you know, Vim is so hard to learn, it's just
going to take you weeks, months, maybe even years to really learn.
Vim, is it worth it?
In the end, does it really save you time?
And yes, it is worth it.
And yes, it saves you hours and hours and hours of work compared to using a traditional
text editor.
Vim can actually do some pretty amazing things.
So today, I just wanted to give you some real-world examples of how Vim is much faster at getting
work done than your traditional text editor.
Now let me switch to my desktop, and I've opened up this Bash script here that I wrote.
This is just a simple Dmenu script, and there's really nothing to see as far as the script
is just a quick and dirty script, but it's something we can play with.
And the first thing I want to show you guys is moving lines around, moving lines of text
within the document, because that's something you do often, especially when you do any kind
of scripting or programming, and that's something that Vim handles really well.
The most obvious way to move a line is simply to delete it and then go to the area where
you want to then put it.
So to delete a line, DD, right, and then navigate to wherever you want to put the line and then
type P. Now, most of the time, I find I'm deleting a line and pasting it right after
the next line, and that seems to be what most people end up doing for the most part
when you're moving a line.
Oftentimes, you just want to swap the current line with the next line.
All you need to know is that DDP, all one command, swaps the current line you're on
with the next line.
You see these two lines here, doom.d slash config.io and doom.d slash init.io.
If I just want to swap those lines, just remember, DDP just swaps the current line with the next
line.
You don't even have to think about it.
Again, that's typically what you're doing.
Most of the time, when you're moving a line, you're just moving it to the next line.
You only really have to think about DD and then where to paste it if you're moving more
than one line away.
One of the cool things I've discovered with VM is that you can quickly search for a string
of text and find the line that contains that string of text and then move that line wherever
it is you want in the document.
And to do this, what I'm going to do is let me type capital G on the keyboard.
I want to go to the last line of this document and I've got screen key on and that is not
wanting to get out of my way.
I'm going to turn screen key off.
You guys really don't need to see the screen key commands.
But anyway, I went to the last line here in the document by typing capital G and really
I just wanted to search for a string of text ultimately.
You see the word ultimately in this line right here?
I've got my cursor above it because I want to be able to search for ultimately so I can't
be past it.
So I'm going to do colon to get into command mode and then I'm going to type slash ultimately
slash meaning search for the word ultimately.
Then I'm going to do another slash and then I'm going to do M for move.
Where do I want to move this line that contains ultimately?
I want to move it to the end of the document.
Let's just do the dollar symbol.
That means move it to the very end.
And there you go.
It searched for the line that contained the word ultimately and it moved it to the last
line.
I want you to undo that and put it back in its correct place.
And you could do fancier things with that same kind of command instead of searching
for the string of text, finding that particular line.
I could search for a string of text and then select one of the lines around it and move
that line.
For example, once again I'm going to do colon slash for search and we'll search for the
word ultimately.
But this time I'm going to do slash and I'm going to do plus one M meaning find the line
that contains ultimately and then plus one meaning I want the next line.
I don't want the line with ultimately.
I want plus one lines.
So I want the line with a Lackardy that begins with a Lackardy here.
Find that line M for move.
Where to move it?
Dollar symbol of course would move it to the end of the document.
But maybe I want to move it two lines up.
So I'm going to do minus two meaning go back to.
If I did plus two it would mean move it forward two lines, move it down two lines.
Now when I run this command it may or may not move it to where you think because when
I move this up two lines it's not going to be one, two, you know, you're thinking two
lines up.
Well that's that blank line right there.
Well that's not exactly.
Imagine you're swapping these, you know, in place.
So really it's going to end up above this ending case statement.
You see ESAC it's going to be the line above that actually is where it ends up I believe.
Let me hit enter and actually check that.
Yeah that is exactly where it ends up.
So let me U to undo.
So that is, you know, moving lines after you search for a particular string of text.
I'm going to go back to the top of this document GG to go to the first line again capital G
to go the last line GG to go the first line.
By the way cursor positions I don't know if a lot of you guys know this but to go back
to the last cursor position that you were at G semicolon.
So if I do G semicolon right now it goes back to that ESAC that ending ESAC statement because
that's where my cursor was previous to that GG back to the top of the document.
One of the really cool things about VM is visual mode.
Visual mode allows you to select blocks of text, selects multiple lines of text.
You can almost think of visual mode in VM as being kind of like a multiple cursors kind
of mode because you once you select all these lines you can then run the same command on
all the lines.
So it's a really powerful thing.
First of all let me indent multiple lines.
This actually doesn't require visual mode.
You can actually just do this straight in command mode in VM.
Say I wanted to indent this line here line 10 all the way down to the end of this array
line 43.
So if I wanted to indent lines 10 through 43 I would type colon for command mode I could
do 10 comma 43 that's simply a range lines 10 to 43 and then do the greater than sign
that's the right pointing chevron hit enter and we just indented lines 10 through 43.
You can see the lines before it were not indented the lines after it were not indented so that's
a really easy way to indent a block of text and you can always tell you know the line
numbers many of you guys are using line numbers in VM anyway.
So it's really easy to figure out lines what to what for running any of these commands
if you don't have line numbers turned on in VM I strongly suggest that you actually turn
on the line numbers.
One of the things that I've discovered with VM and I use this all the time in my scripting
or maybe I'm importing comma separated values from a spreadsheet I'm getting a list of items
or importing maybe a table from my SQL table or something you get this kind of list of
items and maybe it doesn't have punctuation and it needs punctuation or it has punctuation
and you want to remove the punctuation you know you often find yourself with a list of
items in lines and you need to add something to the beginning of every line or delete something
from the beginning of every line or add something to the end of every line that is something
that's tedious and a lot of work and a standard text editor but in VM makes this really easy
so this declare statement here this is an array an array in bash scripting typically
is something that's got parentheses and then inside it it's got a bunch of values that
are wrapped in double quotes and you can see that's exactly what is happening here but
of instead of having these array items as individual items maybe I just want it to be all one
item which would mean I would need to get rid of all the double quotes except the very
first one and the very last one so it's really just one big item in the array now how would
you go about doing this well they'll makes this really simple in a regular text editor
I would just have to go in here through the mouse or the keyboard get to every double
quote and delete it them I just get into visual block mode here to get rid of the opening
double quotes I would type control the to get into visual block mode and then just go
down selecting all the double quotes I went too far and then once I've got to the end
of the double quotes type D on the keyboard for delete and all of the opening double quotes
are now gone now I still have the ending double quotes to all of these lines so how do I get
rid of the ending double quotes well for me I would probably use a macro for this so let
me go up one line and I'm going to type Q on the keyboard for record a macro so Q records
a macro and then set it to any key you want I'm going to set it to two so you see at the
bottom it says recording at two so everything I do from now on is a recorded macro and what
do I want to record I want to record this command here J to go down one line and then
the dollar symbol to go to the end of the line X to delete the character at the end
of the line which is going to be double quotes that's the last character on each line and
then I want to type Q to finish recording that macro and now I need to run that macro
but we need to know exactly how many times to run that macro I want to run it from this
line here that starts with awesome that's line 11 and I want to run it all the way to
this line here which is line 42 so 11 to 42 how many times would that be that's 31 right
so let's try that so let's do 31 at two and it ran that macro 31 times and it removed all
of those double quotes now that me talking it through you know takes a little longer but
honestly just doing it I could have removed that beginning double quote and the ending
double quote from all of those items in seconds you know like seriously like five seconds 10
seconds it would have taken a couple of minutes to do that in your standard text editor and this
isn't a very long list imagine this was hundreds of items or thousands of items it would take you
hours maybe days to do that in a regular text editor the traditional way going through and
having to delete things now let's imagine that this array started life looking like this you
know it was just this one item here and we need to go back and actually add the double quotes at
the beginning and at the end of each line because that's a little trickier how do you go about doing
that well the first thing I would do is let's go back to this line here and what we need to do again
is to get into visual block mode so do control v and then select the next it looks like 30 lines so
you could do 30 j 30 down I need to go down one more so let's j one more time select all of those
then you need to get into command mode from here so do a colon and when you do a colon from visual
block mode selecting lines you're going to see single quote less than sign comma single quote
greater than sign what does that mean the single quote less than sign is the first line selected
the comma is just a comma the single quote greater than sign is the last line selected it's a range
right it would be like 0 comma 5 is a range from 0 to 5 this is a range from the first line I selected
to the last line selected I want you to do this on all of those lines basically and what do I want
you to do well I want you to do this norm for normal mode space capital I what does capital I
in normal mode do in vim it gets you into insert mode at the beginning of the line that you're
currently on so it's going to get me into insert mode on all of the lines selected at the very
beginning of the line and then what do I want you to do I want you to type single double quote
and if I hit enter on that we just added a double quote to all of those lines now we still need to
go back and add the ending double quote now can you guess how we would go about adding the ending
double quote well if you guessed very similarly then we're going to have to get back into the
command mode actually visual block mode first let's select all the lines actually I don't need
the line with quit because it already has double quote at the end so let's start with zsh and go up
to this line here because alacrity also is going to need an ending double quote so let's get it back
into command mode so from here type colon and then again it's a range from the first line we selected
to the last line we have selected again normal mode and this time in normal mode what do you want
to do I want you to go to the end of every line so the dollar symbol and I want you to get into
insert mode just a lowercase i this time because I want you to get into insert mode where we're
already at which is at the end of the line and then I want you to just type a double quote
and that actually did not work we get obviously an error there it actually inserted the double
quotes but it inserted it not at the very end of the line we're one character off so what I'm
going to do is I'm going to you to undo and then I'm going to type colon again to get back into the
command mode I'm going to do a up arrow to get back to that last command I did and what I want to do
this time is instead of doing the dollar symbol I I'm going to do capital A so in normal mode I want
to type capital A which means append to the end of the line double quote let's see if this works
and there we go so a little trial and error there I should have known that just I was not going to
do the very last character but capital A gets us that double quote at the very end of the line
now one of the most common things I do within VM I'm constantly typing CW for change word
for example if I go to the top of this document here and maybe I want to search for Derek but
maybe I want to change Derek so maybe I want to do CW for change word and I type dt instead of Derek
right let me undo that well I could I could certainly do that so I'm always doing CW for
change word you're often misspelling a word and the easiest thing to do is just CW and then retype
the word the correct spelling but what if you want to change multiple words that you've searched for
now this is a really neat command so searching of course is just doing a slash and then I'm going
to search for the word the the the the t-h-e because it's probably in this document a few times
did you know that you can actually change the search terms for example let me hit enter to
actually go to that very first instance of t-h-e now if I type CW I could change that word but
what if instead of CW I typed CGN CGN means change the next search match so change the next
match of t-h-e so CGN and you see where I was at on t-h-e disappeared I could type something new
maybe I want to type t-h-e all caps and I'm going to hit escape and then I get to see GN again I go
to the next instance of the and I could change that to t-h-e escape and if I wanted to do this
multiple times instead of doing CGN and then typing the word and escape every time I could just type
period on the keyboard what is period period means repeat the last command I just did so if I did
period and you see otherwise is now otherwise with t-h-e capitalized if I do period again the next
instance of the is the all capitals t-h-e and if I hit period one more time there's no more instances
of t-h-e so let me escape and I'm going to you to undo a couple of times to get the correct spelling
of t-h-e back into this document I'm going to escape one other thing that can save you all kinds of
time if you're constantly typing the same things maybe lengthy names of something
maybe you're always adding the same copyright or you're always referring to the same company
or foundation or something you know you can set up abbreviations in BIM for example if I wanted to
let me set up an abbreviation with colon AB for abbreviation and I'm going to set this abbreviation
FSF space what do I want the FSF abbreviation to stand for I want it to stand for free software
foundation with the correct capitalization I'm going to hit enter on that now let me just start
typing something here for example if I wanted to write something about the free software's foundation
instead of having to write free software foundation three words rather lengthy I could now just do
the FSF was founded in 1985 now did you guys notice when I typed FSF it immediately expanded
to the free software foundation that's pretty neat now sometimes you may not want FSF to expand
to the free software foundation for example let me type o on the keyboard to get into insert
mode on the next line I'm going to type the FSF space and then expands to the free software
foundation web address is FSF and then I'm going to do control V meaning don't expand this dot org
and you see that time it just keeps FSF as FSF it didn't expand it to the free software foundation
so abbreviations are really neat again if you find yourself typing the same proper names for
companies or places or in this case foundations I strongly suggest to you use abbreviations they
just make your life so much simpler and they save you a ton of work now let me delete those lines
there the last thing I want to mention is running shell commands from within vm most of you guys
know you can run shell commands within vm all you need to do is do the colon to get into command
mode type the exclamation point meaning what I'm about to type is a shell command for example if I
did exclamation point ls it's going to run a ls command in the directory I'm currently in where
this file is located and you know I get this ls here it really doesn't do anything of course I could
pipe that into this document you can do all kinds of really neat things by using shell commands within
vm but where it really comes in handy I found is how many times have you opened a file in vm and
started editing it and then you go to write it and it complains hey this file is read only because
you don't have permissions to actually write that file maybe it was a file that's owned by the root
user and you opened it as your home user how do you get around that well an easy way to get around
that is simply using shell command mode within vm now there's a lot of things you could do in command
mode to fix this problem obviously you could uh ch mod the file to get the correct permissions or
change ownership of the file or whatever you want to do but what a command a lot of vm users just
have memorized to get around that read only error is this command right here I'm gonna do colon w for
right of course space and then exclamation sudo all one word and that's basically saying hey this
next command is a shell command what's the command it's the sudo command space and then I want you
to run this command line a utility t t redirects output somewhere what where am I redirecting
the output to I want you to redirect it to the file I'm currently working in so just do the
percent sign and that is an easy work around if you ever go to do colon w and it says I can't write
to that file because you don't have permissions just try colon w space exclamation sudo space
t space percent sign now before I go I want to thank a few special people I want to thank the
producers of the show Devin Fran Gabe Corbinian Mitchell a commie arch 5530 Chris Chuck David the
other David Donnie Dylan Gregory Lewis Paul pick vm Scott and Willie they are the producers of this
episode without these guys you wouldn't know about how vm can save you hours and hours of work you
wouldn't know about it you also wouldn't know about it if it wasn't for each and every one of these
ladies and gentlemen these are all my supporters over on patreon because the distro tube channel is
sponsored by you guys the community I sincerely thank each and every one of you that help support
my work if you'd like to support me consider doing so look for distro tube over on patreon
all right guys peace eat your heart out vs code
