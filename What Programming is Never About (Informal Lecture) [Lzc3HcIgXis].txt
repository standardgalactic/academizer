Hello, Internet. Welcome to my first programming talk. What programming is never about? Buy
yours truly. My name is Abner Coimbre. I am 23 years old and currently working for NASA's
Kennedy Space Center in System Software Engineering for the Launch Control Center. If you guys
have seen movies where you have the firing room at NASA, we're about to launch a rocket
to save the world or redirect an asteroid. That's Kennedy Space Center. That's basically
where I am working. I'm one of the programmers for that firing room. That said, NASA does
not explicitly affiliate with or endorse any of the content that I'm going to be presenting
here in this talk. It is solely my content and they are not affiliated with it necessarily.
I will also not be discussing any NASA-specific or space-related subject except maybe in an
experiential kind of way like anecdotes and stuff like that. I have had many friends that
I've met over the years who are interested in programming like I have been ever since
I was 13. Recently, they have been asking me whether I work or in other places, hey,
why don't you give us your two cents on what you have found to be true or what you have
found to be increasingly true about programming. I'm like, okay, maybe I should do an informal
kind of talk. You can begin by answering that question, what have you found out to be true
about programming? By stating first what programming is never about or what it's just not about
in general. That's what I'm going to do basically. I have a notebook. I have some notes pretty
much with a map to keep track of stuff. I also have a timer. You can see me obviously moving
in this direction, looking at my notes to see where I am or stuff like that. I apologize for
that. Moving on. In order to say what programming is to me or what it's never about, I have to
say what it is to me, what do I think programming is and the best way to do that is to actually
program like now. If I program something, no matter how easy it may be, you guys can sort of get
an idea of what it means to me and then we can go on from there. Now, what is programming in
reality as opposed to what I think? Here are some definitions that I found interesting and that I want
to share with you guys. This one is from Dan North. He is somebody who is creating courses. For
people who have been taught some methodologies in programming that we found out to be not very
helpful and is trying to reason them out of those kinds of things, agile methodologies and so on and
so forth. He talks about programming in the following. Well, it seems to me the most successful
programmers I have encountered don't craft software. They write software in order to move
information around in order to get something done. Information is the real deal. The software just
defines the space that it moves around in. For those programmers, success is about getting
information from point A, what's currently languishing to point B, what's going to actually be
useful as quickly and effectively as they can. If you noticed, this is pretty much what I was
doing in my programming. When I created the pixels for the screen, I was sort of having some
information there and if I wanted to change that data into something else, I would swap the pixels
into a different color in order to create a square or in the case of the spell checker, a
sentence, a paragraph or whatever, the highlighter when something is spelled wrong. And then I would
transport that data, even though if I let somebody else do it, some other library, I transport that
data somewhere else to the screen, et cetera. Another definition that's interesting, this is
Noelle. I don't have his last name, unfortunately, but I will ask him for it and this will be in the
video description below. Programming, by definition, is about transforming data. It's the act of
creating a sequence of machine instructions, describing how to process the input data and
creating specific output data. Again, this is pretty much straightforward. If I have some input
data, let's say something the user is typing, that could be transformed because that's pretty much a
signal. It can be transformed into something that can be processed as a word. If the key that I press
was A, it will signal that for me and I can create some other set of data based on that. I can create
a character A and store it in an array, for example. So I'm just processing input data and I'm
creating some output data that will be transformed into some other form of data until finally it's
something that the user can see, perceive, or if it's a simulation, something that can create an
interesting simulation. Warning. This doesn't mean I'm writing in assembly or zeros and ones all the
time, just because I don't have to program that way and using a very low-level language in order to
understand that the programming is about this kind of moving data around and transforming it,
data being whatever, the fonts, the audio, it's just data. I really have to use a low-level
programming language to sort of understand that. So that doesn't mean that I'm writing assembly all
the time. Now, what is it never about? If you noticed, it really is never about the code. Now,
before you go crazy on me, while it is true that the programming language we use as the tool for
engaging in programming expresses like what it expresses constraints and how your mind solves
problems, because the programming language does that to you. Yeah. It is still fundamentally not
about the code itself, but rather what you did with the code. And, you know, given this talk,
you kind of found this to be obvious. But if you go to educational materials,
books, some programming courses in some colleges, not everybody, but there's a trend,
they place emphasis on code. And it's pretty bad. And I think we're going to need some story time
here of why it's pretty bad. Three short stories. Let's start with the video game health bar story.
Again, a lot of books, a lot of educational materials focus on the code, whether it is
pretty in the sense of like, are you calling, are you writing the variables and your data names in
a way that is consistent, which is important? But why are you not? Why are you making lines longer
than 120 characters? Why aren't you making your code model the real world? Right? Like,
in my previous program, if I was creating these bit mop, these fonts to show on the screen,
these sentences, then I know that they're just pixels with some attributes to them,
some colors and some positioning. So I write the program doing the things necessary,
like moving the sentence to the right position or moving the carrot to the right position,
by creating some computations so the user can see that. But they would, you know,
since they're focusing on the code, these materials, they always say, why didn't you call
your code or the code that processes this font, you know, font renderer, blah, blah, blah,
and then why didn't you call functions like, oh, display on screen for user. And you should
probably do that in a camel case, which is like, each word starts with like an uppercase letter,
and they place a lot of emphasis on that. And like calling your things into something that
kind of models the real world, even though the computer does something completely different
from what the real world would do. If that makes sense, that's pretty obvious. So for the
video game health bar story, this was back when I was, before I left programming school,
I had a friend, you know, in these programming classes, I got some interesting things out of
college, but out of the programming courses, since this was the thing that was happening with the
code, with the, you know, pretty code, and, you know, the beautiful camel casing notation
and stuff like that, I really didn't pay much attention to those classes at all.
So I would sit in the back of the row and just, you know, do the exams and move on.
But I did make a friend, a very good friend who was also studying software engineering.
And, you know, we became partners for a game. And this game was a regular at any other game
with where the main character has a health bar. And so when I started programming,
because we needed to, for that part of the course, we had to like make the health bar.
And then decrease it and increase it if it gets hit, stuff like that. So I'm like, okay.
A health bar is really just a chunk of green, usually green pixels spread out horizontally
across your screen. And it'll change its size, if I think of it as a rectangle maybe,
it'll change its size depending on what collisions happen with the player. If it was with an entity
that was, you know, evil or tried to hurt me, right? And it was like, okay, this is pretty easy.
And actually, I had to do this in Java. So Java already has a lot of facilities for you.
One of them was a rectangle. And I'm like, okay, a health bar can be a rectangle
of a single color. So I made that rectangle. I made it green whenever I really had code for
like the collision. So if the player got hit, or that collision event happened, and I would change
the size of the rectangle, I would reduce it. If he stumbled across a power up, I would increase
the size of that rectangle. Interestingly, video games go in loops, right? Where each loop is a
frame where it goes into three steps, you grab input from the player, you simulate information
based on that input. And then you kind of show the results on the screen. So when I would reduce
the size of the rectangle, it would go really fast, one frame after the other. So I kind of
wanted to make it smooth. So I would just decrease the size of the rectangle over time,
because that's like the reasonable thing to do. That's what you have to do.
And so I did. And in about two hours, I had a working nice animated health bar.
And yeah, that was not too bad.
You have this video game health bar. And the problem really was, after a week, I did it in
two hours. Not that I'm the best. Anybody could do it in less than two hours, especially in Java.
You know, I was fascinating and stuff. My friend took a week.
So he kind of asked for help at the end. And I'm like, what's going on? And when I look
at the code, it is this video game health bar for the player class. That was the name.
And it was full of these functions. And they're usually called methods,
where you call that, and then it performs the computations for you.
For those who don't know. And they would just call these weird things, like increase health bar
point by one, decrease health bar point by one. Somebody else made a joke like, oh, why didn't he
write, realize the futility of existence when the player died, call the function that,
and stuff like that. And he had this beautiful, I guess, according to the people who emphasize
on the code, this beautiful code, I suppose, verbose and expandatory and whatever.
But he didn't know how to make the computations or how to decrease the size of the health bar.
He didn't even know that a health bar can be just a rectangle. He was just thinking
about the principles and the rules that the professor shoved down his throat.
And I sort of saw this like blindfold in him. He just didn't know how to proceed
after he made the structure. And he did the structure, but he didn't know how to
make the computations because that's not the focus of the educational materials for the most part.
What I said to him after that was like, dude, why don't you just grab the rectangle class,
call it, call it health bar, call the rectangle health bar if you want to.
But it's just a rectangle. You can move the X and Y position if you want to.
When the event of collision happens, you already have that code, go ahead and say that the size
will be smaller when it gains a health point or something increases as a rectangle. And
when he heard me say that, I cannot forget because he just laid his face on my shoulder
side and a little bit of tears and stuff like that coming out of him.
And this is when I said, I have got to get out of here. I have got to leave programming school
and I have to go work and do something a little bit more productive and not spend so much money
on this kind of stuff. And okay, I'm going to end the rant there. This is not true of every
place, but it is a trend that I've noticed in my years of working and being in school.
That's pretty bad. Don't get too scared. If you want to study computer science and stuff
in, say, an American university, that's fine. Just be careful with the programming courses because
it's becoming increasingly true that the material there is not like the best.
Story number two, a screen saver detail. It's pretty much, I'm going to skip it.
Obviously, what it's about, it's usually when I talk to people, I ask them, how would you
implement a screen saver or a slideshow? I would tell a young programmer or something, right?
I mean, I'm young too, but somebody who's like 17 or something. How would you do this?
You're in college right now. You're a freshman or you're a junior and you really took
advanced programming. How would you make a screen saver? And again, we go back to the
classes and the code and how it looks and what to call it. I'm like, no. A slideshow is just a
transitioning between images. And you can see an image as a matrix of n rows by n columns where
each grid is just a pixel. That's finite structure, which means the computer can go ahead and transition
it by swapping pixels from one to another. And you can ask other interesting questions,
like what if one matrix is larger than the other? How do you transition between one image
as smaller than the other and stuff like that? When you actually implement the code,
make the computations, it's interesting because you'll see the transition happen too quickly,
which means if you know about programming and what it is and hardware, you kind of have to
sleep the CPU in a naive way if you want to, between rows. So you swap pixels between one
row and you pause and you go on to the next row. And then you swap the pixels and you go on to the
next row. And then you kind of see this transition happening. Which is very interesting. And you
can ask other interesting questions, which has nothing to do with the code, but you do have to
know what if you want to do the transition from left to right in a vertical motion. You can't
swap complete rows and pots. You have to swap complete columns and pots. What if you want to
make it diagonal? Well, you might have to increase, you know, start transitioning and going all the
way back and then start shrinking again because, you know, diagonally, you're growing and shrinking,
if that makes sense. And then once I tell them now, it's like, oh, this isn't really hard.
If you didn't understand what I said, go rewind, listen to me again because I'm talking pretty
fast here. It's, you know, it's straightforward. It's not difficult. But, you know, number three,
this is the part that made me kind of want to do the talk. It's the poor electrical engineering
students who never saw it coming. A friend of mine who is not a computer engineer or, you know,
he was in school as an electrical engineer. He wasn't doing any kind of programming.
But he had to do some programming for some of his, you know, hardware, MATLAB, stuff like that.
And he was pretty good. He wasn't indoctrinated in this kind of like cold as everything thing,
right? And, you know, he did pretty well. His code wasn't bad. I mean, his implementation,
his problem solving skills weren't bad. So we actually got the job done. But when he would show
some of my friends, or even full timers, already programmers, his code, it was again, placing
emphasis on, oh my God, how could you use a single go to over there? Or how could you ever, you know,
use so many nested ifs or fours and stuff like that? That's kind of, and then he came to me like,
you know, kind of depressed, thinking that he did a good job and he did in problem solving.
But, you know, the fact that my fellow peers, I'm not talking about NASA here, they're spooky,
smart people at NASA. I'm talking about before NASA. And, you know, you always have one or two
people, even at NASA coming in and they kind of have this idea, but we quickly get rid of it,
right? But yeah, I still have a lot of friends who, you know, stayed in college and stuff like
that. And it's just kind of depressing that this is the workforce that we kind of might get,
not because it's DERFA, but because the educational materials are kind of this bad,
right? Hopefully that didn't depress you. It depresses me every time I talk about it.
But, you know, if what you need to do to solve a problem in programming, again, rendering something
on the screen, simulating a rocket launch simulation, if, since you're not thinking about the code,
if you're actually programming per se, as it's supposed to be, then you know what steps it's
going to take to get a simulation done, right? And that might be a thousand lines. And if nobody
else is going to use that, then you would stick that thousand lines in the function because that's
what the function needs to do. And again, when I show this to other people, some of my friends,
if I can show this to them, if I'm allowed to, they will say, oh my God, a thousand lines. And
I'm like, no, the books and some of the courses going on is just plainly horrendous. It's heinous.
I cannot take it anymore. And we have to do something about this. But don't take it just for
me. We are going to talk about Handmade Hero. If you don't know about Handmade Hero, you should
go right now, handmadeheroes.org. Casey Moratori is the person in charge of Handmade Hero.
He is also well known for many other things. He will be in the video description below.
This is basically a series, a programming series where you do everything from scratch,
using the kind of straightforward problem solving mentality that I've been talking about.
Now, a lot of students are interested in what he's doing. So they ask questions at the end of
a stream because this is a programming stream on Twitch that I'm doing now.
And yeah, so he gets a lot of questions as well. And I have some audio clips of him answering
those questions. And I'm not blaming the students or the person who asked this themselves.
What's problematic is the contents that they've been shoved down their throats, like I said
before. So I'm not really blaming them when these questions are asked, just to kind of make that
point. So here's some of the questions while I drink water because I'm half drunk.
Let's play some of the audio clips. Again, this is what you get when you place the emphasis on the
code rather than the problem solving. Here's one of the questions. Something that I said
that programming is all about data and transforming data. And the way computer handles data is with
memory. For some reason, people are scared about memory. And they're always saying, you know,
memory is scary. And Casey basically handles memory in a very straightforward way. So people ask him,
you know, why are you managing memory yourself and stuff like that when you should have the
language do it for you, stuff like that, right? Hopefully you can hear this. I'm loading him.
You're using a lot of pointers here. How are you managing the memory regarding leaks and
umr, etc. I think it's visibly we shocked. I'm not really sure I understand the question.
So I guess I'll kind of give a general answer.
The way we're doing things, we just use a memory block. So we don't have we don't have any memory
leaks. Like that memory got gets fleet free at the end. There's no way we can leak the memory.
So there isn't. I mean, this is something that I guess that I don't know, you kind of just have
to watch and see how I do it, I guess as we go forward. But people often ask me this question.
They're like, how do you manage memory? Or how do you deal with garbage, not having garbage
section also stuff. There's no memory to manage in a game. Like games typically just
they create their stuff and then they run. There isn't any memory to manage. It's usually just
people sort of misunderstanding the basic way that you should probably program things. I feel
like when you have lots of memory getting allocated and stuff like this, that has to get managed and
freed in that way. And so if you'll notice, I've never allocated any memory that has to get freed.
I've never done anything that requires tracking of pointers or anything like that. And that's
intentional. This whole game will be structured in a very clean way since that sort of stuff
never happens. So there won't ever be any leaks because there won't ever be any allocations,
if that makes sense. When we create the world, the world will get created as one in this in this
block. And when you close that down and go to a new one, it'll just jettison the entire block
as a whole and start a new block. So you never have to worry about freeing forests of things,
which is where you need garbage collection and stuff to help you if you are getting confused
or whatever. You just don't ever do those things. And so yeah, this is why a lot of times I guess
people find it weird, but I don't think about memory management. Memory management isn't an
issue. How much memory I'm using is always an issue. But that's because I always try to think
about keeping things constrained. I always try to think about let's keep everything inside like
64 megs or something like that. And that's always something that you have to work on and think about
because using how much memory you actually need is a problem. But freeing it and managing ownership
and that sort of stuff is just you should never even think about that or even have to think about
that. If you're thinking about that, you probably did something wrong in your architecture and you
should read it if that makes sense. And so you'll just have to kind of trust me that that's true
and you'll can see as I go that I always have a good solution for that at all times and that I'm
never in this situation where I'm like oh and then we have to free the thing and oh but that
points to other things and those have to be free. You never like don't don't do that. Just never
ever write that code. Because it's basically like it's not necessary and when you write it
either you have to use a language that has garbage collection because you can't manage it yourself
because it's too complicated or something. And that incurs all these costs for the garbage
collection and all these other things that don't have to happen. You're just wasting the user's
time running all that stuff like the garbage collector. Or if you write any language without
garbage collection you're making a ton of more work for yourself having to remember what's getting
freed and what's not or using all these smart pointers to do all these checks and those checks
incur extra costs and you're just incurring all this extra cost all this extra work that the CPU
does or that you're doing mentally all that stuff that never needed to happen. So just don't
write that code like never write that code write it this way and then you never have to worry about
it. And then you never have to worry about it. Here's another question it's not as long and that
he answered as well and think about again the question that the user is asking. It has to do
more about emphasis on the code and then Casey kind of replies back in a way of like
problem solving more about than the code itself. So yeah let's find it over here.
Here you go.
What's your threshold for number of function parameters before putting them all into a
single structure as a single function parameter? If you're calling a function you sometimes pass
values into it sometimes those values can be massive you can pass in 10 values 15 values and
then on the code it looks like an extremely long you know parameter list because it is a long
parameter list and the user is asking like how when do you stop and create a structure a way to
pack that information it's like you're going to only pass like one single thing instead of those
15 things and this is his answer. I don't really have a threshold for that. I'm rarely thinking
about that when I do that. What I'm thinking about is whether there will be a lot of times when things
will get passed through as that structure. So basically if I think of a lot of people will be
passing around the same group of stuff then I'll condense it into a structure but if a function
itself just happens to have a unique set of stuff even if it's 30 long I don't care I'll just use
them as I'll just do them as as individual parameters so it's not really about how many
how many parameters a function has it's whether those things can be bundled together in ways
that lots of people use because then that just condenses the code and it's nicer. Last audio clip
so you can sort of get the idea of the state of the education materials out there. Again the idea
of like beautiful code clean code. You might be wondering well I don't want I don't want you to
problem solve and then have a messy code and then Casey already answered that and in a way that I
don't think I can answer he did it fantastic so this is the last one I'll put and continue with
the talk we're almost done actually um so I gotta manually scrub to find it
almost there found it real real chunks that that happened and by the way this is a good
point to mention this um somebody was saying in the on the forums a while back that they felt
like the code was too messy and again I really want to stress the fact that uh I don't really want
to try to tell people that the way that they code is wrong because you know I feel like that just
leads to a lot of pedantic arguments that aren't particularly constructive but what I can say is
nobody in my mind nobody should be thinking that this code is messy this code is exactly what it
should be it's code that we are writing to figure out how we want to structure our program and if
you're spending time right now thinking about how to make this code not messy whatever that means to
you um then essentially what you're doing is you're wasting time right you're spending time that
should have been spent thinking about the problem thinking about the code and the end state the end
goal of your program is not to have killing code it's to have good working code cleanliness has
nothing to do with those things if you have the ugliest code in the world that someone would
look at and call very messy but it has no bugs and runs great then it didn't matter right and so to
the point that we care about how clean code is we only care about that as in so far as it has an
effect on our end product and so far as it has an effect on our end product that is the problem
we are trying to solve and what we know right now is what we're trying to do is just define the
structure of the code so none of this code will ship in the game or if it does it's because it got
pulled out and like changed around a little and you know put in its proper place and so we know
that it will clean up over time as we know what it should be but prematurely cleaning it it's actually
worse than just wasting time it may lead us down wrong paths and and end us to end up having us to
making us have to do gyrations to make stuff work together because we've segregated it in a bad way
too early on and so i really want to stress that fact that like if you if if the way you look at
code is that you think of it as messy or clean that is a very bad habit in my opinion um and so
all i can really do is say as strenuously as possible stop thinking that way instead think about
the problem you're trying to solve when you are done and to your satisfaction solving that problem
in however messy a way as you can then that is the time to start thinking about cleanliness of
code and what we mean when we say cleanliness of code there is can i find the bugs in it easily
is it easy to read and understand is it easy for me to reuse in the places that i need to reuse it
those sorts of things and never some set of prescribed things that somebody said was clean
code because there is no such set there is no there is no set of rules that tells you whether a
particular set of code is clean based on what the code looks like it's only based on what the usage
looks like and what the debugging process looks like that actually tells you whether a piece of
code is clean or not and i really can't stress that enough it's a big difference between good
programmers and bad programmers is whether they understand this right um that's almost a summary
of my talk pretty much what he just said right now how to solve it are there any potential
solutions for the state of the programming education materials out there um yes we kind
of need experts we need people who have programmed for a long time they see it as their craft or
their trade their skilled at it and they need to go ahead and program and show people how it's done
and that's already happening right there's there's a lot of programming streams on twitch
there's a lot of blog posts from expert programmers showing how they actually problem solve using
code using programming activities so that's very important that's very nice however and
i need to go full screen here i have my shut up
how do i go there we go okay however there is one thing called
the curse of knowledge uh this is from steven pinker you guys should know him he's a fantastic
scientist um in this recent uh book sense of the sense of style he talks about the curse of
knowledge and what happens is once you you're adept in your rear skilled at a craft you adopt
terminology that uh you forget that a lot of people that are beginning don't really comprehend
and even if you explain it let's say once they kind of need to see where that terminology came from
before they actually started using it naturally um then programming programming is not an exception
right we have a lot of uh terminology like exception and uh bitmap fonts what is a bitmap
pump but just pixels right um texture atlas which is also just a chunk of pixels but they're used
in different contexts and that's why we give them those names but people who're starting they kind
of don't know that because they don't have the experience and they don't see why it's called
that until they actually start doing the things that sort of say oh this is like a texture atlas
i'm gonna call it an atlas you know so the curse of knowledge is very pervasive um handmade hero is
kind of an exception he he's very good fantastic at explaining uh many of the things um even so the
the subjects are pretty difficult if you kind of want to transition between all of the emphasis
that you placed on the code back to kind of problem solving that takes a while and i have
gotten a lot of emails um i'm not even kidding over a hundred i'm not kidding across these years
of me programming over a hundred emails and conversations from friends and you know messages
and stuff you know is there a book um is there a book that i can use in order to sort of program
and just program like not focused too much on the code because if you program problem solving
correctly the code kind of you know cleans up over time like casey said so is there a book
that i can use that sort of teaches this kind of thing this data-oriented design kind of thing and
kind of the answer is that there isn't really i've looked for a good book on data-oriented design
using let's say a language that allows it like c um and there's bit there's bits and bits you know
here and there there's blog posts and articles um for like i haven't really seen a good book on that
and so when people are asking me like potential solutions for this again the experts like
casey mortuary from handmade hero um jonathan blow using creating his new programming language
which you'll see in the video description you know a lot of people a lot of experts working hard
to sort of you know improve the quality of the materials of the education materials for programming
but there hasn't really been a good book about it and
if i can go to the next slide that'll be awesome um we have to kind of bridge the gap and have a way
for people to like a kind of intervention like for people who who you know we're dogmatized with
some of these principles and rules that kind of don't make any sense and sort of go back to this
kind of straightforward programming um we need a book for that kind you know and
this is pretty much the end of the talk i'm just going to say what i want to do
as part of this effort to try to make more you know more interesting quality material
for programmers um i used to be a reviewer for this book that you see on the screen
um packed publishing is a fantastic publisher they embrace open source material and i was a
reviewer for one of the books uh this book is actually a graphics engine book um it's a wrapper
for open gl in java it's like the java equivalent of unity um don't ask for more i will put stuff on
the video description and then you can there's also my website so you can go and actually see
more about it um so why am i showing you this because i kind of personally want to do um
this is a working title i'm not sure i'll use this title the complete guide to data
oriented design in c from game programming to rocket launch simulations what i kind of want
to do is use my experience which is admittedly not that much i'm only 23 my experience with
programming and and distilled that into a book form but like being aware of what the course of
knowledge is because that's something i've studied for a long time and i kind of want to show people
how to get to an understanding of the terminology for programming um and then have used cases of
experts like let's say casey who writes a program and discusses a program in this book um after i
sort of explain the topics and they follow through that program and at the end you have challenges
like you know it's time it's time for you to practice using this data oriented way um
and that's interesting that's a very interesting thing it um these challenges will be solved by me
hopefully um as programming streams maybe or as videos so when the user has read about the
terminology when he has read about what data oriented design is in some specific topics simple
topics going to more advanced topics they can see the use case from an expert an expert doing a
program on the book and then they can do challenges in which they can check against the answers that
i've provided let's say uh video form the topics i might cover is game programming rocket launch
simulations um pretty much anything when if you know data oriented design i kind of don't even
like the term data oriented design because it's just programming really if you remember the beginning
of the talk um but yeah we gotta sort of differentiate this between everything else so
that's a working title and to show how serious i am about this um i have recently been contacted
by publisher packed publishing and i was offered uh to become the author for a
java modular programming book it's literally the developing enterprise applications in java
to deploy on a server create web applications using java in a modular way by modular they mean
reusing functionality so you don't repeat yourself right um i've been offered that and i accept it
because in the contract it says if i do other works and by other works hint hint this book
they are they might be interested in publishing this is my attempt at making things a little bit
better um you also noticed that i was very ranty and i was very passionate about some of these things
because i am and that doesn't mean i'm not open to arguments right counter arguments and i'm open to
different types of comments i don't mind and i can change my mind but this is what i want to do
and i'm really serious about it because you guys uh the people at least in the chat know i do not
enjoy the programming language of java because they restrict the way you can solve problems using
the computer using the hardware using the memory right i don't really like java at all
but i'm still gonna go into the lines then and write this book and the most straight
forward way as possible using java so it's a good book and then uh use that as leverage to
create this other one um and you know again with the company pack publishing the um embrace open
source you can download the code it's drm free so it seems really good it's going pretty well um
they've been really generous with the royalties um yeah it's a very interesting thing so if you're
interested that's kind of my thing um and i want uh to encourage you uh to sort of do your own thing
as well like what can you do uh to show people you know what programming is really all about because
it's actually really fun um it's really interesting and i kind of don't want people to be blindfolded
and feel like my friend on the video game health art story just like be extremely blinded to uh the
truth of how straightforward and easy programming can be and fun challenging in a way that is not
dramatic so i really appreciate it thank you so much for this uh time of yours to watch this and you
know i will see you around my twitter is exactly my name my first and last name like the website is
just at abner coimbre if you want to keep you know yourself posted with the book and with
other stuff that i might be doing and make sure you check out uh handmade hero because it is a
fantastic series if you want a solution now uh handmade hero is one of those solutions um and
also keep track of jonathan blow his programming language uh jai which embraces this sort of data
oriented approach which is you know the approach uh so again i appreciate it and i will see you guys
in the future
