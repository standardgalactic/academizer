Hi, YouTube, and Happy New Year. Today I'm going to do a quick presentation about why
I think FORTH is a great programming language to use, especially for hacking, tinkering,
and using systems that have really limited resources like microcontrollers. I did a quick
search on YouTube for any videos like this, and surprisingly I didn't find anything, so
hopefully this is useful to a lot of people. As far as myself and my use of FORTH, I started
with it around 2005 when I was looking for a good programming language for Palma systems,
and there was a really nice environment called Dragon FORTH that I used a good bit, and since
then I've used FORTH and MS-DOS and Linux for hacking on a variety of machines, and in the
future I hope to use it more with microcontrollers like the ATMEGA328, the Arduino ESP8266, and
so on and so forth. So with that background, I'll give you the first reason I think FORTH
is a great programming language to use, and that's its reliance on the stack and reverse
Polish notation, both of which should be incredibly familiar to anyone who uses an HP calculator.
For those who aren't, I'll explain what both of these things are. So the stack is where
data is manipulated in any FORTH function or word as it's called, and this is a first
in, last out, last in, first out type system. As you enter a number in your FORTH interpreter,
it goes on the stack, you put another number, it goes on top of that, and whatever you put
in last comes out first. This is great because when you're writing a subroutine, you have
to think parsimoniously in terms of stack manipulations, and I guess in a way it's analogous,
kind of sort of to having local variables inside your function. Although there are variables
in FORTH, there's these quick operations you do within your words or the basic subunits
of FORTH code. So the second thing I mentioned was reverse Polish notation. This is weird
for humans because we know the order of operations, 1 plus 1 is 2 and so on. Well, in FORTH, 1
1 plus gives 2. Why do you things in this post-fix manner? Well, this makes more sense
for a computer. First, they have the data in place and then to know what operation to
perform. So this is a lot easier and quicker for a computer to process compared with a human
and thus it allows for faster mathematical operations. So what's the second great thing
about FORTH? It's an interpreter, it's a compiler, it's an operating system, and it's an IDE.
It's a whole operating system all in one. I think one of the things that astounded me
about FORTH when I first started using it is it's interpreted but it's also compiled.
And you can see that in everything else I mentioned illustrated in this picture from
thinking FORTH on the left where these two people are noticing that FORTH's both a low
level and a high level language as well as an operating system. You can even easily integrate
machine code into FORTH and it's just a step more complicated than assembler. On the right
I have an illustration from thinking FORTH in the top and then starting FORTH on the
bottom for how the compiler and interpreter in FORTH work. The first one on top on the
right is just showing you how the compiler handles different words, whether they need
to be compiled or immediately executed. And then the bottom shows the difference when
you're writing FORTH for what a compiled word would be versus a word that you're executing
in the interpreter. When you define a word to be compiled you start with a colon word,
the name of it, yards to inches and then the next words that manipulate the stack. So you
take whatever's on the stack, put 36 on top of that and then multiply that to convert
whatever was on the stack. Presumably yards into inches and then the same thing below
that for feet to inches. FORTH though is also an interpreted language. So when you don't
have the colon definition, you know, you put in your semicolon that ends the definition
of the word and you just want to execute something, you can enter in a number that goes on the
stack, 10 yards in this case, do that yards to inches operation that multiplies 36 by what
was on the stack and voila, you see there's 360 inches in 10 yards. So you can interpret
these words but they execute very quickly because they're compiled. It's not an interpreted
language like basic, it's an interpreted and compiled language, super cool. It's also an
operating system and IDE in the sense that there's memory operations, there's disk operations,
there's an editor, there's the ability to go through the dictionary which is the list
of all the fourth words and look at the definitions of those and in more advanced fourth systems
there's even help that you could access. Now a third strength of FORTH is three different
higher level concepts that kind of go together. Factoring, abstraction and extensibility.
In general when you write a structured program you think in terms of subroutines, you have
all these tasks that you do and maybe there's a sub-task that you do repeatedly and you
can nest these different sub-tasks. So that's one part of factoring but I think the key
thing in the principle of factoring that you use a lot when you're writing fourth code
is you think very carefully and parsimoniously in terms of how many sub-tasks it takes to
solve your problem and complete your program and you think about how few operations you
can get away with with each sub-task and if you haven't already thought about that I think
just the process of doing factoring when you're writing a fourth program helps you define
your problem very cleanly. So that's the idea of factoring. So what do I mean by abstraction?
Well fourth has a really simple syntax, it's just words and spaces pretty much. It's very
simple data types and data structures, just variables and arrays and putting bytes in
memory. So if you need more complicated lexicon or data types you can define that with incredible
flexibility. In the middle is an illustration from thinking fourth as well that's of a
robot that's pouring coffee and showing the different layers of abstraction in fourth
program that would control that robot. There's the robot process lexicon and it's movement
lexicon and then below that the words that would be used for trig conversion and reading
sensors and then controlling stepper motors. So different layers of languages that at root
are expressed in fourth but are all built up upon fourth words. It's building up, now
that gets the extensibility. Fourth systems can be really small. The pygmy fourth system
I use in MS-DOS is about 10k and then you build new word definitions on top of that.
It's a very easily extensible language and can easily break it apart into different modules
say that you find in a word processing application in this illustration on the right from starting
fourth. Now fourth and final advantage to using fourth, fourth advantage for fourth ha ha are
its portability, its high speed and low memory usage. It can truly run on anything. It could
run on a washing machine theoretically. On the left is this humorous illustration of
a fourth word from starting fourth for running a washing machine. It washes, it spins, it
rinses and then it spins. It seems funny but if we imagine this washing machine had
an LCD display and complicated controls and maybe an arm cortex or teensy board in there,
you could probably write a fourth word on your washing machine to control the washing
machine. Maybe someone out there has done that and if you have please let me know in
the comments. Another example of how great fourth is as a quick and portable language
was its use in many space applications. The one I'm showing you in the middle is the
remote manipulating system simulator. What's the remote manipulating system? That's the
space shuttle robot arm used to operate on satellites. Now there was a copy of it used
for training at the Goddard Space Flight Center in Maryland and the team had 60 days to design
the software to run this equipment and all its computers, coordinate both together. They
wrote this in fourth with some C as well and were able to complete it and astronauts who
already used the RMS could use the RMSS with just a few minutes of explanation of the differences.
So that's one fourth success story. And then just going into applications that you all
might be, with which you all might be more familiar, on the bottom right is a fourth
development system based on the ATMEGA 328. So an Arduino-like system with all its GPIO
pins exposed. You could drive LEDs from that and in a interpreted way immediately interact
with different devices and tinker with that microcontroller without compiling code, uploading
it to the system and so on. So with that I finished my presentation and I'll leave some
further resources in the video description, also justifying fourth and giving some nice
tutorials for the language. All the pictures in the presentation were from the great book
Starting Fourth and Thinking Fourth by Leo Brody which are great tutorials by themselves.
I hope you've enjoyed this video. Please like and subscribe. I have some other videos shown
on the panel below that you might like to enjoy. And once again, thank you for watching.
