So last couple of days, I haven't been streaming very much.
I've been really busy at work getting things ready
and getting my Mac up and running
and testing out different virtual machine configurations,
seeing how much core days they can actually run on there
as well as playing around with the last to search
and other thing.
But here's the stuff that I've written about since then.
What I wanna focus on tonight is I have to update
the boost content, the first few days of the boost content
to cover Mac, Windows, and Linux.
And in the past, we've only done Linux.
And let me explain what I mean by that.
I mean, if you wanna go read it,
you can go read this Zet right here.
It's in my Zet and ArtifactRub slash Zet on GitHub.
But this gives the summary of it.
To be a technologist,
you need to know Mac, Windows, and Linux.
Huge revelation to most people.
But you'd be surprised how few people in the tech industry
actually know how to use the operating system
that they don't already use.
So you get people that are very tribal
about their operating systems and that hurts them.
So I mean, so if the goal of the boost is to get you up
and running with the tools and practices
and programming of a technologist,
then we need to make sure that we cover all operating systems
as the most essential tool in your collection.
So it's important to note that, like, for example,
Windows owns 3D, SolidWorks, anything in a 3D space.
Windows invented, Microsoft invented 3D,
so you gotta use it.
Macs are the best for writing and sound engineering
and media and things like that.
And then, of course, Linux servers
for hosting everything, the internet.
But I think it's important that we talk about the fact
that you actually don't need Linux on the desktop at all.
People like the Linux on the desktop.
Linux on the desktop is fun and all.
And I'm not saying don't do it, but it's not essential.
What is essential is learning Linux server.
The last thing I wanna say about this is that,
you know, I like making this comparison
to Dr. Strange, the ancient one,
how she learns dark magic in order to fight off,
you know, the evil.
And people get kind of mad at me for saying
that you should learn Windows and Apple.
And God knows I don't love Apple,
but you gotta learn this and where it's going.
But after reading about KCLI and VRT Lightning,
I really wanna back the Livert project.
So I'm not sure how much relevance this has.
I actually have other priorities before I come back to it.
So I'll be putting this aside.
If you have the choice, I would get a Mac laptop, period.
And I would get a Windows desktop, you know,
high power, like for gaming and stuff,
and as well as other stuff.
And I would have a Linux server.
And you can have a Linux virtual machine server
on your desktop or on your Mac.
Then Mac does on Windows
because you can't run Mac on Windows, right?
Mac has hands down the far superior user interface
and command line.
Plus you're getting an experience with Unix,
which I recently discovered was an important difference.
Bad information out on the internet
about commands and stuff that are not based
on the Unix versions of the commands.
Here's three examples.
Send-I is a GNU thing.
Grep-P is a GNU thing.
Make directory-P is a GNU thing.
PS is a GNU thing.
If you learn it wrong, you'll be frustrated
for technical stuff.
Then you can always run Windows in a Mac
and you can run Linux in the Mac,
which I'm gonna do.
That's gonna be the main thing for the boost.
So if you get the Mac,
you can always run that with VirtualBox on anything.
Unless it's an M1, in which case VirtualBox,
it does not work.
You can always buy VMware, which will work on an M1.
That's been bonafide, it's been confirmed,
VMware Fusion, so if you had to spend some money,
you can do it and make your Mac run Windows or Linux
easily at native levels, even with GPU password.
A Mac laptop is hands down the best tool
to get, in my opinion.
It's just so easy, it just works.
It's compatible with anything you might wanna do out there
when you're wandering around.
You can attach it to random printers
and have it work, it just works.
Besides productivity and work,
and sound engineering and videos and media and stuff.
Like for example, if you're buying a laptop for gaming,
you're an idiot, because it's a waste of money and energy.
It's gonna weigh 15 pounds
and it's gonna need a charge record anyway
before to finish and game in the laptop.
And I have one, I've used it for years,
but I've been able to manage it
and my business has allowed me to
and tell the most recent job I have
where they do not allow it.
So be careful, if you become dependent on it,
you might not be able to use it in the workplace.
So prepare yourself for that as well against dual booting.
I cannot overstate my disagreement
with the suggestion to dual boot
based on years of objective experience helping beginners.
So often they blow away one or the other operating system
in the process during upgrades.
And it's a pain in the butt.
Containerization and virtualization,
you don't need to dual boot.
There is definitely something out there
that will support you instead of dual booting.
Virtual box, if you wanna spend the extra money
and get VMware, which supports password GPU
and all kinds of stuff,
but don't dual boot, just don't dual booting though.
So if you're gonna dual boot at all,
I would suggest doing multiple hard drives for sure.
If you're gonna dual boot also install Windows first
and then we do do mint the dual boot after that.
That's what we did.
That particular method will work
until you come time to do your upgrade.
And every time somebody gets screwed up,
it's because they have to upgrade Windows
and Windows sees this partition over there
and it doesn't do it.
Besides the upgrade path for Windows never works.
You usually just need to reinstall all of Windows.
So I would recommend dual booting to
is people who are okay wiping their computer completely
every six months, three to six months,
which I do anyway because of the viruses and stuff
and reinstalling both operating systems
from scratch efficiently and quickly.
If you can do that, fine, dual boot.
I just really, really can't overstress enough
how bad dual booting is.
Only the most experienced people
should be playing with dual booting.
And I gotta say the Linux Mint
is really clean dual booting setup.
So, you know, there's that.
Normally though, when you're considering a dual boot,
it's usually because you wanna do one thing
and the other thing.
And in practical terms, it is such a pain in the ass
to reboot your computer to do the other thing
that you wanna do that you end up not doing it.
And you don't get that.
Well, at the VM, you just pop up the VM for Mac.
It's much more reliable.
It's a paid for product.
It does dual booting pretty reliably for Mac.
But dual booting Linux, setting up a Linux dual boot
with Windows is a totally different beast.
So last night, I was like,
I have to cover all three operating system setups
for the boost because I was going through it,
myself at work, and I was like,
people will die if they don't know
how to set up Mac with brew.
Or people will die if they don't know
how to do WSL2 on their own.
The truth is that those topics are covered on the internet.
I don't think they're covered well.
And I don't know how relevant they are
to the infrastructure boost that we've been doing,
which is primarily focused
on Linux command line server installation
and setup and that kind of thing.
So yeah, let me talk about that.
So yeah, the plan is to cover go along
with the other languages
and to learn all the languages at the same time.
So we're gonna try to make that work.
It'll be small activities in all four or five languages.
So PCRE grep lets you use grep.
If it's not on the system, you'll get an error
and you'll know what you're dealing with.
But if you use grep-capitalp, it'll find grep
and do it fine, but it won't do what you expect
and you'll get a bug.
If you are a fan of brew
and you wanna make your Mac feel like a Linux machine,
there's many ways, there's lots of stuff you can install.
But as of 2019, with default names has been deprecated
because it breaks your Mac and don't do it.
That means you have to do more work to update your path.
One of the things that people are only gonna yell at me
about is they're gonna see in my .files now
that I use userbini and vbash
and they're like, finally, Mr. Rob caught up with the world.
You know what?
I was doing that when you were in diapers probably
and I stopped doing it because it's insecure.
But for personal things, it's not that bad.
Why on earth would I do userbini and vbash?
You ask or userbini and vpython or Ruby or whatever.
The Ruby people started it.
That's because what it does is it gives you
the bash where it is and my .files are now running on Mac
as well as Linux and I want it to just work.
I realize that that's like pretty lazy because I do, I hate it.
I hate it, but I still think that the practicality
of these type of scripts to do it outweighs
the problematic method is absolutely clear on this.
I still hate this.
I am okay with it for personal stuff as I always have said,
but if you do this in a professional script, you're an idiot.
If you're doing it in a script that has to be run everywhere,
maybe not.
So let me give you an example.
Once upon a time I was installing Docker
and I used the Docker script, right?
Well, this phenomenally amazing shell script
that's written to install Docker does this very thing,
but that script has to run anywhere and on anything
and that's legit commands in this domain line.
I mean, can you imagine?
That would be so great.
That's essentially what this does is it says,
hey, go make sure you find it.
It just makes it really, really important
that you know exactly what's in your path at any time.
And as a personal desktop thing, it was not outlined.
I put some themes for each day.
We have six weeks of programming.
We're gonna be doing the Unix thing for a day.
We're gonna be editing for a day.
We're gonna be doing, all right,
so we're gonna be doing editing for a day.
We're gonna be boosting command line
so it was a bash for a full day.
Working with structured data for a day,
parsing it, internet stuff from the command line,
networking a full day, secure shell and security
for a GPG one day.
Getting started with Git for a full day,
Docker for a day and then six weeks of programming.
Unlike other times, we're only gonna spend one day
on making websites, HTML, CSS and JavaScript
and doing it with Pandoc and publishing it for free.
Has a part of your portfolio creation
and then we'll talk for a full day
about how to, what's the next step,
how to communicate, how to connect with the community
so you can get those opportunities.
2021 boost, we didn't do a lot of coding in there
so you might wanna just do a little bit of coding
on your own and get used to that.
If you have a terminal command line,
maybe practice writing your own utilities in bash
or doing some other organized coding online.
I mean, this wasn't a very long stream
but I had fun organizing some more content for the boost.
I feel like I'm more okay with the amount of content
we have to do in the next 82 days to generate that.
And hopefully you'll come on back.
I will be doing more streaming,
co-working this week as well.
