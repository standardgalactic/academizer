Provide a prompt, or type /help or ? to list commands.

[New Conversation]
(0.7/4096/0): default
Mecha@gpt-3.5-turbo 1> /model model_name gpt-4
Set model_name to gpt-4

[New Conversation]
(0.7/8192/0): default
Mecha@gpt-4 1> /editor
LLM Workflow Engine

LLM Workflow Engine (LWE) is a Power CLI and Workflow manager for LLMs.

Read the documentation
WATCH INTRO VIDEO
Welcome!
What would you like to do?

Learn about the project
Install LWE
Learn how to use it
Read the documentation
Learn more about configuration/features
Troubleshoot common issues
Upgrade LWE
Using GPT4
Report a bug
Get support


As an AI, I can help answer your questions or guide you through any of the mentioned processes. Here is a brief overview of each option:

1. **Learn about the project:** This will provide information about the LLM Workflow Engine project, its goals, and its development team.
2. **Install LWE:** This option will guide you through the installation process of the LLM Workflow Engine.
3. **Learn how to use it:** Here, you will find tutorials and guides on how to use the LLM Workflow Engine effectively.
4. **Read the documentation:** The documentation provides in-depth details about the LWE, including its features, functionality, and how to use it.
5. **Learn more about configuration/features:** This will provide more information about setting up and configuring LWE, as well as its features.
6. **Troubleshoot common issues:** This section provides solutions to common problems that users might encounter when using LWE.
7. **Upgrade LWE:** This will guide you on how to upgrade your LWE to the latest version.
8. **Using GPT4:** This will provide information on how to integrate and use GPT4 with LWE.
9. **Report a bug:** If you encounter any bugs in LWE, this section will guide you on how to report them.
10. **Get support:** If you need further assistance or have any queries, you can get support from the LWE team through this option.

Please let me know which option you're interested in, and I'll provide the necessary guidance.

[Untitled]
(0.7/8192/427): default
Mecha@gpt-4 2> it must have worked I am using lwe to talk to GPT-4 right now.

That's great to hear! I'm glad you successfully set up and started using LWE with GPT-4. If you have any questions or if there's anything else you'd like to learn or troubleshoot, feel free to ask. I'm here to assist you.

LLM Workflow Engine: Complete ...
(0.7/8192/512): default
Mecha@gpt-4 3> Highlights
from the command line.

💬 Runs in Shell. You can call and interact with ChatGPT/GPT4 in the terminal.

💻 Supports official ChatGPT API. Make API calls directly to the OpenAI ChatGPT endpoint (all supported models accessible by your OpenAI account)

🔌 Simple plugin architecture. Extend LWE with custom functionality

🗣 Supports multiple LLM providers. Provider plugins allow interacting with other LLMs (GPT-3, Cohere, Hugginface, etc.)

🔄Build workflows. Easily integrate calls to an LLM into larger workflows via Ansible Playbooks

𝑓(𝑥) Execute functions. Support fo
r OpenAI functions

🐳 Docker image. LWE is also available as a docker image. (experimental)

🐍Python API. LWE also has a Python library that lets you use ChatGPT/GPT4 in your Python scripts.

Projects built with the original ChatGPT Wrapper
bookast: ChatGPT Podcast Generator For Books
ChatGPT.el: ChatGPT in Emacs
ChatGPT Reddit Bot
Smarty GPT
ChatGPTify
selection-to-chatgptSure, here are some highlights of using the LLM Workflow Engine (LWE) with GPT-4:

1. **Ease of Use:** LWE provides a user-friendly interface for managing and executing workflows, making it easier to interact with GPT-4.

2. **Efficiency:** With LWE, you can automate various tasks, saving time and reducing the possibility of errors.

3. **Flexibility:** LWE allows you to create custom workflows tailored to your specific needs.

4. **Integration:** LWE's capability to integrate with GPT-4 opens up new possibilities for leveraging AI in your workflows.

5. **Support & Documentation:** LWE comes with comprehensive documentation and support, helping you troubleshoot any issues and understand how to make the most of the tool.

Remember, if you have any more questions or need further assistance, feel free to ask.

LLM Workflow Engine: Complete ...
(0.7/8192/700): default
Mecha@gpt-4 4> 🤖 LWE lets you use the powerful ChatGPT/GPT4 bot from the command line.

Absolutely! The LLM Workflow Engine (LWE) provides a powerful and versatile way to interact with advanced AI models like ChatGPT (or GPT-4 when it becomes available) directly from the command line. This allows you to automate tasks, manage workflows, and even carry out complex operations, all in a simplified and efficient manner. By combining the flexibility of the command line with the capabilities of these AI models, LWE can greatly enhance productivity and streamline operations for a variety of use cases.

LLM Workflow Engine: Complete ...
(0.7/8192/833): default
Mecha@gpt-4 5>
LLM Workflow Engine: Complete ...
(0.7/8192/833): default
Mecha@gpt-4 5> 💬 Runs in Shell. You can call and interact with ChatGPT/GPT4 in the term
inal.

Yes, that's correct! The LLM Workflow Engine (LWE) can be run directly in the shell or terminal. This enables you to interact with ChatGPT or GPT-4 by executing commands directly from the command line. It simplifies the process of using these powerful AI models and allows for easy integration into existing scripts or workflows. You can send requests, receive responses, and manage the behavior of the models all from the convenience of your terminal.

LLM Workflow Engine: Complete ...
(0.7/8192/958): default
Mecha@gpt-4 6>
LLM Workflow Engine: Complete ...
(0.7/8192/958): default
Mecha@gpt-4 6> 💻 Supports official ChatGPT API. Make API calls directly to the OpenAI C
hatGPT endpoint (all supported models accessible by your OpenAI account)

Yes, you're absolutely right! LLM Workflow Engine (LWE) supports the official OpenAI ChatGPT API. This means you can make API calls directly to the OpenAI ChatGPT endpoint from your terminal using LWE. All the models that are accessible via your OpenAI account can be reached and interacted with. This feature simplifies the process of leveraging the abilities of these models, and it allows for a more streamlined and efficient workflow.

LLM Workflow Engine: Complete ...
(0.7/8192/1092): default
Mecha@gpt-4 7>
LLM Workflow Engine: Complete ...
(0.7/8192/1092): default
Mecha@gpt-4 7> 🔌 Simple plugin architecture. Extend LWE with custom functionality

Yes, indeed! The LLM Workflow Engine (LWE) is designed with a simple plugin architecture. This means you can extend LWE with custom functionality to suit your specific needs. You can create plugins to add new features, automate specific tasks, or even integrate with other software or systems. This flexibility makes LWE a highly adaptable tool that can be tailored to a wide range of applications and workflows.

LLM Workflow Engine: Complete ...
(0.7/8192/1196): default
Mecha@gpt-4 8>
LLM Workflow Engine: Complete ...
(0.7/8192/1196): default
Mecha@gpt-4 8> 🗣 Supports multiple LLM providers. Provider plugins allow interacting wit
h other LLMs (GPT-3, Cohere, Hugginface, etc.)

Yes, that's correct! The LLM Workflow Engine (LWE) is designed to support multiple Language models. The provider plugins feature allows you to interact not only with GPT-3 and GPT-4, but also with other Language models like those from Cohere or Hugging Face. This makes LWE a very versatile tool, as it can be used to manage and interact with a wide variety of advanced AI models, all from the convenience of your command line. This ensures seamless integration and interaction with multiple LLM providers for your specific needs.

LLM Workflow Engine: Complete ...
(0.7/8192/1352): default
Mecha@gpt-4 9>
LLM Workflow Engine: Complete ...
(0.7/8192/1352): default
Mecha@gpt-4 9> 🔄Build workflows. Easily integrate calls to an LLM into larger workflows
via Ansible Playbooks

Yes, you're correct! The LLM Workflow Engine (LWE) allows you to build workflows and easily integrate calls to a Language Model into larger workflows. One of the key features of LWE is its compatibility with Ansible Playbooks. Ansible is an open-source automation tool that can help you with configuration management, application deployment, task automation, and even IT orchestration.

By using Ansible Playbooks, you can automate workflows that include calls to your LLM. This means you can create a series of tasks, encapsulated within a playbook, that include interactions with your LLM. This level of automation and integration can significantly simplify complex tasks and improve efficiency.

LLM Workflow Engine: Complete ...
(0.7/8192/1518): default
Mecha@gpt-4 10>
LLM Workflow Engine: Complete ...
(0.7/8192/1518): default
Mecha@gpt-4 10> 𝑓(𝑥) Execute functions. Support for OpenAI functions

Absolutely! The LLM Workflow Engine (LWE) supports the execution of OpenAI functions. This means you can run different operations and tasks that are part of the OpenAI's API functionalities directly from the LWE.

With this feature, you can leverage the full power of OpenAI's capabilities and integrate them into your workflows. This can include anything from generating text, answering questions, translating languages, and much more, depending on the capabilities of the specific OpenAI model you are using.

Remember, this allows for a great deal of flexibility and customization in your tasks and can greatly enhance the efficiency of your operations.

LLM Workflow Engine: Complete ...
(0.7/8192/1668): default
Mecha@gpt-4 11>
LLM Workflow Engine: Complete ...
(0.7/8192/1668): default
Mecha@gpt-4 11> 🐳 Docker image. LWE is also available as a docker image. (experimental)


Yes, that's correct! The LLM Workflow Engine (LWE) is also available as a Docker image. Docker is a popular platform used to develop, ship, and run applications within containers. These containers allow developers to package up an application with all its parts, such as libraries and other dependencies, and ship it all out as one package.

By providing LWE as a Docker image, it allows users to easily deploy and run LWE in any environment that supports Docker, without worrying about manually installing and configuring all the dependencies. This can greatly simplify the process of getting LWE up and running, especially in complex environments.

Please note, as you mentioned, the Docker image of LWE is currently marked as experimental. This means it's still being tested and refined, so users should be aware that there might be some issues or limitations.

LLM Workflow Engine: Complete ...
(0.7/8192/1866): default
Mecha@gpt-4 12>
LLM Workflow Engine: Complete ...
(0.7/8192/1866): default
Mecha@gpt-4 12> 🐍Python API. LWE also has a Python library that lets you use ChatGPT/GP
T4 in your Python scripts.

Yes, you're absolutely correct! The LLM Workflow Engine (LWE) also comes with a Python API. This means you can incorporate LWE and its functionalities directly into your Python scripts or applications.

The Python library allows you to interact with ChatGPT or GPT-4 right from your Python code. This is particularly useful for developers and data scientists who prefer working within a Python environment, and it opens up a multitude of possibilities for integrating the power of these AI models into Python-based projects.

With the Python API, you can automate tasks, manage workflows, and even carry out complex operations in a simplified and efficient way. This level of integration and accessibility makes LWE a highly adaptable tool for a wide range of applications.

LLM Workflow Engine: Complete ...
(0.7/8192/2052): default
Mecha@gpt-4 13>
LLM Workflow Engine: Complete ...
(0.7/8192/2052): default
Mecha@gpt-4 13> Projects built with the original ChatGPT Wrapper


The original ChatGPT Wrapper, now known as the LLM Workflow Engine (LWE), has been utilized in various fields for different projects. Here are a few examples:

1. **Content Generation:** ChatGPT Wrapper has been used in projects to generate blog posts, articles, and other forms of written content automatically.

2. **Chatbots:** Many developers have used it to build intelligent chatbots that can hold a conversation, answer queries, and provide customer support.

3. **Virtual Assistants:** It's also been employed in the development of virtual assistants that can carry out tasks or provide information based on user inputs.

4. **Language Translation:** Some projects have used it for language translation, leveraging the AI's ability to understand and translate between different languages.

5. **Education and Tutoring:** In the education sector, it's been used to create tutoring systems that can help students learn and understand various subjects.

6. **Game Development:** In the gaming industry, developers have used ChatGPT Wrapper to create intelligent NPCs (Non-Player Characters) that can interact with players in more sophisticated ways.

Remember, these are just a few examples, and the possibilities are virtually limitless. The LWE's ability to interact with advanced AI models like GPT-3 or GPT-4 opens up a whole new world of opportunities for developers and businesses alike.

LLM Workflow Engine: Complete ...
(0.7/8192/2345): default
Mecha@gpt-4 14> bookast: ChatGPT Podcast Generator For Books

Bookast is a fantastic project that leverages the power of ChatGPT. As a Podcast Generator for books, it uses the AI capabilities of ChatGPT to create engaging and informative podcasts based on written content.

Here's how it works:

1. Bookast takes the text from a book and feeds it into ChatGPT.
2. ChatGPT, utilizing its advanced natural language processing abilities, generates a podcast-style narrative of the book's content.
3. The generated narrative can then be converted into an audio format using a text-to-speech system.
4. The end result is a podcast that provides an audio rendition of the book's content, allowing users to 'listen' to their favorite books in a podcast format.

This application showcases the creative ways in which ChatGPT and the LLM Workflow Engine can be used to generate novel and innovative solutions.

LLM Workflow Engine: Complete ...
(0.7/8192/2539): default
Mecha@gpt-4 15> ChatGPT.el: ChatGPT in Emacs

ChatGPT.el is a fascinating project that integrates ChatGPT into Emacs, a widespread and powerful text editor. With this integration, users can leverage the capabilities of ChatGPT directly within the Emacs environment.

Here's a brief overview of what this integration does:

1. ChatGPT.el enables you to communicate with ChatGPT directly from Emacs, providing real-time interaction with the AI.
2. You can utilize this for a variety of tasks such as generating text, answering questions, coding help, and much more.
3. This integration essentially turns Emacs into a powerful AI-assisted development environment.

By bringing the capabilities of ChatGPT into Emacs with ChatGPT.el, users can enhance their productivity and efficiency, making it a powerful tool for developers and writers alike.

LLM Workflow Engine: Complete ...
(0.7/8192/2715): default
Mecha@gpt-4 16> ChatGPT Reddit Bot

The ChatGPT Reddit Bot is an application that leverages the capabilities of ChatGPT to interact with users on the Reddit platform. Here's a brief overview of what it does:

1. The bot uses ChatGPT to generate responses to comments or posts on Reddit.
2. It can be programmed to monitor specific subreddits or threads and automatically generate responses when certain conditions are met.
3. The responses are generated by ChatGPT, ensuring they are relevant and contextually appropriate.

This kind of application showcases the potential of ChatGPT and similar models in social media environments. By automating responses, the bot can provide quick replies, engage with users, or even moderate discussions based on predefined guidelines. It's a great example of how AI can be used to enhance communication and interactions on digital platforms.

LLM Workflow Engine: Complete ...
(0.7/8192/2893): default
Mecha@gpt-4 17> Smarty GPT

Smarty GPT is an excellent example of a project utilizing the capabilities of ChatGPT. While I don't have specific details about this project, it likely leverages the AI model's ability to generate human-like text based on given prompts.

Possible applications could include generating content, creating chatbots, developing virtual assistants, or any other task that requires generating or understanding natural language text. Its name, Smarty GPT, suggests that it's designed to provide intelligent, contextually aware responses or output, similar to the base functionalities of ChatGPT.

Remember, the possibilities with GPT models are vast, from automating customer service to generating creative content, and much more. If you could provide more details about Smarty GPT, I'd be happy to give more specific information!

LLM Workflow Engine: Complete ...
(0.7/8192/3062): default
Mecha@gpt-4 18> ChatGPTify

ChatGPTify is a project that leverages the capabilities of ChatGPT to enhance various applications. While I don't have specific details about this project, it likely uses ChatGPT's ability to generate human-like text based on given prompts.

The name suggests that it "ChatGPTifies" applications, which could mean integrating the AI model into apps or services to provide intelligent, contextually aware responses or output.

Possible applications could include:

1. **Content Generation:** ChatGPTify could be used to generate blog posts, articles, or other forms of written content automatically.
2. **Chatbots:** Many developers use ChatGPT to build intelligent chatbots that can hold a conversation, answer queries, and provide customer support.
3. **Virtual Assistants:** It could be employed in the development of virtual assistants that can carry out tasks or provide information based on user inputs.

Remember, the possibilities with GPT models are vast, from automating customer service to generating creative content, and much more. If you could provide more details about ChatGPTify, I'd be happy to give more specific information!

LLM Workflow Engine: Complete ...
(0.7/8192/3302): default
Mecha@gpt-4 19> selection-to-chatgpt

The "selection-to-chatgpt" project likely involves integrating ChatGPT into an application or platform in a way that allows users to select a piece of text and send it to ChatGPT for processing.

Here's a hypothetical example of how it might work:

1. A user selects a piece of text within an application. This could be a question, a statement, or any other form of written input.
2. The selected text is sent to ChatGPT as a prompt.
3. ChatGPT generates a response based on the input.
4. The response is then returned to the user within the application.

This kind of integration can be used to enhance user interaction, provide on-the-spot AI responses, or automate certain tasks within an application. However, without more specific details about the "selection-to-chatgpt" project, this is just a general overview. If you have more information, I can provide a more detailed explanation!

LLM Workflow Engine: Complete ...
(0.7/8192/3507): default
Mecha@gpt-4 20> /examples
Are you sure you want to install examples for the following types? presets, templates, workflows, functions (y/n): y
Installing examples for: presets

[Errno 2] No such file or directory:
'/opt/homebrew/lib/python3.11/site-packages/examples/presets'

Examples - ERROR - Error installing examples: [Errno 2] No such file or directory: '/opt/homebrew/lib/python3.11/site-packages/examples/presets'
LLM Workflow Engine: Complete ...
(0.7/8192/3507): default
Mecha@gpt-4 20> /functions

Functions:

• test_function: Repeat the provided word a number of times.

LLM Workflow Engine: Complete ...
(0.7/8192/3507): default
Mecha@gpt-4 20> /template
No template name specified

LLM Workflow Engine: Complete ...
(0.7/8192/3507): default
Mecha@gpt-4 20> /template workflow-generator.md

Template 'workflow-generator.md'


description: AI assists the user in writing a high-level specification for an Ansible
playbook
request_overrides:
preset: gpt-4-code-generation
system_message: "## MAIN PURPOSE\n\nYour primary purpose is to craft a
professional-grade\
\ Ansible playbook based on a provided specification.\n\n\n## ANSIBLE MODULES\n\
\nThe specification may make reference to these three custom modules: lwe_llm,\
\ text_extractor, lwe_input\n\nFollowing is detailed documentation for each module
\ along with example usage:\n\n\n### MODULE: lwe_llm\n\nshort_description: Make\
\ LLM requests via LWE.\noptions:\n    message:\n        description: The message\
\ to send to the model.\n        required: true if template not provided\n   \
\     type: str\n    profile:\n        description: The LWE profile to use.\n\
\        required: false\n        default: 'default'\n        type: str\n
preset:\n\
\        description: The LWE preset to use.\n        required: false\n      \
\  default: None\n        type: str\n    preset_overrides:\n        description:\
\ A dictionary of metadata and model customization overrides to apply to the prese
\ when running the template.\n        required: false\n        default: None\n\
\        type: dict\n    system_message:\n        description: The LWE system\
\ message to use, either an alias or custom message.\n        required: false\n\
\        default: None\n        type: str\n    template:\n        description:\
\ An LWE template to use for constructing the prompt.\n        required: true\
\ if message not provided\n        default: None\n        type: str\n
template_vars:\n\
\        description: A dictionary of variables to substitute into the template.\n
\        required: false\n        default: None\n        type: dict\n    user:\n\
\        description: The LWE user to load for the execution, a user ID or
username.\n\
\                     NOTE: A user must be provided to start or continue a
conversation.\n\
\        required: false\n        default: None (anonymous)\n        type: str\n\
\    conversation_id:\n        description: An existing LWE conversation to use.\n
\                     NOTE: A conversation_id must be provided to continue a
conversation.\n\
\        required: false\n        default: None (anonymous, or new conversation\
\ if user is provided)\n        type: int\n\nEXAMPLES:\n\n# Simple message with\
\ default values\n- name: Say hello\n  lwe_llm:\n    message: \"Say Hello!\"\n\
\n# Start a new conversation with this response\n- name: Start conversation\n\
\  lwe_llm:\n    message: \"What are the three primary colors?\"\n    # User ID\
\ or username\n    user: 1\n    register: result\n\n# Continue a conversation\
\ with this response\n- name: Continue conversation\n  lwe_llm:\n    message:\
\ \"Provide more detail about your previous response\"\n    user: 1\n
conversation_id:\
\ result.conversation_id\n\n# Use the 'mytemplate.md' template, passing in a few\
\ template variables\n- name: Templated prompt\n  lwe_llm:\n    template:
mytemplate.md\n\
\    template_vars:\n        foo: bar\n        baz: bang\n\n# Use the 'test'
profile,\
\ a pre-configured provider/model preset 'mypreset',\n# and override some of the\
\ preset configuration.\n- name: Continue conversation\n  lwe_llm:\n    message:\
\ \"Say three things about bacon\"\n    profile: test\n    preset: mypreset\n\
\    preset_overrides:\n        metadata:\n            return_on_function_call:\
\ true\n        model_customizations:\n            temperature: 1\n\nRETURN:\n\
\nresponse:\n    description: The response from the model.\n    type: str\n  \
\  returned: always\nconversation_id:\n    description: The conversation ID if\
\ the task run is associated with a conversation, or None otherwise.\n    type:\
\ int\n    returned: always\nuser_message:\n    description: Human-readable user\
\ status message for the response.\n    type: str\n    returned: always\n\n\n\
### MODULE: text_extractor\n\nshort_description: Extract text content from a file\
\ or URL\ndescription:\n    - This module extracts the main text content from\
\ a given file or URL\n    - For URLs, it extracts the main text content from\
\ the page, excluding header and footer.\n    - For files, see
SUPPORTED_FILE_EXTENSIONS\
\ in the module code.\noptions:\n    path:\n      description:\n          - The\
\ path to the file or the URL of the HTML content.\n      type: path\n
required:\
\ true\n    max_length:\n      description:\n          - Limit the return of the\
\ extracted content to this length.\n      type: int\n      required: false\n\n\
SUPPORTED_FILE_EXTENSIONS:\n\n# Microsoft Office formats\n'.docx', '.pptx',
'.xlsx',\n\
# OpenDocument formats\n'.odt', '.ods', '.odp', '.odg', '.odc', '.odf', '.odi',\
\ '.odm',\n# Portable Document Format\n'.pdf',\n# Rich Text Format\n'.rtf',\n\
# Markdown\n'.md',\n# ePub\n'.epub',\n# Text files\n'.txt', '.csv',\n# HTML and\
\ XML formats\n'.html', '.htm', '.xhtml', '.xml',\n# Email formats\n'.eml',
'.msg'\n\
\nEXAMPLES:\n\n- name: Extract content from a local PDF file\n  text_extractor:\n\
\    path: \"/path/to/your/file.pdf\"\n\n- name: Extract content from a URL\n\
\  text_extractor:\n    path: \"https://example.com/sample.html\"\n    max_length:
\ 3000\n\nRETURN:\n\ncontent:\n    description: The extracted main text content\
\ from the HTML.\n    type: str\n    returned: success\nlength:\n    description:\
\ The length of the extracted main text content.\n    type: int\n    returned:\
\ success\n\n\n### MODULE: lwe_input\n\nshort_description: Pauses execution until\
\ input is received\ndescription:\n  - This module pauses the execution of a
playbook\
\ until the user provides input.\n  - The user can provide input through the
command\
\ line or by opening an editor.\noptions:\n  echo:\n    description:\n      -\
\ If set to True, the user's input will be displayed on the screen.\n      - If\
\ set to False, the user's input will be hidden.\n    type: bool\n    default:\
\ True\n  prompt:\n    description:\n      - The custom prompt message to display\
\ before waiting for user input.\n    type: str\n\nEXAMPLES:\n\n- name: Pause\
\ execution and wait for user input\n  lwe_input:\n\n- name: Pause execution and\
\ wait for user input with custom prompt\n  lwe_input:\n    prompt: \"Please enter
\ your name\"\n\n- name: Pause execution and wait for user input with hidden
output\n\
\  lwe_input:\n    echo: False\n\nRETURN:\n\nstdout:\n  description: Standard\
\ output of the task, showing the duration of the pause.\n  type: str\n  returned:
\ always\nstop:\n  description: The end time of the pause.\n  type: str\n
returned:\
\ always\ndelta:\n  description: The duration of the pause in seconds.\n  type:\
\ int\n  returned: always\nuser_input:\n  description: The input provided by the\
\ user.\n  type: str\n  returned: always\n\n\n## PLAYBOOK GUIDELINES\n\n1. If\
\ the playbook requires looping over a group of tasks, put that group of tasks\
\ in a separate file and use the `include_tasks` directive to include the separate
\ file. Example:\n   ```yaml\n   - name: Process each row in the CSV file\n  \
\ loop: \"{% raw %}{{ csv_data.list }}{% endraw %}\"\n   vars:\n
source_location:\
\ \"{% raw %}{{ item.uri }}{% endraw %}\"\n   # some_file_name.yaml should contain
\ the list of tasks to loop over.\n   include_tasks: some_file_name.yaml\n   ```\n
\n\n## PLAYBOOK FORMAT\n\nYour final output should be a professional-grade Ansible
\ playbook that follows all common standards for both YAML and Ansible playbooks\
\ \n\n\n## CHATBOT BEHAVIORS\n\nAs a chatbot, here is a set of guidelines you\
\ should abide by.\n\nAsk Questions: Do not hesitate to ask clarifying or leading\
\ questions if the specification does not provide enough detail to write the
playbook.\
\ In particular, ask clarifying questions if you need more information to write\
\ tasks related to the previously documented custom modules. In order to maximize\
\ helpfulness, you should only ask high value questions to needed to complete\
\ the task of writing the playbook -- if you have no questions, just generate\
\ the playbook.\n\nOutput format: After you have received answers to any necessary
\ questions, output ONLY the playbook code, no other text or explanation."


DESIRED USER OUTCOME:

PLAYBOOK SPECIFICATION:

LLM Workflow Engine: Complete ...
(0.7/8192/3507): default
Mecha@gpt-4 20> I want to make an ansible playbook.

Sure, I can help you create a basic Ansible playbook.

Here's a simple example:

```yaml
---
- hosts:
target_machine
tasks:
- name:
Ensure apache is installed
apt:
name: apache2
state: present
- name:
Ensure apache is running
service:
name: apache2
state: started
```
This playbook ensures that Apache is installed and running on the target machine.

Here's how it works:

1. `hosts: target_machine` specifies the host (or hosts) where the playbook should run. This could be a single machine or a group of machines.

2. `tasks:` lists the tasks that the playbook will execute. Each task is a step in your process and will run in the order they are listed.

3. The `- name:` gives a description of the task. This name will be printed out when you run the playbook, so it should describe what the task is doing.

4. `apt:` and `service:` are modules. Modules are the tools that Ansible uses to interact with the system. In this case, `apt` is used to manage packages on Debian-based systems, and `service` is used to manage services.

5. `name: apache2` specifies the name of the package or service that the module will manage.

6. `state: present` and `state: started` tell the module what state the package or service should be in. `present` means the package should be installed, and `started` means the service should be running.

Remember to replace `target_machine` with the name of the machine or group of machines you want to target, as defined in your Ansible inventory.

Please let me know if you need help with a more specific playbook or if you have any other questions!

LLM Workflow Engine: Complete ...
(0.7/8192/3899): default
Mecha@gpt-4 21> /examples templates
Are you sure you want to install examples for the following types? templates (y/n): y
Installing examples for: templates

[Errno 2] No such file or directory:
'/opt/homebrew/lib/python3.11/site-packages/examples/templates'

Examples - ERROR - Error installing examples: [Errno 2] No such file or directory: '/opt/homebrew/lib/python3.11/site-packages/examples/templates'
LLM Workflow Engine: Complete ...
(0.7/8192/3899): default
Mecha@gpt-4 21> /template-edit-run
No template name specified

LLM Workflow Engine: Complete ...
(0.7/8192/3899): default
Mecha@gpt-4 21> /template-edit-run workflow-review.md
---
description: AI reviews and corrects issues with an Ansible playbook
request_overrides:
preset: gpt-4-code-generation
system_message: |-
MAIN PURPOSE
You are an expert at writing Ansible playbooks, and can easily review a playbook to spot errors
and provided a corrected playbook that will execute successfully in an Ansible environment.

ANSIBLE MODULES
The specification may make reference to these three custom modules: lwe_llm, text_extractor, lwe_input

Following is brief documentation for each module, which you should consider when making any corrections:


#########################################
MODULE: lwe_llm
#########################################

short_description: Make LLM requests via LWE.

Considerations:

When sending data to an LLM, it's important that the LLM is provided with explicit instructions about
how it should operate on the data, so ensure that any calls to lwe_llm that pass data to the LLM ALSO
pass clear instructions based on the provided GOAL and SPEC below.

#########################################
MODULE: text_extractor
#########################################

short_description: Extract text content from a file or URL

Considerations:

No modifications should be needed for these tasks.


#########################################
MODULE: lwe_input
#########################################

short_description: Pauses execution until input is received

Considerations:

No modifications should be needed for these tasks.


PLAYBOOK FORMAT
Your final output should be a professional-grade Ansible playbook that follows all common standards for both YAML and Ansible playbooks.

CHATBOT BEHAVIORS
As a chatbot, here is a set of guidelines you should abide by.

Ask Questions: Do not hesitate to ask clarifying or leading questions if you do not have enough information to properly analyze and correct any errors in the provided DRAFT PLAYBOOK. If you have no questions, just generate the output specified below.

Output format: Output ONLY the following, no other text or explanation:
1. The Ansible playbook in a YAML code block
2. A list of the changes made from the original playbook, each list item should be a VERY BRIEF description of the change
---

DESIRED USER OUTCOME:

PLAYBOOK SPECIFICATION:

DRAFT PLAYBOOK:

```yaml

```

From the provided information, it seems like there is a missing playbook that needs to be reviewed and corrected. Could you please provide the draft playbook that needs to be reviewed? I'll be able to provide a better assistance once I have the playbook to work with.

LLM Workflow Engine: Complete ...
(0.7/8192/4453): default
Mecha@gpt-4 22> Not right now I was just testing out some of the template examples.

No problem at all! If you have any other questions or need further assistance in the future, don't hesitate to ask. I'm here to help. Whether it's about Ansible playbooks, LWE, or any other topic, feel free to reach out. Happy testing!

LLM Workflow Engine: Complete ...
(0.7/8192/4534): default
Mecha@gpt-4 23> A list of everything we've talked about so far.

Sure, here is a summary of the topics we've covered:

1. **LLM Workflow Engine (LWE):** We started by discussing the LWE, a Power CLI and Workflow manager for LLMs, and its various functionalities including its installation, usage, features, troubleshooting, and more.

2. **Using LWE with GPT-4:** We covered how LWE can be used with GPT-4 to carry out various tasks and workflows.

3. **Highlights of LWE:** We discussed key features of LWE such as its ease of use, efficiency, flexibility, support for the official ChatGPT API, simple plugin architecture, support for multiple LLM providers, and more.

4. **Projects using ChatGPT Wrapper/LWE:** We talked about various projects that have used the ChatGPT Wrapper (now known as LWE), such as Bookast, ChatGPT.el, ChatGPT Reddit Bot, and others.

5. **Creating an Ansible Playbook:** We also discussed how to create a basic Ansible playbook and covered some fundamental concepts related to Ansible.

6. **Reviewing and Correcting Ansible Playbooks:** We talked about how the AI can review and correct issues in an Ansible playbook, although a specific playbook for review wasn't provided.

7. **Template Examples:** Finally, we touched on some template examples and their usage.

Please let me know if there's anything else you want to discuss or if you need more detail on any of these topics!

LLM Workflow Engine: Complete ...
(0.7/8192/4863): default
Mecha@gpt-4 24> Yeah what is an Ansible Playbook used for?

Ansible Playbooks are the building blocks for all the use cases of the Ansible automation engine. They provide a script for directing hosts, which are the systems you are managing with Ansible.

Playbooks are written in YAML format and they allow you to script multi-step procedures, eliminating the need for manual intervention. They can describe a policy you want your remote systems to enforce, or a set of steps in a general IT process.

Here are some of the things you can do with an Ansible Playbook:

1. **Configuration Management:** You can manage configurations of servers, ensuring they are in a desired state. For example, you can ensure certain software packages are installed, certain services are running, or certain files are in the correct places.

2. **Application Deployment:** You can automate the process of deploying applications to your servers. A playbook can pull the latest code from your version control system, run build scripts, restart services, and more.

3. **Workflow Orchestration:** You can orchestrate tasks across multiple servers. For example, you can update a database schema on your database server, then roll out code changes to your application servers.

4. **Provisioning:** You can automate the process of setting up new servers with the required software, configuration, and settings.

5. **Task Automation:** You can automate routine tasks, like updating all servers with the latest security patches.

In summary, Ansible Playbooks are a powerful tool for automating a wide range of IT operations, from basic tasks to complex deployments and workflows.

LLM Workflow Engine: Complete ...
(0.7/8192/5195): default
Mecha@gpt-4 25> /editor
LLM Workflow Engine (LWE) Intro

element workflow engine is a power

Collide a workflow manager for large

language models I'm going to start by

talking about some of the major

components in the project and then we'll

dig into the shell and I'll show you

around

so there are four major components the

first one is conversation management and

this is basically the same as you would

get from something like the chat gbt

website so you can start new

conversations you can revisit existing

conversations and extend them you can

delete conversations Etc

in my opinion if you like working from

the command line This is actually quite

a nice daily driver if what you're

trying to do is work with gpt4 from the

API

the next component is model

configuration this allows you to

configure large language models across

different providers so you can load up a

model you can customize the model

attributes such as temperature and then

once you have the provider and model

configured exactly the way you want you

can freeze that in what's called a

preset and then be able to reload that

quickly to be able to work with it so

you might have one preset that is lower

temperature to do something like code

generation and another preset with

higher temperature to do something like

creative writing

then the next component is prompt

templates and prompt templates allow you

to design and save new new prompts in a

reusable fashion it's using Jinja under

the hood which is a very well

established templating language for

Python and it also allows you to include

and pass variables to prompt string

execution so the templates themselves

can be quite flexible in addition to

that you can connect a template to a

specific model configuration so you

might have one template that would do

something like the code generation that

I talked about previously and another

template for creative writing and those

can use different presets to have

different types of output from the model

configuration

finally there's workflows and workflows

allow you to design multi-step workflows

using the ammo configuration language

now under the hood this is using ansible

which is a pretty well known

configuration management system for

servers but it also works quite well for

doing linear workflows that involve

large language models

the workflows allow you to take actions

with large language models but also take

other outside actions and kind of weave

them together it also allows you to

integrate prom templates and the model

configurations and when you combine all

that it can be quite flexible and

Powerful


The LLM Workflow Engine (LWE) is a powerful tool designed to enhance the usage of large language models, especially from a command-line interface. Here's a breakdown of the components mentioned in your text:

1. **Conversation Management:** This feature is similar to using ChatGPT on a website. You can start new conversations, revisit and extend existing ones, and delete conversations as needed. This makes LWE an efficient tool for those who prefer working from the command line.

2. **Model Configuration:** LWE allows you to configure and customize large language models across different providers. You can adjust model attributes like temperature and save these configurations in a 'preset' for quick and easy access later. This means you can have different presets for different tasks, such as code generation or creative writing.

3. **Prompt Templates:** With LWE, you can design and save prompts in a reusable fashion using Jinja, a well-established templating language for Python. These templates can be connected to specific model configurations, allowing for a high degree of flexibility in your tasks.

4. **Workflows:** LWE uses Ansible, a well-known server configuration management system, to design multi-step workflows. These workflows can include actions with large language models as well as other outside actions. By integrating prompt templates and model configurations, LWE can offer a highly flexible and powerful system for managing your tasks with large language models.

In conclusion, the LLM Workflow Engine is a versatile and powerful tool that allows users to effectively manage and interact with large language models, enhancing their productivity and efficiency.

LLM Workflow Engine: Complete ...
(0.7/8192/6061): default
Mecha@gpt-4 26> /editor
o I'm going to assume that you uh that

we can skip the installation portion uh

really installing it is just visiting

the documentation you would install it

via pip or via the source code and then

you would make sure you have your open

AI API key configured and then and then

you can start using it so we'll start

we'll start assuming that those things

have been done already so you start the

program with no arguments and it's going

to recognize that you don't have any

data storage or users created and you

can just create a user with a username

that's really all you need and right

after that's done it will allow you to

install example configurations I'm going

to go ahead and do that because it'll

give us something to work with right

away

so now we're up and running we've got

some example configuration so which I'll

show you around for but the first thing

is it's nice to know how to get help so

you can just type help and you can see

there's quite a few commands that are

built into it if you want to get help on

a specific command like the

configuration command

you can do that

that just shows you the different ways

you can get help with the configuration

this could be quite handy so let me just

show you the configuration because it's

nice to be able to know how you're how

you're set up there's there's a lot here

it's probably not worth going into in

detail but you've got your whether where

your files are set up and then you've

got a very detailed configuration for

how the the booting is going to go with

different options and then finally

there's some runtime configuration like

where you're logging a two and if it's

streaming or not in particular the file

configuration is quite handy because it

tells you where everything is if you

want to go in and actually edit the

files directly

okay so let's have a look at

conversation management so to create a

new conversation you would use the new

keyword

and then you just can type in your input

and you'll get output from the model and

this is a this is a chat

so

you're going to have a threaded

conversation with whichever model that

you're working with and you can see that

here

this is a little back and forth between

me and I think this is GPT 3.5 turbo yes

so uh let's create another conversation

just to get a little history in here

there we go Okay so

that's a conversation about bacon and if

you look here you can see we're starting

to develop some history we've got two

conversations going now you can switch

conversations by using the switch

command so if I want to switch back to

that older conversation I can do that

having a look at it there and then

switching to the most recent

conversation another one about bacon is

right there so that's basically a

conversation a management

next up is the provider and Model

Management so let's have a let's start

by having a look at what our current



The LLM Workflow Engine (LWE) is a user-friendly tool that allows you to manage and interact with large language models efficiently. Here's an overview based on the given text:

1. **Installation and Setup:** Installing LWE involves following the instructions in the documentation. You can install it via pip or directly from the source code. You'll also need to configure your OpenAI API key.

2. **First Steps:** When starting the program with no arguments, LWE will recognize when you don't have any data storage or users created. You can easily create a user with a username, and even install example configurations to quickly start using the tool.

3. **Getting Help:** LWE provides a comprehensive help command that lists all the available commands. You can also get help on specific commands, making it easy to understand how to use each one.

4. **Configuration:** LWE provides detailed configuration options, including file setup, booting options, and runtime configuration. The file configuration is particularly useful as it tells you where everything is if you want to edit the files directly.

5. **Conversation Management:** With LWE, you can easily create new conversations with the AI model, engage in back-and-forth exchanges, and manage multiple conversations at once. You can switch between conversations using the switch command.

6. **Provider and Model Management:** LWE allows you to manage different providers and models. The specific details are not provided in the text, but this feature likely lets you switch between different AI models and customize their settings.

As you can see, LWE is a versatile tool that gives you a lot of control over how you interact with large language models. Whether you're conducting a simple chat or managing complex workflows, LWE makes it easy to work with AI models.

LLM Workflow Engine: Complete ...
(0.7/8192/7099): default
Mecha@gpt-4 27> /editor

model is set to so we're using the chat

open AI provider and the GPT 3.5 turbo

model with a temperature of 0.7 that's

kind of high for me I think I might want

to lower the temperature or maybe we'll

do something like code generation so

that you can do by doing this model

temperature zero and now if we look at

the model again you can see we're using

the same model and provider but we've

lowered the temperature

so once I have you know this set up the

way I want it I can actually freeze it

in a preset so let's do that by doing

preset save and we'll just call this

turbo zero

okay so that is now saved and if I look

at the presets

see that I've got my new preset there

and switching between them is quite easy

so if I want to there's a default preset

of just turbo so if I want to load that

preset

I can do it this way

and if we look at the configuration

you'll see this is the this is sort of

the example configuration for Turbo or

we can load up

the one we just

created there and if I look at that

model configuration

you're going to see it has the zero

temperature that we set up

so that is basically configuring models

in the attributes on the model saving

them in presets and being able to switch

and now if I want to use a provider

other than the chat open AI That's the

only one that's currently installed so

we'll need to install another one so

let's have a look at the concept of

plugins so right now you can see we've

only got a couple plugins enabled these

are all just the ones built in and

there's only one provider plug-in that's

that's installed so we're gonna we're

gonna want to install another one if you

want to work with other models and let's

install the plugin that works with the

older open AI models so that would be

here the open app provider plugin this

allows you to work with gpt3 Etc so I'm

going to grab that installation

and so let's install that

and on this side while it's installing

I'm going to go ahead and make the

necessary configuration changes so in

order to enable a plug-in you have to

configure it in the enabled key

I will do that right now

be all set if we go back over here we

can see that installed successfully


The text you provided discusses several key features of the LLM Workflow Engine (LWE), particularly around model management and configuration, as well as the use of plugins. Here's a breakdown:

1. **Model Configuration:** LWE allows you to adjust the settings of your AI model. In the example you provided, the temperature of the GPT-3.5 Turbo model was reduced from 0.7 to 0.0 to make it more suitable for tasks like code generation.

2. **Presets:** Once you have your model configured the way you want, you can save these settings as a 'preset'. This makes it easy to switch between different configurations. In the example, a preset named 'turbo zero' was created.

3. **Switching Between Presets:** LWE makes it easy to switch between different presets. You can load any preset you've created, and the model will adjust its settings to match that preset.

4. **Plugins:** LWE supports plugins, which can extend its functionality. In the example, a plugin was installed to allow LWE to work with older OpenAI models like GPT-3.

5. **Installing Plugins:** Installing a new plugin is as simple as running the install command. Once a plugin is installed, you need to enable it in the configuration.

The functionalities discussed in the text make LWE a highly versatile tool for managing and interacting with large language models. Whether you're adjusting the settings of your model, switching between different configurations, or extending LWE with new plugins, the tool offers a wealth of options to suit your needs.

LLM Workflow Engine: Complete ...
(0.7/8192/8020): default
Mecha@gpt-4 28> /editor

so if we go back now and look at the

plugins you'll see that the open AI

plugin is provider plugin is installed


Exception('No messages to send, all messages have been stripped, still over max submission tokens: 8192')
LLM Workflow Engine: Complete ...
(0.7/8192/8020): default
Mecha@gpt-4 28> /new

• New conversation started.

[New Conversation]
(0.7/8192/0): default
Mecha@gpt-4 29> /editor
Summarize:o if we go back now and look at the

plugins you'll see that the open AI

plugin is provider plugin is installed

and to switch to that provider I can use

the provider command and I'll let's take

the text DaVinci 3 model

we'll make a new conversation real quick

here and

now I'm actually communicating with text

DaVinci 3 so if I look in my history

let's see I've got three conversations

going since the database stores the

model that a conversation was started

with you actually can see that the

presets will switch when I switch to an

order conversation so here I'm on GPT

3.5 turbo and if I go back to that

conversation that I just created

you'll see that I'm on text DaVinci 3 so

it does remember the model per

conversation shell plugins allow you to

write new commands that aren't in the

core of lwe so let's actually install

one just we can illustrate that we'll

install the actual shell plugin

which lets you run a International

Language commands and it returns with it

with the appropriate shell command so

we're going to go ahead and install that

edit the configuration to add shell

and I think the package plugins have you

have to restart so we'll do that

and if we look at our plugins

we've got the shell plug-in now so now

if I say

we'll see that it's going to respond to

my natural language command with the

actual command and then it gives me the

option to execute it and there is my

current working directory

so those are plugins again you can right

now there's plugins for the shell and

shell commands or you can add plugins

for providers

okay next up is templates so let's just

have a look at what templates were

installed in the examples

there's quite a few in there

and let's have a look at a few so let's

actually show I'll show you a template

first antonyms a good one

this will give you kind of an idea of

the breakdown so up here in this top

section is metadata and the metadata

allows you to do things like override

things for that specific template


The text discusses the use of plugins in a particular system. The Open AI plugin and provider plugin are mentioned and can be switched using the provider command. The text DaVinci 3 model is used as part of a new conversation, and the system retains the model per conversation. The usage of shell plugins is also discussed, these allow the writing of new commands not in the core system. The shell plugin is installed to run International Language commands and respond with appropriate shell commands. The system also allows for the addition of different plugins for providers. The text also briefly mentions templates, which come with metadata that can override specifics for that template.

[Untitled]
(0.7/8192/644): default
Mecha@gpt-4 30> /editor
so here in this antonym template you can

see that the request overrides this is

going to be using the preset for turbos

we're going to be using GPT 3.5 Turbo

when this template runs if even if

there's another model that's loaded up

in the Shell when this template runs

it's going to use turbo you can override

the system message provide a description

for the template you can set a custom

title that's going to be used things

like that so the template itself here

you can see it's just text and then

anything in these double angle brackets

here are variables and variables allow

you to dynamically substitute pretty

straightforward so this particular

antonym generator is just a proof of

concept you can see it's using a very

simple like Chain of Thought

prompting to be able to generate an

antonym so let's run this template

and there's different ways you can run

templates there's different sort of

strategies for running them you can see

here that you can open it in an editor

and run it you can open prompt for error

variables and open in an editor you can

just prompt your variables and then run

it Etc so we're going to use the prompt

and run for antonym and what you'll see

is it'll prompt for the variable that we

need to fill so I will enter that and

then you can see that what happens is it

substitutes the variable that we the

value for the variable we put in it

feeds that into the llm and the llm

responds

let's look at one more template

a little more a little fancier so this

one actually will show you the in a



The text explains the working of an antonym template in a system. The template uses GPT 3.5 Turbo model even if another model is loaded in the shell, and it can override the system message and set custom titles. The template consists of text and variables enclosed in double angle brackets, which allow for dynamic substitutions. The antonym generator uses a simple chain of thought prompting to generate an antonym. Templates can be run in different ways such as opening in an editor and running, prompting for variables and opening in an editor, or simply prompting for variables and then running. The system prompts for the variable needed, and upon entering, the variable gets substituted and the system responds. The text also hints at the existence of more complex templates.

Exploring Open AI Plugin and S...
(0.7/8192/1192): default
Mecha@gpt-4 31> /editor

built-in clipboard integration so let's

suppose uh we should have a look at it

first I'm going to show you the template

for the code documentation so so

let's suppose I want to

um I've got some code that I want to

write some documentation for it I'm

going to have the language model do that

so just looking at it you can see again

we're going to use these request

overrides I'm going to use a code

generation preset and here it's going to

allow me to enter the language that it's

in you'll see that in a second and this

clipboard variable the special variable

allow it will automatically put

whatever's in your clipboard into the

template so let's grab a piece of code

here from

the project itself I'll just do this one

right here just keep it simple

and if I run this template we're going

to I'll do the edit and run

prompt edit and run so you can see

everything so prompt edit and run and

example

code documentation there we go so I'm

going to give it a syntax label python

and then you'll see that it substitutes

that here I get some nice syntax

highlighting because I've got neovm

configured properly for that and it

automatically pastes into the from the

clipboard when I had on clipboard and

this is just a template I wrote up to be

able to generate documentation for a

function so let's go ahead and run this

thing and as you can see again it's

submitting into the language model and

it's going to respond with the

documentation

we can pretty that up a little bit by

using the chat command that re-renders

everything with markdown format so it

just looks a little nicer so you can see

here

we've got the documentation that I

requested

so that's basically how template's work

there's there's some more things you can

do with the metadata configuration but

that's in the documentation

so finally is workflows

and start by looking at the workflows

that are available

so let's have a look

at just one of them first just look at

it so you can see what it looks like

we'll look at the question feedback

answer one okay so

basically an ansible as I had said

before uh this is using ansible under

the hood and ansible Playbook is

basically just a yaml file it's a very

simple configuration language and you

can see here that what we're going to do

is actually quite a very common

um back and forth uh

workflow with the language model to be

able to improve the accuracy of

responses so we're going to have we're

going to ask the llm a question and then

it's going to uh we're going to feed

that question and its answer back in and

ask it to give critical feedback on that

on that answer and then we're going to

feed all of it back in and say based

upon the feedback and your original

answer to the question give me a new

answer that's improved

so you know that would that's this is a

very good example of something you might

do over and over again in chat GPT on

the chat TPT website but here you can

actually automate it so you only have to

type in your question once and it'll do

the work for you so let's go ahead and

run this workflow so you can see it in

operation

so here's a question

the solar system let's try that one

second spell

there we go

so now the workflow is starting I've got

it set up so it's going to give us quite

a bit of good feedback so here's the

first answer

that it's giving and now I resubmit that

question and ask it to give critical

feedback here's it's saying it's you

know provides the number of moons but

there's some things that could do better

and then I'm submitting all that and

asking it to re-respond and now you can

see this answer has quite a bit more

detail

now let's do one more workflow this

one's going to be quite a bit more

complicated

uh

so I'll try to talk you through it

this particular workflow

does persona generation so basically

what that means is given a set of random

characteristics the model will write a a

description of a fake person for you so

let's see here let's actually just look

at the high level of it

so the I'm not going to show you every

single piece of this workflow but just

on the high level so basically

as I said we're looking at a set of

characteristics is picking random values

and then it's going to generate a

Persona so that just to make some a

little bit more sense of this this is

the Json file that it's using to

generate the the traits so you can see

there's these different characteristics

like age socioeconomic status Etc and

for each one there's multiple values

that it can be selected so what the

workflow is going to do is it's going to

Loop through so it's going to pull that

Json file down get it into a usable

format and then here it's going to Loop

through and each time we've got it set

to five it's going to generate five

personas and each time it's going to

it's going to pick random uh random

values for each of those characteristics

feed it to the LM and then it will

respond with the written Persona so

let's go ahead and run this

okay

so skip back up here very quickly so you

can see that it pulled down the Json

file

and then here it's looping through and

picking random values for all the

characteristics there's quite a few

and then here it has finally gotten the

values it puts them into a nice format

submits them to the llm and now the llm

is writing a persona for that and so you

can see here based upon those it wrote

this persona

and it's going to do five of them it's

going to take a little bit so let's just

have a look at one of them so uh so far

I've generated one and if we just have a

look at it you'll see that in the file

that so the very last step here is it

actually writes it out to a file so you

have access to it so these are the

characteristics that were submitted for

that Persona and here is the Persona

that GPT wrote for that particular set

of characteristics and what's nice about

this particular automation is the

characteristics are controlled by you

know a Json file which you can adjust

you can control the number of iterations

so you could generate 5000 of these are

five of them like we are now

and once you do those setups you can

just run it and it'll spit it out over

time

and we finally generate the last Persona

so if you look here

so you've got five personas now

that's really all I've got in terms of a

high level overview the project is under

active development on GitHub please feel

free to submit feature requests or

report any issues

and thanks for your time




The text further discusses the usage and functionality of templates within a system, demonstrating how a code documentation template works, including clipboard integration. The system uses request overrides and a code generation preset, allowing for language entry and automatic pasting from the clipboard to the template.

The text then introduces workflows, using Ansible under the hood. An example workflow is used to illustrate how the system can improve response accuracy by iterating a question-answer-feedback process.

A more complex workflow is then discussed, which automates the generation of personas based on a set of random characteristics. This workflow uses a JSON file to select random values for various traits and then feeds these to the language model to generate the persona.

The text concludes by stating that the project is under active development on GitHub, inviting users to submit feature requests or report issues.

Exploring Open AI Plugin and S...
(0.7/8192/3078): default
Mecha@gpt-4 32> A list of everything we've talked about so far.

1. Plugins: The system uses plugins such as the Open AI plugin and provider plugin, which can be switched using the provider command. The system can also use shell plugins that allow for the writing of new commands not in the core system.

2. Models: The text DaVinci 3 model is used as part of a new conversation. The system is capable of retaining the model per conversation.

3. Templates: The system uses templates that can override the system message, set custom titles, and allow for dynamic substitutions using variables. The antonym template was specifically discussed as a proof of concept.

4. Running Templates: Templates can be run in various ways, including opening in an editor and running, prompting for variables and opening in an editor, or simply prompting for variables and then running.

5. Code Documentation Template: The system uses a code documentation template that uses request overrides and a code generation preset. This template allows for language entry and automatic pasting from the clipboard to the template.

6. Workflows: The system uses workflows that use Ansible under the hood. An example of a workflow was given that improves response accuracy by iterating a question-answer-feedback process.

7. Complex Workflow: A more complex workflow was discussed that automates the generation of personas based on a set of random characteristics, using a JSON file to select random values for various traits.

8. Project Development: The project is under active development on GitHub, and users are invited to submit feature requests or report issues.

Exploring Open AI Plugin and S...
(0.7/8192/3398): default
Mecha@gpt-4 33> We were talking about LLM Workflow Engine (LWE) Intro https://www.youtub
e.com/watch?v=-FiYQiS5nY4 and the https://github.com/llm-workflow-engine/llm-workflow-en
gine project.

The conversation has been about the Language Learning Model (LLM) Workflow Engine (LWE), a project that is accessible on GitHub. The LWE is a tool that uses plugins, models, templates, and workflows to automate and enhance various tasks. Key points discussed include:

1. The use of plugins like Open AI and provider plugins, which can be switched using a provider command. Shell plugins are also available that allow new commands to be written.

2. The application of models like the text DaVinci 3 model in creating new conversations. The LWE retains the model used for each conversation.

3. The creation and use of templates, which can override system messages and set custom titles. Templates consist of text and variables for dynamic substitutions.

4. The execution of templates in different ways, such as opening in an editor and running, prompting for variables and opening in an editor, or simply prompting for variables and running it.

5. The use of a code documentation template that uses request overrides and a code generation preset. This template allows for automatic pasting from the clipboard to the template.

6. The implementation of workflows, using Ansible under the hood. An example is given of a workflow that improves response accuracy by iterating a question-answer-feedback process.

7. The demonstration of a more complex workflow that automates the generation of personas based on a set of random characteristics. This workflow uses a JSON file to select random values for various traits.

8. Active project development on GitHub, with an invitation for users to submit feature requests or report issues.

The LWE project and its features are further explained in a YouTube video titled "LLM Workflow Engine (LWE) Intro".

Exploring Open AI Plugin and S...
(0.7/8192/3796): default
Mecha@gpt-4 34> A final summary.

The discussion focused on the Language Learning Model (LLM) Workflow Engine (LWE), a tool used to automate and enhance tasks using plugins, models, templates, and workflows.

Key features include:
1. Plugins: Open AI and provider plugins are used, switchable via a provider command. The system also allows for shell plugins for adding new commands.
2. Models: The system uses models, like the text DaVinci 3 model, for creating new conversations, retaining the model used per conversation.
3. Templates: The LWE uses templates for various functions, such as overriding system messages and setting custom titles. Templates consist of text and variables, allowing for dynamic substitutions.
4. Running Templates: Templates can be executed in various ways, like opening in an editor, or prompting for variables and running it.
5. Code Documentation Template: A special code documentation template is used, featuring request overrides, a code generation preset, and automatic pasting from the clipboard.
6. Workflows: The system uses Ansible-based workflows to automate processes. An example provided was a workflow that improves response accuracy by iterating a question-answer-feedback process.
7. Complex Workflow: The LWE is capable of running complex workflows, such as automating the generation of personas based on random characteristics.
8. Active Development: The project is under active development on GitHub, with users invited to submit feature requests or report issues.

The LWE and its functionalities are further described in a YouTube video titled "LLM Workflow Engine (LWE) Intro".

Exploring Open AI Plugin and S...
(0.7/8192/4118): default
Mecha@gpt-4 35> /exit
GoodBye!
(base) mecha@Mac ~ %

