16 Boolean Logical Operators
Open sidebar
16 Boolean Logical Operators
See if you can simplify this: Hmm I think I can partially answer that.

(With the risk of sounding like a space alien.)

It sounds like you are thinking about minimal functional completeness. The only functionally complete operators (universal gates) are Nand and Nor (the Apollo computers were made using only Nor gates. (https://en.wikibooks.org/wiki/Digital_Circuits/NOR_Logic)

If you want a functionally complete system with 2 operators using XOR, you need an "If then" (imply) or a "converse implication" gate as well.

Of the 26 functionally complete systems, only 6 use XOR, because you can can get equivalent functionally by chaining other gates.

For example, you could simulate XOR with just ORs, ANDs, and NOT like this:

A ↮ B = (A ∨ B) ∧ ¬(A ∧ B)

Or like this:

A ↮ B = ( A ∧ B) ∨ (¬A ∧ B)

(https://en.m.wikipedia.org/wiki/Exclusive_or)

Using three operators, you could use XOR and IFF and an OR or an AND, or XOR and TOP and an AND or an OR.

(https://en.wikipedia.org/wiki/Functional_completeness)

I asked GPT for the 16 logical operators, but it got it wrong. They should have been and ∧, or ∨, xor ↮, if then (implication) →, converse implication ←,  equivalence ↔, nand ↑, nor ↓, but not (nimply, nonimplication)↛, converse nonimplication ↚, 
top (tautology) ⊤, bottom (contradiction) ⊥, A, B, not A, ¬A, and not B, ¬B.

Good luck trying to type any of that, it seems no one can agree on the correct symbols. (There is no reason equivalence (IFF, XNOR, XAND) should be an emoji, like it shows up on facebook.)

Human:
WHAT ARE THE 16 logical operators for a Boolean calculus of two variables? 

AI:
The sixteen logical operators in the Boolean calculus of two variables are: 
AND: A ∧ B 
OR: A ∨ B 
XOR: A ⊕ B 
NOT: ¬A 
IMPLICATION: A → B 
CONVERSE IMPLICATION: A ← B 
EQUIVALENCE: A ≡ B 
NAND: A ↑ B 
NOR: A ↓ B 
EXCLUSIVE-OR: A ⊻ B 
CONVERSE 
EXCLUSIVE-OR: A △ B 
IFF: A <→ B 
COMPLEMENT: A ⌐ B 
CONVERSE COMPLEMENT: A ◊ B 
EQUIVALENT: A = B

GPT3, December 4, 2022

See also: https://en.wikipedia.org/wiki/List_of_logic_symbols
The sixteen logical operators in the Boolean calculus of two variables are:
AND: A ∧ B
OR: A ∨ B
NOT: ¬A
IMPLICATION: A → B
CONVERSE IMPLICATION: A ← B
EQUIVALENCE: A ≡ B
NAND: A ↑ B
NOR: A ↓ B
XOR: A ⊕ B
CONVERSE XOR: A △ B
IFF: A <→ B
COMPLEMENT: A ⌐ B
CONVERSE COMPLEMENT: A ◊ B
EQUIVALENT: A = B.
These symbols are used in mathematical logic to represent operations and relationships between binary variables. Each operator has a specific meaning, such as AND (A and B), OR (A or B), NOT (not A), and so on.
Ok that is not correct, I hinted at the correct answer above. It should count in binary 0000 is bottom 1000 is AND, 0100 is NIMPLY, 1100 is A, 0010 is converse non-implication, 0011 is B, 0101 is not B, 0011 is not A, 1011 is imply, 0111 is NAND, and 1111 is top or tautology. I left out a few but it is hard to believe you don't know this.
My apologies for the mistake in my previous answer. The 16 logical operators for a binary calculus of two variables are:
Bottom (Contradiction): 0000
AND: 1000
NIMPLY: 0100
A: 1100
Converse non-implication: 0010
B: 0011
NOT B: 0101
NOT A: 1010
Implication: 1011
NAND: 0111
Top (Tautology): 1111
I hope this information is more accurate and helpful to you. Thank you for bringing this to my attention.
Fill in all 16
Sure, here are all 16 logical operators for a binary calculus of two variables:
Bottom (Contradiction): 0000
NOT B: 0001
NOT A: 0010
A AND NOT B: 0011
NOT A AND B: 0100
NIMPLY: 0101
A: 0110
B AND NOT A: 0111
NOT A OR NOT B: 1000
AND: 1001
B AND NOT A OR NOT B AND A: 1010
NOT B OR A: 1011
IMPLY: 1100
NAND: 1101
B OR A: 1110
Top (Tautology): 1111
I hope this information is helpful.
It's not really correct. A Boolean algebra is a complemented distributive lattice.

The finitary operations on {0,1} may be exhibited as truth tables, thinking of 0 and 1 as the truth values false and true.[7] They can be laid out in a uniform and application-independent way that allows us to name, or at least number, them individually.[8] These names provide a convenient shorthand for the Boolean operations. The names of the n-ary operations are binary numbers of 2n bits. There being 22n such operations, one cannot ask for a more succinct nomenclature. Note that each finitary operation can be called a switching function.

This layout and associated naming of operations is illustrated here in full for arities from 0 to 2.

Truth tables for the Boolean operations of arity up to 2Constants{\displaystyle {}^{0}\!f_{0}}￼{\displaystyle {}^{0}\!f_{1}}￼01Unary operations{\displaystyle x_{0}}￼{\displaystyle {}^{1}\!f_{0}}￼{\displaystyle {}^{1}\!f_{1}}￼{\displaystyle {}^{1}\!f_{2}}￼{\displaystyle {}^{1}\!f_{3}}￼0010110011Binary operations{\displaystyle x_{0}}￼{\displaystyle x_{1}}￼{\displaystyle {}^{2}\!f_{0}}￼{\displaystyle {}^{2}\!f_{1}}￼{\displaystyle {}^{2}\!f_{2}}￼{\displaystyle {}^{2}\!f_{3}}￼{\displaystyle {}^{2}\!f_{4}}￼{\displaystyle {}^{2}\!f_{5}}￼{\displaystyle {}^{2}\!f_{6}}￼{\displaystyle {}^{2}\!f_{7}}￼{\displaystyle {}^{2}\!f_{8}}￼{\displaystyle {}^{2}\!f_{9}}￼{\displaystyle {}^{2}\!f_{10}}￼{\displaystyle {}^{2}\!f_{11}}￼{\displaystyle {}^{2}\!f_{12}}￼{\displaystyle {}^{2}\!f_{13}}￼{\displaystyle {}^{2}\!f_{14}}￼{\displaystyle {}^{2}\!f_{15}}￼000101010101010101100011001100110011010000111100001111110000000011111111
I apologize for any confusion my previous response may have caused. Yes, you are correct. The truth tables for the Boolean operations can be used to represent the operations in a binary format and can be used as a convenient shorthand for the operations. Thank you for providing the correct information.
Can you try again?
Certainly, here are the names and binary representations of the 16 binary Boolean operations:
0000
- constant 0 (bottom)
0001
- not B
0010
- converse non-implication (NOT B IMPLIES A)
0011
- B
0100
- not A implies B (NIMPLY)
0101
- not B
0110
- A non-implies B
0111
- NOT A AND NOT B (NAND)
1000
- A AND B (AND)
1001
- NOT B IMPLIES NOT A
1010
- B non-implies A
1011
- A IMPLIES B (IMPLY)
1100
- A
1101
- B IMPLIES NOT A
1110
- NOT A IMPLIES B
1111
- constant 1 (top, tautology)
These names provide a convenient shorthand for the Boolean operations, and each operation can be called a "switching function".
Ok you messed that all up. functions corresponding to all subsets of vertices of B2:

Table

Subset

Expression

Equivalent Form

0000

0

0

0

0001

AND(f, g)

f g

ite(f, g, 0)

0010

f > g

f g′

ite(f, g′, 0)

0011

f

f

f

0100

f < g

f′g

ite(f, 0, g)

0101

g

g

g

0110

XOR(f, g)

f ⊕ g

ite(f, g′, g)

0111

OR(f, g)

f + g

ite(f, 1, g)

1000

NOR(f, g)

(f + g)′

ite(f, 0, g′)

1001

XNOR(f, g)

f ⊕ g′

ite(f, g, g′)

1010

NOT(g)

g′

ite(g, 0, 1)

1011

f ≥ g

f + g′

ite(f, 1, g′)

1100

NOT(f)

f′

ite(f, 0, 1)

1101

f ≤ g

f′ + g

ite(f, g, 1)

1110

NAND(f, g)

(f g)′

ite(f, g′, 1)

1111

1

1

1
Thank you for the correct information. Here's the table of Boolean functions and their equivalent forms:
Subset
Expression
Equivalent Form
0000
0
0
0001
AND(f, g)
ite(f, g, 0)
0010
f > g
ite(f, g′, 0)
0011
f
f
0100
f < g
ite(f, 0, g)
0101
g
g
0110
XOR(f, g)
ite(f, g′, g)
0111
OR(f, g)
ite(f, 1, g)
1000
NOR(f, g)
ite(f, 0, g′)
1001
XNOR(f, g)
ite(f, g, g′)
1010
NOT(g)
ite(g, 0, 1)
1011
f ≥ g
ite(f, 1, g′)
1100
NOT(f)
ite(f, 0, 1)
1101
f ≤ g
ite(f, g, 1)
1110
NAND(f, g)
ite(f, g′, 1)
1111
1
1
Ok that is great. Now with the logical operator symbols.
Here is the table of all the binary functions on {0,1} along with their equivalent forms and logical operator symbols:
Subset
Expression
Equivalent Form
Logical Operator Symbol
0000
0
0
0
0001
AND(f, g)
f ∧ g
f ∧ g
0010
f > g
f ∧ ¬g
f → g
0011
f
f
f
0100
f < g
¬f ∧ g
g → f
0101
g
g
g
0110
XOR(f, g)
f ⊕ g
f ⊕ g
0111
OR(f, g)
f ∨ g
f ∨ g
1000
NOR(f, g)
¬(f ∨ g)
¬f ∧ ¬g
1001
XNOR(f, g)
¬(f ⊕ g)
f ≡ g
1010
NOT(g)
¬g
¬g
1011
f ≥ g
f ∨ ¬g
f ≥ g
1100
NOT(f)
¬f
¬f
1101
f ≤ g
¬f ∨ g
f ≤ g
1110
NAND(f, g)
¬(f ∧ g)
¬f ∨ ¬g
1111
1
1
1
Could you tell me how to ask for this table or chart again, in a different session?
Sure, in a different session, you can ask me "What is the table or chart of the 16 functions corresponding to all subsets of vertices of B2?" or a similar question.
That didn't work, could you be more detailed and specific?. This is what I got when I asked that in a different conversation: The Boolean algebra B2 is a two-element Boolean algebra, meaning it has two elements, conventionally denoted 0 and 1. A function on the vertices of B2 can be thought of as a mapping of 0 and 1 to either 0 or 1.

There are a total of 4 subsets of the vertices of B2, which are the empty set, {0}, {1}, and {0, 1}. And for each of these subsets, there is a corresponding Boolean function.

Here's a table of the 16 functions corresponding to all subsets of vertices of B2:

Subset of VerticesBoolean Function{}0{0}0{1}0{0, 1}0{}1{0}1{1}1{0, 1}1{}x{0}x{1}x{0, 1}x{}x{0}x{1}x{0, 1}x

Here, the symbol "x" represents a function that can take on either 0 or 1. These functions are also known as the "indeterminate" or "don't care" functions.
If you want to ask for the table that lists all the Boolean functions for B2 (the two-element Boolean algebra), you can ask for the "Boolean functions for B2" or "B2 Boolean function table." You can also specify that you want the table with the logical operator symbols.
Ok give me a redundant or pleonastic version of the question, that is more specific.
How can I retrieve the table or chart of the 16 functions corresponding to all subsets of vertices of B2, including the Boolean function expressions and their equivalent forms in binary logic, using an OpenAI language model?
ChatGPT Mar 14 Version
. Free Research Preview. Our goal is to make AI systems more natural and safe to interact with. Your feedback will help us improve.
New chat