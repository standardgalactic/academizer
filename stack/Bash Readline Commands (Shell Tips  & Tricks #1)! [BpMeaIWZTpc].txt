Hello everybody, it's Stack Smasher back again to show you some Bash tips and tricks.
I had this video on my channel previously and I ended up privating it because it didn't
turn out super great.
We'll see if this one turns out better.
But basically I'm just going to go over some things that the ReadLine functionality implements
in a lot of different shells, so you're probably using a shell like Bash or ZSH or I think
even Fish implements this.
And there's all these useful keyboard shortcuts that I never see people use.
I work in the professional world in a technology-based company.
And just this week, which is why I was reminded to remake this video, I basically, I backspaced
a whole word and the person I work with goes, how did you do that?
So it's really weird to me that people don't know about these functions because I use them
hundreds of times every day.
And it'd be interesting to see if other people find this video useful for that reason.
So I'm going to make the text bigger here as always.
Oh, wait, that's not how you do it.
My bad.
I have different terminal ahead of my mind.
So basically we're just going to do a couple of simple commands here on the command line.
So let's just do something like, first of all, let's CD into this directory where I have
my notes.
And from here, I don't know, let's do something.
Well, I guess LS is fine, isn't it?
Let's string a couple of commands together, though, let's do LS, echo, blah, you know,
whatever.
Fine.
Okay.
Basic command on a command line.
I'm going to show you a couple of different tricks, again, keyboard shortcuts for kind
of navigating.
We're going to start with navigation.
We'll move on to other stuff from there.
All of these commands, except for one, require you to hold down the control key.
So if I just say use B or use F, I mean, along with the control key.
I hope I don't make that mistake, but I might, if I want to navigate backward through the
command line, through the command on the command line, one character at a time, I can do control
B.
As you can see there, that's control B. If I want to go forward, I can do control F, right?
If I want to jump to the beginning of a line, I can do control A. If I want to jump to the
end, I can do control E. I think I actually feel like I need to make this.
This is, it's super important.
You can see my highlighted cursor here, so I'm hoping this is useful.
Let's make it even bigger.
Why not?
Control B to go back, control F to go forward, control A to go to the beginning, A just because
the first letter of the alphabet, and control E for the end to go to the end.
Obviously, control B stands for back, control F stands for forward.
So that's pretty straightforward, right?
Navigating across the command line in pretty much as a simple way as possible, there's
another command that might work for you, control X, that normally, in my terminal, I actually
don't know why, but in my terminal, it highlights the entire line.
I don't have a clue why.
In my other terminals, so I'm using ST here, but I've used Alacrity in other cases.
Control XX, which is what I just typed, that takes you to the most recent spot.
So if you start at the end of a line, then hit control A. Control XX will just take you
back to the end of a line.
Not as useful, but I don't know why ST handles that differently.
It seems to be a problem with the terminal.
Maybe it's not.
Maybe it's something deeper in Linux that I'm just not aware of, but seems to be a difference
in terminals.
Okay, so all that stuff is pretty easy, right?
Straightforward.
If I do this, echo 3, echo 2, echo 1, to seek in my history for a command I've typed,
I can hold control and press P for previous.
So you see there, we've gone through echo 1, 2, and 3, or control N for next.
Right?
Remember when we ran this echo law?
Now I'm basically just hitting control P for previous, control N for next to find those.
And of course, from there, you can just execute whichever one you want.
If you want to take it a step further, you can use control R. Control R, this is reverse
image search, reverse image search, what am I talking about?
Reverse searching of commands, if I were to type echo, you would see one of the recent
echo commands come up.
I can actually hit control O to just execute this.
Or I can hit control T to, let me do another reverse search here, get out of here.
Control T just puts it on the command line without executing it.
So from there, I can edit the command.
So if I have like, I don't know, some complicated command, I could just hit control T and then
go back and edit it in whatever way I wanted.
Of course, we'll make a difference here.
So you get that.
Also I should say control L is how you clear the terminal.
I guess I should have mentioned that before.
I do that all the time.
I don't even think about it.
Another interesting trick for bash output is control Q and control S. If you want to
play a prank on your buddy, use control S. So what this does, let's say I export a variable
equals zero, sum equals zero.
And then I want to export sum equals, let's do some math here, sum plus one and then let's
echo sum.
I think this will work.
Yeah.
Okay, cool.
So I'm basically just incrementing this environment variable.
If I put this in a while loop while one, meaning it just runs forever.
Nope.
That won't work.
Oh, see, I just tried to use control X.
That won't work either.
Basically you can see what this is going to do.
This is going to increment this environment variable forever.
So if I hit control S, the terminal output pauses.
This is extremely useful when you're maybe doing a big download and you see an error
output message you want.
Control S will pause the terminal output.
Now interestingly enough, I'll show this in a second.
It pauses it in every which way.
So if you're trying to type, I don't know if you can hear me typing, but nothing will
show up until you restart the output with control Q, which I'll do now.
So this just puts you back to where you were.
It's not actually catching up, but actually just launched forward to where I was before.
I'll stop this now.
There's no need to keep on doing that.
But I'm going to hit control S so you can see I'm not typing around.
You can see what it looks like when I'm typing.
I'm going to type LS colon echo law like I did before.
So I'm going to hit control S first and I'm going to enter.
Now you haven't seen anything.
If I hit control Q, it launches forward like, Hey, here's what's actually on the terminal.
Interesting trick.
If you want to play on your buddy, hit control S.
Now let's actually talk about the stuff that's useful that I use hundreds of times a day.
Everything up to this point, they're neat tricks just to kind of know if your application
is implementing a read line.
You can do all these things.
In fact, I think like if you're in a Python shell, anything that implements read line,
this will work as well.
If I just did like, I don't know, a times 25, can I go to the beginning?
Yeah.
Everything works as expected, but you get my point.
These are just kind of neat tricks, but these next ones are actually really, really useful.
I use them, like I said, hundreds of times a day.
They're for editing commands on the command line that are currently in your prompt.
So let's say I run a really complicated command.
Let's say, well, let's not make it super complicated.
Yes, let's just do that while command.
Why not?
Let's bring that in here using the tricks we just learned.
So let's say, I don't know, I want to change the echo part of the command, right?
If I'm here on the command line, what's the fastest way to get rid of everything from
where my cursor is to the end of the line?
The answer there is, of course, control K. I say, of course, well, the whole point of
this video is that it's not obvious.
Control K deletes everything from your cursor to the end of the command.
Now I'm going to replace it and I'm not going to tell you how I replace it because that's
important.
We'll get to that in a bit.
That's a neat little trick.
If I want to change, let's say I'm here and I want to change the word some to a different
variable, I could hit control W and I could change that to, I don't know, value, whatever.
I'm going to change it back to some because some actually works here.
If I want to delete everything, let's say I typed a different kind of loop or I want
to change this from where my cursor is now to the beginning of the line, I can hit control
U and then again, I'll replace it with this magic trick I'm going to reveal in a second.
Then probably the thing I use the most is control H and control D. Let's say I want
to delete the word export and this is my cursor direction.
I could just hold down control D or press control D a number of times.
That deletes starting from the cursor, you can see there, or I could do control H which
deletes backward from the cursor as you can see there.
I'll cover those all again.
Control K is from cursor to end of line.
Control U is from cursor to beginning of line.
Control D is cursor just eats up the things in front of it and control H is cursor deletes.
Control H in this context is the delete key for all intents and purposes.
It might even be easier to use the delete key.
The whole reason I'm showing you all these things is because on my keyboard where the
arrow keys are is extremely frustrating if you're typing in a console as much as I am.
All these little tricks are valuable.
I want to talk also about the bash or I guess it's not the bash but the read line buffer
which is the magic trick I was showing before.
Before you delete something using any of these tricks from read line, their value is stored
in a buffer.
Sorry for that rough edit there, I had a crash.
Either way, talking about the read line buffer, so if let's say we're typing three words we
want to echo, deleting one with control W as we saw before, we can repaste it with control
Y.
If we delete three words, we can also repaste it with control Y.
There's some time thing in effect there I'm not aware of.
Basically if I hit control W and then wait too long and then control W again, it will
only paste one word.
I'm not sure how that's configured, where it's configured, but this is super valuable
knowing this read line buffer, anything you delete most recently is stored in that buffer.
A time where this has been useful to me most recently at my job is we were doing something
with Docker.
I won't actually use Docker commands, but let's just say I wanted to run a command that
was echo wall, but then I needed to check a configuration file.
I could hit control U, cat, notes.txt or let's make up a fake file.
After that, control Y again and the thing in the buffer just returns to the terminal.
This is extremely valuable.
The last thing I want to show you is the exact same thing as control W with one minor exception.
If I do something like this, let's say I do ls directory dir dir dir, obviously a fake
directory, it's not going to be real.
If I control W that, the entire directory is gone.
If I just use control Y to bring it back.
If you want to go to the most recent, I guess, alphanumeric character, not punctuation character
or other characters, you can use your mediki backspace, in my case is alt backspace, but
I've been on a machine where I've had to do shift alt backspace before, so just be aware
of this might change.
If I want to go back to the period where astf.jpg, the period in that .jpg, alt backspace will
work.
If I want to go back to the forward slash, obviously, you get it.
You get it, right?
Of course, all that will pace back with control Y as well.
Control W to delete the whole word, or alt backspace, or whatever your mediki is, again,
you might have to hold shift for this, that's happened to me before, to go to the most recent
alphanumeric or non-alphanumeric character, right?
That's simple.
That's really useful if you're just trying to change directories in a output command,
I guess.
Anyway, that's it for me.
Thank you, everybody.
I appreciate it.
As always, leave a couple of comments.
I love whenever you guys do.
Let me know if this is useful, otherwise, I will talk to you again soon.
