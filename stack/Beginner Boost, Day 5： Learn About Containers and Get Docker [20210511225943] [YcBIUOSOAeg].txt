Do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do
do do do do do do do do do do do do wait I was going to get coffee I'll be right back I'm two minutes late Dad na BT
You
You
Where did everybody go everybody left
That was quite a marathon today. I just had and I
I still need to I still need to do more. It's like a never-ending battle against the amount of things you have to learn
Good morning everybody or evening or whatever your time is there
Today is yes today is
There's this is a great chat there everybody. Thank you for all that great chat
Boys like to 30 minutes
Yeah, so we're gonna jump right in because we have a lot to cover today
Just to give you an overview before we do dive in in case you're just do you just join the video?
number number of logistics things first of all I
Got all the I got all the playlist updated on YouTube
So if you got to the YouTube site, you'll see right under the most recent posted videos is the only
Customization it's just one playlist and it just has all the boost videos and it in order and we're talking about the two-hour videos
I noticed that actually adding in the
The highlighted videos from the first day made it harder to know what was next and stuff
So what we're gonna do instead is I'm just gonna I know it's I
Know it's stuff. You're gonna have to like slog through you know and fast forward and stuff like that
but
I'm just gonna do the two-hour videos. I'm gonna post this to YouTube and to
To twitch of course and then I can do the highlights from those videos
Later on I can I can take those videos apart and pull them down and do it whatever I need to do with them later
And then and then you can go to the boost website or the boost github site
And you can click into the exact video on the topic that you want
You don't have to you know look through because it's really not linear
I mean some of it is linear
But a lot of the stuff that we're gonna be getting into now with the boost is we're kind of started to kind of start
Diverging and some of this stuff over here could be done at the same time as this over here
So having one linear playlist doesn't make sense for that for that stuff
But we do have an outline you can quickly scan through that and get right to the video you want if you want to watch
Everything chronologically just go turn on that playlist and just keep watching and you know like you're like a whatever
I got your favorite episode of Netflix or something. I don't know
Um, so who we have a guy with the 20 22 so we're in the room in the house today
All right, well today today's a big day let's get right into it
We have
I've I've been I've been frantically working all day on my own
You know workspace docker file sort of system and and that's
We're not gonna get into docker files in this boost and we're gonna talk about that today
We're gonna talk about containers what they are with that. What is darker? All right, so let's jump in so let me get back to
The boost and set that as my default
It mugs in so now we're in here and I'll be taking some live notes here again, you know where to go, right?
So github.com slash rdbx rob slash boost
Make sure you watch that
for changes
So you can be up to date on that if you do it
I if you put an RSS plug-in reader in your chrome or something it can actually be notified
When there's a change
All right, so day zero day one
Day two was the method day three is understanding the Linux approach
So, you know, I'm not gonna justify Linux anymore
Getting on the terminals so yesterday
we talked about all the different ways to get on the terminal and
I told you the different ways to consider doing it again
We're not gonna cover how to do stuff unless it's not covered someplace else and
Most of the stuff at the terminal is well covered around the rest of the internet
So I just gave you my take on on what you might want to do and consider
Today is all about containers
And so I'm gonna make myself a little bit of room here
You know and it's not just today the entire world of it is about containers, so let's
Get ready for an actual movie
and
I'm gonna do my thing and we're gonna do the
Pomodoro and do all that good stuff so you guys can take breaks in between and not feel afraid
Okay, so
We're gonna do this as a video
Anybody have any questions before we start a video you have any any any like informal things you want to talk about
10 minutes in isn't too bad
We're gonna be able to ask questions about every 20 minutes or so so if you need to how's my dog the dog is fine
She it's just me and it's just she she and I right now the rest of the family. It's gone to different places
Doing different crazy things this spring
So let's change the topic of the video
I
Can probably put it over here. What if I did that wouldn't that be cool?
Well, if I do that, this is gonna actually wipe both my screens though. I think if I do this one
Don't know about that. Let's try it. Let's see what happens
Let's see what happens. Shall we?
Um, oh gosh
Does not look good
Okay, I don't like that. No with a banner back
I mean because reasons
You think I would be more less finicky about this stuff but
Alas
Alas
I have opinions not too bad not too bad opinions. All right, so let me
I need to make it at least the
Wait, let's do this let's do
Yeah, we'll leave some of this stuff up here
Like cistros the work continues on our journey to terminal flow mastery
We're gonna actually do that. We're gonna copy that. We're gonna do that right now
So I'm glad you asked that question very good question
Um
At your list is neat, isn't it? It really is. Yeah. No. No, no, no
No
Yep, all right, so all right, you ready here comes the video
Mark, um, all right. So today is container day
And you know in the old days you would have called us docker day
um
And so we're gonna we're gonna start out just by just introducing the idea of containers
and um
The fastest way I can tell you what containers are
Is to help you understand what kubernetes also has become
Um, there was a blog post and I'll let you do the research and I'll put it in the notes or something
Uh, that was kind of inflammatory this last year
And the the title of the of the of the it wasn't a blog because it was actually an article it was in um
information week, I think and the title of the article was
kubernetes is the new operating system
And the article goes into why
The computer operating system is less important and it actually makes a bunch of really interesting points about
Even from a financial perspective
Uh, where all the money's going what what is going what is becoming and and so to understand the statement kubernetes
is the operating system
The new operating system, uh, you have to understand. Well, well, you know, first of all, what's an operating system and then what, you know
Why would I care and what are the things that run in the operating system?
Uh, spoiler alert containers are the programs that run in kubernetes as an operating system
Now there's going to be a million people that are going to jump out of their skin right now because they're going to say
Containers are not just kubernetes blah blah blah blah. They're going to go crazy on that particular point there totally
It's totally true. So
Uh, so let's just do a little history on on containerization and why why you should care
um
containers uh are
Something that came about because of some uh advances in the linux linux is an operating system
We talked about operating systems before I don't want to go over that again
um
and
I won't get into the technical details of what it was but because of a few very significant technical advances
in the linux kernel the main part of the linux
Which we talked about at length the other day
uh
Stuff was starting to be able to be run
sharing the same kernel
And the same hardware and everything
But in every other way having all of the stuff the other resources and processes and everything
And files and everything be separated
And if you if you look at that i'm not going to pull anything up, but but if you look at
You know the the the docker logo. So docker was the first
Uh company slash project to main containerization famous even though it was being done all over the place
Uh before it got really picked up well by docker and and docker was you know pushing this idea of of um
You know of a ship uh with containers on it and and kubernetes actually is a greek word
You know i'll let you look it up
so the entire
You know metaphor for containerization like you know putting containers on a ship and then shipping it out
And pulling those containers down and doing whatever you want with them that
idea has really stuck in that metaphor has really has really you know
persisted in fact the the uh the icon for kubernetes is
You know is a the steering wheel of a ship
um
At lxc containers and how they're not docker containers might be a good make a note of yes
So there have been uh a lot of that's what i wanted to at least talk about that the advances are coming in the area of linux
And so the advances in the kernel and linux are what gave way
To the container movement now it's important. They understand that at the same time as a container move actually shortly thereafter
Virtualization was happening and so virtualization is a completely different thing, but it is related
So a virtualization we did talk about one of the best ways to run linux
It might be to run it in a virtual machine
So this is if you were to do this you you had download, you know virtual box or or vmware and you would run
uh linux or windows or whatever
Inside of your other host operating system and you would have a desktop and everything it's all graphic you can even play games in it
Uh solaris illuminos zones. Yes all of that stuff and bsd has containers now
So this is a boost. So we're going to stick with you know, mostly docker for now
But but the but the and these we got a lot of great people in the audience. Thank you for chiming and uh makes it more interesting
um
But so the take so this was some time ago and I would say it was probably 2012 or so
And I'm I'm not a a a container historian by any means, but I just remember
That about so like in 2000 2002 3 4 that seven by seven definitely
We were using I you know, we were using vmware to run an entire virtual machine
On side of another computer and and then that became
Really big you could do it, you know and really mainframe my bm's been doing this forever
Uh, and so now you can just put it, you know flip a switch and you know start up a computer
Uh a full blown, you know computer with the hard drive and everything
But it wasn't really there. It was just virtual right so so that whole movement was going on
And it was sort of at the same time was going on this work for
Uh containerization and before any of this happened, uh
There used to be a thing called shrewt which meant that
You could protect, you know with now that we have stuff running on our linux computers that's dangerous and scary
Uh, you could have a program that's running, you know a service or whatever be locked down
You know inside of its own memory space and its own file system space and everything linux jails
Yeah, and you could you could say you can't break out of here
You cannot hurt other people sometimes they call people it's called a sandbox
Basically, it's this idea because when the internet first came out everything was running as root and and nothing was locked down
And there was a lot of hacking going on nothing was encrypted or anything
Because remember in 1996 in that time frame. Oh my gosh
I mean it was just it was just a security nightmare
uh and
and so um
So so so then we had
Uh this movement and so you fast forward to 2021 and not only have
Containers kind of won the day over virtual machines people still use virtual machines, of course every time you fire up a
A machine in the cloud, you know an amazon or google or azure or or digital ocean or linux or whatever
Every time you fire up a machine. It's actually not really a machine, right?
It's it's a virtual machine and you can use that but in addition to that now we have this idea of of containers
um and and why do you care so for the last 15 minutes
We're going to talk about why you should care about containerization. So
Uh and you can you can see some really great graphics. I I've pulled them up before I'm gonna again
I want you to do the work here right now make a note
Go look for images that compare and make sure you can describe to somebody else who asks you
What is containerization verges versus virtualization?
And and you know that we weren't going to have a test or anything
But I but this is again this is to give you the idea of the thing you need to go learn
You need to be able to articulate to somebody. What's the difference between a container and a virtual machine?
Okay, they both have like you can put all of linux and we'll show you
In fact, I'll do it. This is actually really easy to demonstrate
You can put all of arch linux inside of a container
And now it's running and I ran it how many how many milliseconds did it take for me to start arch linux and run it?
That's believe me. This is this is arch linux. I promise it's got pacman and everything if you've watched anybody else
There's no witch command
Oh my god, that's funny. Uh, that's arch for you. How about a bun two?
All right, let's run
Let's let's run, uh, you know, it's something. I don't know. What do you want on so we could run a one two or devian
Devian have a devian and we talked about, you know, different linux versions and all that stuff before
so
Which there's no pacman here. So which apt, you know, there's apt and you get ls and all this jazz
Um, so so that's that's it. In fact, uh, I recently put tmux inside of a container
Run tmux. So now and I can set up whatever user I want over here
And now I have tmux. I have a bare bones version of tmux
To use and then I combine all of those containers together
And then I can create a workspace container that i'm currently working on. I haven't finished yet
And that workspace has lots of tools that I use all the time
But I want to I wanted to demonstrate that to you because I want you
To take notice of how quickly I was able to pull up and run a container
And the reason for that is because the containers are sharing
You know, the main parts of the computer they're running the main namespace and and they're using a service
That's that's helping to run that that's that's running on the computer
You know as a process and we talked about that the other day too, you know, how stuff works on linux. Make sure you watch those videos
Um, I don't remember what day it is, but you can look at the day
So why do you care about them? I mean, I promise I was going to tell you why
But I hope you're getting a sense of why why just by watching me do it. Okay, so
Containers allow you
Especially if you're a developer if you're a developer and you don't know containers, it's like
Not knowing, you know, your coding language in the first place
um
Uh, you yeah, you really really need to know
How to containerize whatever the thing is that you're running. So sure you can run a program
But what if your program needs a lot of pieces? So these days, you know
Writing microservices is a big deal. You know little applications that that help web pages, you know applications work
I'm trying to keep the terminology kind of basic right now. Apologize to the advanced people out there
um, so so what we're talking about here is
That you've got
Uh, so let's say that I mean without knowing too much about how networks work and stuff
If you've used the internet, you know that you go to a website and you see something in your web browser
And there's a bunch of stuff that happens, right? Well, there's a there's you're using what's called a client
We're going to talk about networking later
But you're using a client in the web browser and down behind the scenes on the server side
Is stuff that runs that serves up all that data. Well that back end
Uh stuff is talking to a database and it's talking to a web server
It might be have some middleware in between that you know
Does some magic to the data before it goes up and maybe it's even you know going out to a separate service out over here
And pulling in stuff from another completely different place on the internet
There's a lot of magic going on
On the back end of that application that web application that you're using and it and it's getting transferred
Over the internet to you, but but yeah the server to the client
So but the point i'm trying to make with regard to a container is I mentioned maybe three or four or five pieces of
that server side that you can't see that need to be combined
And managed like they're one and that's where containers come in so in terms of logical
assumptions for all intents and purposes as they say
uh
All of the stuff on the back end is one
Application combined together right it's the server side part of the entire application
In fact the front end is often served up and included in the back end. No very
Famously may have brought that to be even though people are moving off of node if you haven't heard of node.js
Uh, it's java script that runs on the front on the back end and the front end but primarily the back end
We're not going to get down in that hole right now. We only have 10 minutes
But so where do content containers come in here containers come in because you can take the database
The database can put in its own container. Uh, you can take the web server and put it in a container
Uh, or you can take the scripts that tie everything together and put those in containers
You can put the the individual code and go or node or flask and python
Uh, and you can put all of that stuff all in the container
Uh, it's so it's combined. Yes, it's combined it manages
I'm glad you mentioned that so separation of concerns is when you want to have everything like keep you know
Not step on somebody else right so that's separation of concerns
So we have separation of concerns, um, you know encapsulation
And we also have the ability to combine everything now the reason that
That containers are compared to programs if so if kubernetes can be compared to an operating system
Uh containers can be compared to programs in that when you write a program you haven't written one yet
But maybe you have but when you write a program all these same ideas are at play
So you don't you want to put you know these steps in this procedure
You know sign in or or log in or change your password
Those are all separate little programs so to speak procedures functions, whatever
Within the same larger program and they they're all in the same coding language
Uh, you know, and you're stuck with just that one language
So if so you can think of containers as the meta version of that
So containers are the meta version. So you have you know, you you say, okay, here's just the piece that talks to the internet
Here, you know, here's just the web server. Here's just the the database. Here's just the code that talks to the database
Here's you know, whatever and those pieces so you can think of them as if they were you know
sort of functions or procedures or separate
objects and you know in in programming terms and i'm really stretching here for the sake of making a point and then
Putting those all together into the same program that as far as you know as the end user
You just get a program and you run it and that's what a container is a container is
Is all that stuff combined together fully encapsulated safe from everybody else in a nice sandbox
That has no access to anything outside of itself unless you explicitly grant that access
That means that means when you know when you run a program
on your computer
And you know, you can fire it up and have it answer questions from the internet and stuff like that and you know
Give up secrets and all that kind of thing
Containers don't have that by default a container is contained. It's just you know, it's the whole point
So and then you have to kind of punch holes through it
You have to say, okay
I want this container to be able to see this this part of the of the of my of my hard drive
Just this one file though, or maybe I only wanted to see this one, you know socket or this one
Port it's called for the network
You know, and so you have to actually explicitly poke those holes when you run a container. So
The most important thing to understand I'm gonna I'm actually gonna just gonna wrap up here. I'm gonna
So the reason that you care about containers
Is because containers allow you to bundle up and encapsulate
The stuff that you want to run and the stuff that you want to give to other people
And most importantly the stuff that you want to develop while you're developing it if you're a developer
You need to know containers. I used to you know, people would say, oh, you know, I'm a developer
I why don't I need containers? I I just all I do is write java or whatever c sharp or something
I don't need to know containers. Well, if if you you need to get that
Code to run somewhere then you need to put it in a container so you can give it to the people
the DevOps engineers
Or whoever so you can in the old days we used to call that throwing it over the fence, right?
So you would write an application and you really didn't care about what it did to the computer underneath it
If you want to get a funny comical version of this watch the dynamic between gilfoil and dinesh
In silicon valley, uh, the the comedy, uh, it's very rated. Um, by the way, I don't recommend that for for you know
Really young people but it's it's hilarious because it it's this this, you know
Dinesh is the you know, the golden child programmer and
And gilfoil is the is the bastard operator from hell
You know the the guy who has to keep the systems running and so this this this dynamic between
uh, people who write code and create applications and people who have to
Support the systems that run their applications as really it's been really a hilarious dynamic out throughout the ages and uh, yeah
so today
this has largely been uh addressed through
The DevOps movement and through cloud native and through kubernetes and basically this is what you do
You you make an application you write all the code you put all the pieces not just your python go
But maybe you have other pieces that need to be in there, right?
Uh, and you know some c stubs or whatever you put them all inside of a container
And then and then you you generally say okay
Well this container needs access to these ports and it needs about this much cpu and it needs this much memory
And then you give that with all of those really great
You know metrics to the person who's got to run it in fact a lot of times that's automated these days
But you give it to them and then they say okay, this is how my thing runs
This is the this is the parameters under which it's going to run
And so that container gets put in there and if and if your application doesn't work because you didn't tell it
What it needed properly, you know
We can tweak it or change it and get it to run better
But it's the developers on the developer's shoulders and the DevOps team to make sure that that application gets contained
Properly so that we can you know manage this this balance rather than just yelling at each other
Like in Silicon Valley
So so that's the whole that's the whole science
I suppose in the the approach of DevOps, but it's not just DevOps
It's more about it's more about it's more about handing off
Applications and testing those applications in the proper environment
You can get up and running in an environment coding on an application within minutes using a container
So let's say you're a new person on a team or you're you have new people coming to your team
You can create a container that's a fully encapsulated emulation of everything that the person needs to do their development in your environment
You can give them that container tell them to put Docker on their computer and they can code immediately
As if they were coding the production product
Without any implications for the development they can do all their testing and you can just hand them off a container and and they're done
If you change anything in your environment
You can change that environment and give them a new thing and they just have to do docker pull
One second command and they've got the latest
This exchange and this being able to set up the development environment as quickly as possible
Is the biggest gain for uh, I think for software development and software application development
It's also the reason that software developers need to learn containers
And it's the primary reason that this boost is starting
The first technical day is starting by learning how to put docker on your computer and a docker, which is the primary user land
You know application for containers and and this is what this is how we're going to start
So that's why you should learn it. Uh, that's what they are
um, if you guys have any any other questions about this, let me know but
Uh, hopefully that will help you see by the way when uh, just a little kind of an you know ancillary comment here
when
uh, remember I said that you need to hand off that container to the
To the whoever runs your infrastructure your operators as they might be called, you know, your operations people
Uh, when you hand off that container and you say I need x amount of cpus. I need to use the gpu
I need to I need a system that has 523 cpu cores
True story. I supported
Uh, a group that actually has that many has jobs that use 532 cores
So uh, or you can say I want to use as many cores as you can give me, right?
So that they're rather than just statically saying
This is the resources I need and I if I don't get them, I'm not going to work
Or I if there's more I don't need more
the kubernetes, uh
Enters the the game which is a technology from google originally. It was called borg once upon a time
The idea the technology is pretty much throw a whole bunch of computers together into this hive
and
Cause that hive to operate as if it were one
That's why I was called a borg originally and then the open source version became called kubernetes
But that's what they do and it orchestrates
The need for those resources
So if you have so instead of just throwing it over and saying I only need eight cores and never more than eight cores
You can say I need at least eight cores
And so you set a policy and then kubernetes
Just like an operating system as I talked about on the linux day a couple days ago
You set a policy and say I need you know this much priority
And by the way, you can when you're running on an operating system
You can do the same thing if you have a running program in an operating system
You can give it a priority. It's called a nice priority in a nice value. Well, it's the same idea with kubernetes
I can say I want this thing to run with at least eight cores or more
And I here's my policy when it goes down. I want you to restart it and all that
So rather than giving these hard and fast
dictates about how your application and its container should be run all the stuff in it
You can now say here's the general policy about how I want this thing to be run
And that is what kubernetes is kubernetes is there. It is the operating system
of
Of of containers can being the programs
So when we give it a computer a program when we give by the way
A couple terms here with my last 45 seconds
a container
Strictly speaking a container is a running
image
All right, so when you make you we're not going to make any during this boost
But other than the one that we're doing for learning the terminal
But when you uh, when you're dealing with a container, you're dealing with something that's that's been created
It's an image and that image you can think of if you've ever used a tar ball or a zip or something like that
It's got a whole bunch of stuff in it. It's got whatever you put in it. It's all it's but it's it's you know
It's not active. It's not doing anything. It's inert
It's just an image and then when you give that image to a system that can do something that can run the image
Whether it be kubernetes or whether it be docker or any number of these applications that use
Containerization
Then it gets run and when it gets run that's when you tell it what resources it needs what ports and stuff at that point
It's a running container. It's been instantiated and that's the equivalent
To a running process on your Linux computer or your windows computer
It's a running process now
I can pause that process and say I don't want you to do anything for a while and you can do the same thing with containers
So a container, which is a running image can now be paused. You can say, okay
I don't want you to run for a while
You know
You can actually stop it or pause it the same sort of term
And then and then you can start it back up again and then you can use it again
However, you want to do it so so I I just I really want to punch this this comparison between kubernetes and the operating system
And containers and programs because I think it'll help you get your head around it
Some of you may be just getting your head around what is a program anyway?
And how does it run and and how does it get managed in the processes and I for that?
I really encourage you to go back and watch the linux video. All right. I'm gonna take a break
I'm gonna take a quick break, but we're now off there
Uh, let's see here
You
But also dev dev environments. Yes, that's what I'm been that's what I've been containerizing right now
Um
I was in a docker before docker
Yeah, no
There's there. Yeah, I I let somebody somebody else has probably got better history on me than didn't I do on that?
It's tiny while here
I don't think tiny was here. He's the one to ask tiny while could give you an answer to that
Hmm
That makes sense. I'm trying to keep as many terms out new terms out as possible so that it
So that it sticks
Because it was hard for me to get it too
um
And previous similar solutions, um
Well, there was other stuff. I don't I honestly don't know why docker. I I think docker had a better pr campaign
Also, I remember docker presenting
At a conference and I think it was the first company that was built around containerization
And it definitely was the first company to host
images
And we're gonna do that next. We're gonna talk about docker.com
Um
Check out lxc containers. Yeah lxc containers have been around for a while as well
In fact, I think I think lxc containers are are pushing the containers idea even further
I was reading recently
Yeah, it sounds sounds like some really cool stuff there
Uh, but the containers are here to stay. Um, and you know, we
This is we're still kind of on break here, but
I continue to hear
Not just old people say
I don't need no stinkin containers docker schmocker. I don't need that
Don't be that person
seriously, don't be that person
I am so grateful that I
I came kind of late to the party for containers
Because I was running my own business and I didn't really need them and I thought
But now that I've started using containers they they they have
benefited every angle of everything I've done at including education and as you're gonna see
They're the best tool for experimentation possible. I mean just today just today
We have two minutes left to just talk
So, uh, just today I was like I couldn't remember
740 you have to start so just today I could not remember
uh, if
I was like
Where does tmux live? Right when it gets automatically installed. So I went no it was links
Something like that. I can't remember. So I wanted to go see on ubuntu where it lived
So I just ran an ubuntu container a fresh one not one that I'd been customized or anything. I was like
Where is uh, you know, whatever I can go look for stuff and I was able to instantly
refresh my memory about this thing by actually booting it up and like a second
The the ability to go check stuff out or to actually go
Go experiment with pacman because you want to learn arch
But you don't want to do a full blown arch installation
Or maybe you just want to sample the a you are because there's a lot of really great stuff in the a you are right
In fact, if anything and I've got a minute left and this is going to blow people away who know me
I am now more motivated to learn arch than I've ever been before
uh, because
The operating system doesn't matter
Kubernetes is your operating system docker composed docker is your operating system
You don't need to worry about your operating system because if you're running in a container
Nobody nobody really cares how you get your work done
As long as so you can build a workspace out that has arch Linux in it and get all the benefit of the a you are
And the a you are has tremendous benefit over over some of the other package managers that are out there
Uh, but on the but the flip side of that is if I want it such a I don't think I can do red hat
I don't think red hat has has a container. Do they?
No, I didn't think so fedora would be the closest one
Fedora. Oh, yep. There's fedora. So fedora is is a version of red hat, right?
So let's say so I needed let's I I don't work with rpm rpm is the package manager. We're going to talk about that today
But if I so so fedora has rpm and I can't remember the switches for rpm, right?
And so I can go in here and I could practice, you know, I can install rpm
Uh, I wonder if it's in the man pages on there. Nope, but I can install I can mess with rpm
and
You know I'm saying so so and then because
They all have different ways of doing things and I can quickly test what those ways are with like one command
I mean if you were doing this with a virtual machine yum yum as the other one. Yeah, there's young man rpm. They're different
Yeah, rpm is this is today. We're gonna talk we're gonna talk about that a lot actually
Uh, yeah, open shift is red has communities. Yes, it is
Um, yeah, I yep. I know all about that actually
Hmm
All right, so what's our next that our next video? Um
So hopefully that covers why you should care
Installing docker. All right, so I've done another video on this
Uh, I'm gonna do it really quick right now
Uh, thank you container for react. Yeah
We talked about the difference between a container and an image
Uh, I kind of got ahead of myself on that so we'll do that one
Uh, we talked about kubernetes as a new operating system. We talked about, uh
Containers are the new programs
Um
I'm gonna pump shoes in right now
Uh, let's see we did
I talked about linux distressed matter less in the container world
Um, we're gonna we're gonna do more with that a bit though
Uh, it's crude analogy to lego blocks
Yeah, except for they can talk to each other and you can plug them into get into each other sort of, you know
Uh kubernetes is all the way darker swarm is dead
Darker swarm is a nice technology. So it's composed uh darker composed, but
Uh kubernetes the enterprise has overwhelmingly adopted kubernetes
So I you know what it's like beta vh. Now it's an old reference. You won't get it
Hmm
As if I used to connect carriers, you know, not a perfect analogy, but yeah, it really does
And by the way, uh before we get into this thing
I'm actually a pen, you know, I've been tasked with learning kubernetes
And I've been really frustrated because there's so much to learn and the more I get into it the more I realize
I am learning every single component
metaphorically
Of an operating system
So if you are like me and you're trying to learn cloud native and you're trying to learn kubernetes and containers and everything
Uh, which is all the meta level of the stuff underneath. You still need to learn the stuff underneath before you learn the meta level
Uh, it's daunting. It's daunting because there is so much to imagine becoming an expert in everything
Including all the device drivers that run inside your computer
Well, that's what it feels like to become a kubernetes expert because there's so many moving parts because it's an operating system
And if you think of it that way, it'll make you feel better about how long it takes you to learn the whole thing
All right, so um
So let's come back to
Uh, what about service measures like on Istio? Yeah
Yeah, I I haven't I I know of them, but the service measures are going to be really interesting
Yeah
a big because
Well, okay, so he's asking about service measures. That's that's there's a bunch of technologies out there that are helping
all of the individual little little containers that are running
uh communicate and um
Yes, so I don't I don't want to go down that path actually one of my favorite things to play around with this protobuf and gRPC
These are ways for things to talk and really quickly to each other
Uh, and I'm trying to make a simple comparison
Uh, honestly the more this gets fleshed out and grows
Uh, the more and you know, the the the computer the computer components are actually called nodes
The more the idea of graph theory comes to play
Uh, yeah the rest of you guys in the future. I well, yeah, we'll see. I mean it with we'll see we'll see I mean
Yeah, I think eventually it will so
But the the the beginner the back to the beginner speak. Okay, so
um
As more and more containers get get run are running
Uh, so so I work for a company. Uh, that has over 200,000 nodes in its kubernetes cluster
200,000 nodes connected to the same kubernetes cluster
And they are all interacting those nodes, which are just computers with all the stuff that comes with the computer. They're all
Constantly running different things different different deployments. They're running containers in different combinations
They're running them as services and all of this stuff is talking to each other
And if if I could say one thing to help the beginners as they enter this cloud native space
Is to think about, you know
A neural net or a brain. In fact in many ways, uh,
We are recreating the infrastructure
Of the brain and what I find to be really fascinating
I won't get down. I sort of hard for me to not go down this this this tangent
But as we build out the infrastructure that is literally, you know, like the electronic digital equivalent of human brains
And at the same time
We are making advances in machine learning that uses that type of out in that type of framework and infrastructure
We are building skynet
You know, we are literally building at the same time. There's people working on
Getting all of this this hardware in this particular infrastructure
To communicate and to to learn and all kinds of stuff
And then we also are building out the infrastructure to be able to to put this on anything
Including stuff that's smaller like a robot, uh, which is running a miniature little kubernetes cluster
Called called edge computing by the way
edge computing is
Is what we get when
You have like your car your car is a little universe
Of a whole bunch of stuff talking to each other, right?
And so you would put a kubernetes cluster inside of your car i'm oversimplifying but you get it
Right and so you have a mars robert rover
It has a kubernetes cluster with each one of its sensors has its own note its own computer in it
And they all talk to the central kubernetes brain and coordinate through meshes and communication
And so what we've built is we've built the operating system the meta operating system that can be run
combining a bunch of different computers that are running in many many different ways
And as the number of computers increases
There's a new computer in your toaster as a computer in your refrigerator computer in your toothbrush
I mean it's getting so crazy
That that the little ecosystems of how these computers talk to each other
Will be managed by kubernetes or something like it and so learning this this technology is going to take us to the next level
Uh, and so we actually it's it's very frustrating iot, right? So but we had to have
Uh is building a terminator talk. Yeah, so but you know the terminator dog
For example the boston dynamic stuff it has so many independent little sensors and stuff that have to operate really quickly
And i don't believe they're using kubernetes right now, but the the idea of of kubernetes, you know orchestrating and managing as
As so right now the policies relatively are pretty simple
But as the policies about how things are done and managed
Within this ecosystem of nodes and container programs that are running on there as that improves
we're going to start to see really dramatic advances and
In what's going to eventually become organic computing because it's it's just really amazing
Uh, yeah, it does it took straight out of that one. It is okay. So that was quite a long
That's kind of a long break, but um, I do I do
Want to talk about these things because I you know part of that my my purpose here is to help you find motivation to do this stuff
and
I mean if it doesn't if if coding, you know
The the brain and nervous system
Uh as containers for you know, you'd have one container for each one of those sensors potentially
You know as if if doing that for like the next terminator dog from boston dynamics, doesn't it doesn't excite you?
Or you know doing it at a macro level and you know orchestrating like
Imagine what could do for cyber security?
There's an entire branch of cyber security if you want to get really rich on pentesting
build yourself out a kubernetes cluster at home or in the cloud and
point
You know point every one of those nodes
At the internet and have it, you know actively process the whole internet
Synchronizing all of its communication and stuff and then just cracking all the things and reporting to you just sit back and make money
I've read articles about people about pentesters who do that as the hobbies. That's what they do
They just they build their own kubernetes cluster at home
Or you know a hybrid including you know stuff they have from
From wherever they get their hosting provider and then they just point that thing into the internet and sit back and break the money in
It's crazy and these days you can actually
You can actually get super computer power on aws and some of these other ones where
Which is actually really affecting security because somebody can get ahold of your encrypted password file
and they can buy
like an hour of
massive massive computing power on amazon and they can crack that password in 12 minutes
And this is actually happening
And then they throw away they throw away all the resources
And so it's becoming an issue because you know
You know
The the the hacker in the corner over there now has a super computer. You can rent anytime he wants
so
So it's actually really interesting
The gorilla warfare. I don't know about that
but
I know so the first thing you have to do to enter this world
Hopefully that's motivating enough is to install docker and i'm going to start a video for this
Um, I did I did another video on this already, but i'm going to do another one
Okay, so
Uh
Ready you go
So in order to enter this world, we've just been talking about terminator and and and all sorts of crazy things
That that are coming about because of you know containerization and you know what that allows
For the coordination of all these containers to talk to each other
Including you know powering robots on edge or internet of things also
So and that led us to be well, okay. Well, let's actually get going with this. How do we do it?
Uh, the first step to entering this world is getting docker to run on your computer
And I mean short of having a terminal obviously, but the first actual container thing that you need to do
Yeah, so the the first thing you need to do is install docker
And I've done another video, uh about how to install docker and stuff
But this doesn't have to be long just get it, okay
And again the purpose of the boost is not to show you how to do it
Is to show you what to do and answer questions about what should it be this way or this way, right?
And we have a whole community to help you there
So if I spend all the time showing you how to install docker, we're just we're going to be here all day
So there there is overwhelming
You know material on how to install docker on your computer
So first of all, I'm just going to speak through the process
For windows and I'm going to speak through the process for mac and the process for linux
Okay, so and it's probably only going to take about 10 minutes
So for windows and we talked about this yesterday
The first thing you need is a terminal and we talked about how to get a terminal yesterday
Um, and then no we're going to use for the purposes of this boost. We're going to use docker
Okay
So there's going to be a lot of people that that are coming to this who know more if you're just starting out
Just get docker. Okay. Just get docker on your machine
And uh, whether whatever kind of machine you have, uh, if um
You can yes, you can
Yes, you absolutely can and we're going to do it. Uh, I do it every day all day
Yes, you absolutely can you don't even need to be a cell too
Uh, so the first thing you need is
Uh, we're not going to talk about container d right now. So
The container d if you hear people talk about container d and docker and what's the difference and don't panic. They're the same
Uh, docker
Docker got kind of open sourced and became container d. That's the short version
There's it's not completely accurate, but that's the short version and um
Uh, so
So if you have windows windows is by far the most complicated of this to do
so step one install
Wsl2
And there are lots of the the information about how to install ws o2 is is very
That varies widely
Go get the most recent stuff, but i'll tell you the process boils down to
Number one making sure you have the latest patched version of windows 10
That's probably where you're going to spend most of your time. You're going to be spending most of your time doing that
uh, the second thing is
You have to follow your scripts and stuff to install ws o2
And the biggest got you there is that people sometimes
Get hit with their hardware being too old or having a
virtualization not supported in the bios which means
And fortunately, this is the hardest part for windows users right now
That if you get hit with this you're going to have to boot your computer into bios
We talked about the bios on how linux works day
Um, and that's that blue thing that sort of screen that comes up
You have to go in there and you have to figure out how to look through yours and you need to go turn
Uh hyper v on
um
Yeah, and if you don't do that ws o2 won't work
and the reason for that the long the the simplest reason i can give you is because
uh hyper v is a
hardware level os virtualization
um
That is accelerated
So remember we talked about all these virtual machines and stuff that came out and i don't know 2005 or something like that
All of that stuff ended up getting optimized and and made speedier by the hardware people
And so then they started instead of just using virtualization
Uh through software they started to speed everything up through hardware kind of like how every time you play a video game now
You use a gpu once upon a time
There was no such thing as a gpu and all of those bullets and everything that you did on your first person shooter
Were software rendered, uh, you know if you remember back to the days of doom
Um, that was there was no gpu. That was all you know software and it was slow
And and so then that got optimized and that got put into all that stuff got put into
Um really oversimplifying but it got put into a gpu a graphics processing unit
And that was what led to you know the gaming movement
That's why you can do so many you know 4k screen full of microscopic, you know
Uh smoke particles and have it render fine because it's all uh really really powerfully accelerated by the gpu
Well, the same thing happened to
virtualization and that allowed
Speeding up the containerization as well. And that's what hyper v is hyper virtualization. So that is
You know the that is the manufacturers kind of way of speeding it up
Um and not all boards. I I think it's going to be
Turned down by the fault going forward
But we're going through this transition kind of where containerization virtualization or standardized has been a decade at least
But we're still kind of going through this as mainstream on everything
So there might be hardware that you have that doesn't have it
Um, that's the hardest gotcha of that other than that, uh the wsl 2
Make sure you get 2 and not 1. Okay
And I don't even need to tell you why you just want 2
2 is true linux
Oh the true linux kernel 1 is a linux emulation. It's not even linux
okay, so
2 is an actual linux kernel
1 was a linux emulation and they threw it out and say we're not using that
They turned it back on
There's some people been asking about hyper v
Uh security and and that has been
Uh, there's there's been kind of an upsurgence and people concerned about hardware level security
Um, so that's that's where that's someone that's coming from. No, I don't know if that's the only reason
I couldn't answer that completely but there are a number of exploits that can be done at the hardware level
So, you know, that's why it's harder to boot your computer off of a usb stick these days and and stuff like that because
You know, you can't do like a mr. Robot and you know
Elliott goes in there and and powers on a computer and reboots it on the usb stick and takes over the computer and bypasses all the security
Um, but we're not we're not gonna talk about that. So that's for docker if we got 17 minutes left on this
So I think I've covered all the windows stuff, right?
If you've installed the windows terminal
The next step after that is going to be
If you're using wsl 2, uh, I believe it is. It's one of my favorite all-time series of all time
It's very very hard to watch
Very very depressing and rough
But so make sure you're yeah, if you're in a happy place, it might destroy your happy place. I really like it
So the next thing
To consider is that when you're installing wsl
2 is as soon as you get wsl 2 it's it's useless until you have linux
So, uh, you're going to kind of get sucked into the next stage of this
Which is installing linux on windows
and that is not
Docker container with linux in it and I know that's going to confuse people. I've been trying really hard to get around that
Um, but when you install wsl 2
What you want to do most of you unless you're blocked by your enterprise
Most of you are going to go to your microsoft store
And you're going to download Ubuntu. So after you get wsl 2 on your computer
There's two things you're probably going to want to download from the microsoft store
You're going to want to get the the the microsoft terminal if you haven't already got it
Make sure it's the official one and
And windows terminal. Yeah
And the other we talked about terminal last night and I my mute my my my video got muted because I played the music
You go watch day four
and number two
You need to have a probably ubuntu. So
Put ubuntu on there ubuntu is hands down
Uh, the most uh, we're in the middle of a video
Uh, as many districts as you want. Yes, you can at wsl 2 you can put as many districts you want
Please don't get too distracted by this right now
You got a lot of stuff to do to get us through the boost and but you're it's up to you to decide how much time you have
Um, but this is the goal. So, oh, sorry
um
So the goal is to get
wsl 2 installed
uh to have
Uh ubuntu linux on there and to run that from the windows terminal that you have
Possibly customized with your favorite color scheme
That's the goal
By tomorrow, if not today, uh, you need to have that done and at the next the next piece of this
um
The next piece of this of course is going to be
Getting docker on your computer. So
Uh
And that that's what this video is supposed to be about but it's there's so many steps to getting to getting it so you can even install docker
Uh, yeah, you gotta have the color scheme
People want their color scheme to stay motivated. So
um, so
Then you go to docker.com and install docker desktop and that will be
The final thing for you to do if you want to do the tutorial
Uh for docker that they have you walk you through it's very the docker site the docker hub site for windows is just spectacular
It's really really great. It gives you it gives you a whole interactive session. It even gives you a live terminal
Uh and shows you, you know, what to do and how to do it and
Uh, it it's going to cover a lot of those bases and and then of course, uh, you know, I think think tomorrow
We're going to be really learning all the different docker commands
Uh, and that's not part of this video. So that's a pretty long-winded explanation for windows
I think most of you are going to be using windows
And so you're going to need to go through those steps. Let's recap one one more time
So install wsl 2 and if necessary tweak your your bios to make that work
um
and then
Install uh windows terminal
and ubuntu from the store
it was ubuntu for now
And and then install docker desktop
And when you install docker desktop, it'll ask you do you want to use wsl 2 uh to speed things up and you say yes
all right, so
Uh, if I were to make any pictures or you know diagram or document about that
It would be immediately out of date because they're going to change that stuff all the time. So that's the goal
The goal is to get wsl 2
Uh windows terminal we talked about yesterday ubuntu
Uh hyper v activated if you need to and and then to get to get docker desktop installed
Okay
And I'll do another video about what to do with docker once we get docker desktop installed
Um, if you have a mac, it's the same thing
Uh, although I today I just heard that mac. I I don't use a mac anymore, but mac users
Uh, you have the option to use docker desktop, but there may be some problems
So i'm going to recommend an alternative path
For for uh mac people. All right, so that does not use docker desktop
so
my
If you're if you're i'm going to say uh by the uh not tempted by the m1 mac. No. No. No. Hell no
um
Yeah, I was going to say so my recommendation for mac users. So we haven't talked about mac users. We're going to talk about mac users for the next 10 minutes
Um works for m1 now. There's an official release. Okay, so
Whether or not you have m1 or you don't have m1
Um macs are a lot closer to linux because they're unix under the hood
So you can actually treat a mac
More like a linux system from the beginning
And there is no docker desktop for linux. So even if there is a docker desktop for mac
Um, you don't need it. So I'm going to tell you my recommended path for putting docker on your mac
And then you can decide if you want to play around with docker desktop as an alternative path
But the the most supported way to get docker on your mac number one is to install brew
And if you don't know what brew is
Go research it again. The purpose of the boost is to tell you what you need to learn and do not to show you how
So number one go get brew. Thank you kangas. Um
Get brew brew is the lost window manager
Is it pre-installed? No, it's not
Is it pre-installed these days? That blows my mind
I didn't realize
I don't think it's pre-installed no
Usually it's just one line command line. You have to run but I'd be really surprised if it is
um, anyway, so
You have to run brew. We're not going to talk about all the other things you can put on your system with brew
there's lots of other things
And so the second step after you install brew
Is to do brew install docker and you can go read about how to install docker under brew
Okay
While you're I audit can I just make a recommendation to the mac users that's related to docker that might make you happier later
I really suggest you install the new utilities
and
You know, some of you are going to disagree with that
But if you want to use things like bash from your your mac and not from docker
That's one way to do it. It's this is not required for docker by any means
But so number one if you're a mac user install brew
Uh, you know, you should already know how to use your terminal figure that out
Color it up make it pretty and then make it connect and make it install brew
optionally install the the gnu utilities gnu core utilities uh as as
I mean that makes it feel like
Linux or anything else that you might be on bsd
Because it's it's the same stuff. It's not some different version of it
Um, and then docker. So it's probably going to be uh, you know a brew install docker
I don't know what it is but go look it up and then get docker on there
When you have it on there
Then you're going to be doing all of your docker stuff from the command line and you'll be ready to go into
The next the next video the next part of this that we're going to talk about today. So this video is almost done
um, and this this has been just a conversation about how
Um, it's not is it core utilities?
Yeah, gnu core utilities. Yep. That's the one
and uh, if you're a linux user you've already had to go through I mean
Unless you're 0.01 of the people who bought a linux machine
From their store. Has anybody actually done that? I doubt it seriously
Um, it's it's it's probably unlikely
um
so
So yeah, if
So docker, um
I mean it doesn't come with linux
But it's just you know, there's a docker installer to get it on linux
I don't know if there is anybody here who is a linux user from uh
So if for some reason you have installed
Linux and you've managed to get that far on your own because we're not covering that at the beginning of the boost
But if for some reason you're running from linux, uh, you will hit
A hurdle trying to install docker
There's many many ways to install docker. So uh, yeah
But let me just tell you, um
What I recommend for this so we're I'm actually working this very thing
And believe it or not, it's actually not as easy as you would think to install docker on linux
um
I don't know why it's this complicated
But there are many many ways to install docker and if you are a linux user
My recommendation with the last few minutes here is to download
This docker installation script
So here's the the url. I'll post it in the chat
um
And you can go get it
And you can run it
um
And you can curl it if you want. I'm not really a fan of that way of doing things, but
Uh, I mean I do curl stuff, but I don't like running stuff that's not been checked out first
um
System 76 is lost is awesome. Yes
Uh, I I love system 76. I wish I had one
Um, yeah, I I had a bad experience with them in 2014 when I bought I bought a laptop from them 2014 had to send it back
It was so underpowered
so, um
There's a bunch of stuff here
Uh, by the way, if you're into shell scripting, this is a really really well written shell script
So we're going to learn how to do shell scripting here
Uh over the next weeks or so and we are going to cover all of shell scripting
Uh, basic pausing shell scripting because it's not covered online very well
So that is something I am going to cover. Uh, and it might take us a week or two to do that, but we're going to try it
um
So here's the script that you have to run
And you just run that script and that will get darker on your system
And after that you can do darker dash dash version and see which darker you have
And you can have that uh i'm actually
Building a because you're wondering, uh, I'll just give you a hint here
We're not going to do any docker file stuff, but to any of you who know docker
uh, just a little little
Shout out to you here really quick. I'm actually in the middle of creating a workspace
container that has
Kind and hyperfine and and you know a bunch of it's like my preferred workspace for development
And i'm building this out as a docker image that then you could just run by just doing run
rwx rob slash workspace
And you would just get everything that I love to use all at once
I thought I'd call it a base, but it's got configuration files in there too. So it's not just a base
um
So so that's one way uh, and and if and just uh, eventually you guys would be able to do this kind of thing too
So, uh, and this is relatively new, um
Put bill done inside of that image. Yeah, I might need that in there. I don't know if you guys have any good
Yeah, so
I think that would be great to me goes. Yeah compliant images if you don't have one
So, uh, oh man, thanks for the cheers really appreciate that
um
So so here we have uh, we need this tariff. It's not ready. It's not ready yet guys
It's almost ready. I I tried really hard to get it ready for today. I didn't make it
So but just I just wanted to put that out there kind of a tantalizing thing if
By tomorrow, so this is the one of the reasons i'm doing this is if you want my workspace
Oh, it's huge. It's really I haven't even checked. It's got to be yeah
It's got to be over 80 gig at this point. I mean, it's got so much stuff in it
You know, but this is like everything that I use every day in my terminal and I just have to run it and it's all there
So it's like it's like installing linux without installing linux. I'm actually making it for work
Because where I work I need to take it and modify it
I did make a number of other things too though and like I'm anyway
I'm off track here, but I have a little bit extra minutes
So this is one of those things I was trying to tell you the advantage of containers
I can put all of my favorite applications all of my favorite
You know script plugins and aliases and and even full blown applications including browser sync and npm and node for that
I don't that's the only thing I need it for a hundred dollar bounty by the way
If you rewrite browser sync and go I'll pay that
Because it's the only it's the only npm dependency I have
I can put all that stuff into a single container. It's a big container, right?
It's a big container, but it's a container that's basically my workspace anywhere
I want to go and then I can just fire it up on windows or mac or you know
If I'm at a computer that that that's not mine. I can actually run my entire workspace instantly
By just grabbing it off of just installing docker. That's the trick. You have to have docker on the system first
so
A hundred dollars to shout out in my link. I totally would do it. I would I would totally do it
So that's the end of that video get get it on there
So if you're linux the the the uh the answer for if you're a linux user is a good chance
You already know how to install it, but I just want to I just want to tell you that I personally recommend running the
the docker install script
And that's how if you have linux. That's what I would do
um
And then the last way
Uh, well, I mean that's really it. I don't imagine anybody's running on raspberry pi or anything like that
That we're not quite ready to do all of this stuff on raspberry pi. In fact, the raspberry pi world is as awesome as it is
It's just not going to be
Uh robust enough for a while because most of the docker images that are out there are amd64
This changing it's am1 on apple is really changing that they're going to start to see more and more images
support arm architecture, but
um for right now, uh
That's kind of you know amd64 centric. So it's uh, so really and for the boost
We're just we're only talking about how to get it on windows how to get on a mac and how to get on a linux machine
If you happen to have one
all right
I need a break
And it was the fact that sbc is full of embedded developers
Yeah
Uh, I'm going to stand up
And when we come back, we'll see we can talk through the the docker some of the docker commands
So you guys can start playing around with it. Oh single board computers, right?
Yep, yep, yep
Uh pushing in kernel rc to support m1 really?
Wow
That's good. They need to do that. That's the kind of thing he likes to do
Traveld loves that stuff man. He got into it because of the hardware
Hmm
He does
Yeah
Well, you know, look the m1 is is like the next generation of cpus. It's there's no doubt
The arm the the amd stuff is legacy at this point. So it's just a matter of time before all of our cpus are running arm
Yeah
Yeah, it's it's you know, think about it. Think about how old the cp the non m1 arm stuff is
Those cpus date back to the 70s
You know late 70s early 80 early 80s 84 probably
I mean, that's that's a lot of baggage. That's a lot of technical debt
Uh, we're gonna talk about docker as root. Um, but we're not gonna get into that right now
You don't need to worry about whether docker is running his root
But uh, it is by default docker runs his root because the daemon runs his root. Um
If you installed it on, um, linux
Uh, I should probably do a video about how to do that
So, uh, actually, uh, 819. Okay. I have to go at 819
So if you have
Um, I was gonna say
I'm gonna go to my
So you have this, um
It's in the docker file
No, it's in the install docker file. So this took me a while to figure out. Um,
If you're working on linux
Uh, you need to add
Um
this
You need to add you if you add if you add yourself to the docker image
You won't have to sue you every time you run it
So
So here you go
Uh, custom health checks for docker
I have not yet. No, I haven't heard of that
Uh, why is the windows store ubuntu needed instead of containerized ubuntu linux?
Because we're gonna we're okay
That I know that's a horrible question
I I hate that this is the way it has to go
so
Um, I'm gonna answer that question. Um, I'm gonna answer that question on a video
Because that's a really valid question
Yep, I'm gonna before we go I'm gonna talk. I want to I want to specifically address that
Because it's so important and I hit it. I hit it the hard way
Yeah, so
So, but let's let's let's uh, let's make sure other people hear this
Um
Install docker
Uh
All right, so I'm gonna I'm gonna do a small video about that
Um
Right now
Uh, the visual two or one first of all
No, all right, so
All right, I somebody asked a question and I forgot to talk about this
Why am I installing ubuntu on wsl 2 if I'm just going to run ubuntu from a docker container?
Isn't that wasteful? I'm going to be running two linuxes on the same windows machine
And the answer is yes, you are and that's that's annoying
um
There the short answer is that
That wsl 2
Uh, tried to be all things sell people on windows
Um
And it can run it is a container architecture
Uh, it's kind of a hodgepodge hybrid microsoft mutation
between
Between you know docker, which is nice and encapsulated in sandbox and everything
And tries to do all this extra stuff for you and if you want to see me really lose my
Stuff go watch the youtube video where I complained about wsl 2
Because what wsl 2 is trying to do is integrate directly with the windows system
Uh by doing weird things with directory mounting and permissions and messing with firewall rules that don't work
If you're on an enterprise open connect connection, it just causes all kinds of problems
and um
So that is the main reason
So well like it somebody has actually tried to get
um
Docker to run docker desktop without wsl 2 and it's really hard
It's just a matter of time before they force you to install wsl 2 if it doesn't even come with it by the fault
So that's the reason you kind of have to have wsl 2 to do anything with linux on your computer
Uh these days on windows because they kind of have
Monopoly on on on how that happens. Um
And I don't know
We've I've been I've been talking a lot about whether they're going to make a fully linux
Enabled version of windows the writing's on the wall
I mean they just announced like a couple months ago the full x support
So they have graphic support now in wsl 2 full graphic support
Uh for you know for applications that are running and it's just a matter of time before they they pretty much do what mac did
with with bsd linux
And take over the next step, but you know and they take over and they do um, they they do with linux
um
The the main reason that you the okay, so let me just give you a quick story about what got me
I thought I could get away with not using wsl 2 on my work machine right here
And and so I tried it. I got you know, wsl 2 off. I did an installation and I could almost get there
But two things two things I noticed got in the way
uh, the first thing that got in the way
was
That wsl 2 is way faster
It optimizes your docker images and so but you know the question still remains
Why can't I just run all of my stuff using wsl 2?
And that that's the second part you cannot snap back wsl 2
There's nothing to snap
You know the thing about containers that we'll see is that you can you can um, you can like do the you can do this stuff with
um
I mean, you know, you can you can do this stuff with with when you're when you're writing
uh
Code and stuff like that and you make a mistake or you screw up your your container
One of the greatest things about containers is for experimentation and and all this stuff right and exercising and experimenting
You can totally totally mess up if you want to look for a hack
You can like find it and totally blow away your whole system with root access and and do all kinds of stuff for your containers
If you do that to wsl 2
You're having a bad day
Now technically speaking you're just impacting that one version of linux that was put on there
And you could go get another one and put that one on there also
So you do have some sort of ability to back it up like that
But generally speaking that's not the way people are using it
But the the real kicker and this will be the last one
the the real kicker
To this was
When I went to use docker within docker
And when I went to bind mount which means to make uh a file or a directory
On the host system appear inside of your container
We are not I don't know we're probably not going to get into that. That's some more advanced stuff for containers for an absolute beginner
Knowing how to map
Uh, you know, even though the knowing what a volume is, you know, it's kind of a stretch
But the but the idea is this, you know, if you want to make
Your container be able to see the same home directory that your computer host computer has
You have to do something called amount
And and it's there's with a dash v here and there's lots of other ways
And when you do that, it's a lot harder to do that without wsl2
In fact, a lot of the all the tutorials and everything online assume you have wsl2 on the computer
And this became
really acute
As a problem for me when I started wanting to do
Kubernetes development and testing and stuff inside of docker
Which meant that I needed to use docker inside of a container
And I know that's more than you wanted to hear but in order to do that you have to mount
var run docker.sock
Which is a file slash socket and have that appear also in your container
So they use the same docker register the local docker instance and to do that
Without wsl2
Is is virtually, you know, impossible. It's not impossible. You can do it using docker from power shell
Or from, you know, the command just batch
But you'd have to figure out how to get the paths to work
Using windows pathing and all of that. So that's that was the thing that really made me
keep wsl2
as
As the underlying
And you can't have wsl2 without having a kernel
You have and you know
Ubuntu is the one that I put on by default
So see so, you know, you have windows and then you have wsl2
Which is running ubuntu and then you're running a docker container inside of ubuntu inside of there
So there's like kind of the matryoshka doll sort of thing going on and that's fine
You won't even notice it. In fact, the thing that's even crazier about that is actually how much faster
It is to do that
when you have
Um, when yeah, it's like dockerception, right?
You would think that all of that layering would slow things down
But instead it's the exact opposite
So by having docker running within wsl2
And and having it be optimized to use wsl2, which is that little checkbox you're going to look for
That that's what you need and then that's all running inside of windows where you would be otherwise forced to use, you know
You know totally ugly backslashes and all sorts of ancient, you know command lines stuff
So wsl2 has its quirks and problems
But it still needs to be there in order to make your containers faster that are inside of it
And to enable them to be run in ways that are flexible
Uh, that won't really matter to you as a beginner
But as you go forward it will really matter to you because you're going to be wanting to have
your containers
Uh, remember all the holes we talked about about punching into your container. It's contained
It's in a sandbox, but how do we you know, how do we open up a hole so we can like make it run our own web servers
So I can run, you know, I can do web development on the airplane or something
This is all enabled by a containerization and and by wsl2, which is which is that's a long answer
I know but that is the path that they're going for that
Uh, uh, yeah, it's welcome welcome. I'm gonna go ahead and end this video and talk to the raiders
So so that's what's up
Let's take uh
Thanks, I'll take a five minute break here. How's it going? Thanks. Thanks for joining Eric. Thanks. Appreciate the read a lot, dude
Is there a case for docker within docker just mapping net to slash sbin
Without without nesting docker, yes
Uh, there is
So, uh, I'm gonna answer elder l l duderino. I'm gonna answer that question even though it's technically not a beginner question
Uh, and a lot of this by the way guys the first time I've ever used docker
In a professional sense was two weeks ago
So
Just you know, I'm coming at this pretty new myself myself
Uh, but I've you know, I've already written my own images and and I've got docker files down pretty well now
I'm happy by the way
I'm gonna ask this question
We're gonna talk about this when we get to the shell thing the most important
Programming language. Remember when we talked about containers being equivalent to programs and Kubernetes being equivalent to the operating system
Guess what the programming language is for containers
I just somebody's gonna yell at me for saying this
Yammel
No, it's yammel and shell
Yammel shell and go
Yeah, actually yammel yammel is not the language of containers
Yammel is the language of kubernetes and it's the language of docker compose
but the most important language you will learn
for
Uh, making your own containers
Is shell posix shell
At which I think is amazing because I was already leaning on
Teaching posix shell as the first language because it's already intuitive because you use it every day
Every time you enter any line on your computer terminal. You are writing an interactive program
Using the posix shell language or whatever your shell scripting language is
so, um
It's the docker as registry. It's the windows. It is kind of it is. Yeah
So so that really plays nicely. I mean, I don't know if you saw this, but if you look at my, um
So workspace
If you look at my docker file
Docker file is a language. It's an official language on github. Yeah
Docker file is an official language on github
And what is going on here? What's up with all these ampersands?
That's short circuit logic
In sort of an imperative way
The the bottom line is this this docker file syntax
Docker file has its own syntax, but the stuff that you write
Uh, it's I I don't know it. It's it's categorized as a language for whatever for whatever reason
um
Actually, I just read a thing today that said it was cater is a declarative language
So it's just as much a language as sql is
In fact, there are a lot of similarities between docker file and sql
If you if you've written a lot of sql
Uh, you know that sql has to be embedded in other things a lot of times
And so you get these these things have two languages in them
And run file these docker files. That's exactly what you get you get this kind of meta syntax, which is declarative
It's like the reverse of sql and then and then inside of it
Inside of it you get shell
And now I could if I wanted to put python on here or something I could but nobody does
Nobody does if if you look at all the docker file stuff
90 of every docker file I've ever looked in is written in posix shell
so
You know, I used to think that the language for cloud native
Was go and I if you're going to make cloud native applications it is
But the language of docker is posix shell hands down hands down
It's it's posix shell
Uh
Yeah, you can use anything you could if you if you just if you did python in here
You would have to use the python interpreter
Right, you'd have to do python dash c if you wanted to you could install up here
What you could do is you could install you could do apt install python like here. I am installing curl, right?
I have to install curl before I can use it down here to pull in all the stuff using curl
right
Or you can do this
You can write installers and stuff in python and then run them that way you can just run them that way
You can run them in purl scripts. You can do whatever you want if you run it this way
But you don't want to have lots of runs. This is I'm going to get rid of these
You don't want to have lots of these because everyone adds another overlay and it inflates your
It inflates your container and makes this this container so big. I don't care
But
Every single layer inflates it. That's what this is. This is multi-stage. So this is uh, this is taking this is like
These all have their own builders and it builds it and then then it copies the artifacts out of it
So that you can have individual builders for different things and you can make keep those up to date
So it's it's I love it. I mean it's this is the thing I was missing from my dot files
So and and I promise we'll go back to videos. Um, the thing I was really missing for my dot files was
Up until yesterday. I had all of my installers and my favorite because come on
It's not always a dub installer app to get right a lot of times there's some curling going on and
It depends on what thing you're installing if it's, you know, it's just go stuff. You have go get right and
So I had a collection of installer scripts
For all of this different stuff and it always bothered me because it wasn't
Technically dot files content inside of my dot files repo. It didn't really belong there
And it was kind of like, hey, this is all the stuff that I put on there that all my dot files uses
It's configuration. In fact, once upon a time, it used to be home underscore config
I'm really tempted to call it config but for searchability. I'm going to keep it call it dot
um, and anyway, so
So I just yesterday I broke out all of that installer stuff into a single
Uh repo which is public hasn't been published yet, but um
Uh, and this is it so and then I have an entry point and I'm really proud of this
So my entry point will go in and and it will ask you your your um
All your information so that you can synchronize your user accounts
With whatever the one is that you're that you want your user needs to go with stuff. Super fun
So I just really love it and I just I'm just trying to say so I was able to take all that installer crap
out of my dot files and put them in
Uh, this workspace repo which just has installers in it. Uh
Yeah, and so then what I'm doing, I don't have it in mind right now
So I'm going to make uh, so this is just called workspace
Um, but I I don't know if I'm going to put it in workspace or I'm going to have dot files use this as a base
Probably though
I'm going to I'm going to do this and I'm going to put it in here and this is going to actually
Mount my config files as well. In fact, I had it working last night. I had it working
I was I ran the docker container and I couldn't I couldn't tell where I was
Because I was inside of my container that was completely configured like my desktop my desktop login system
It's super cool. It's super cool. It's like it's like having just linux your your your your workspace your desktop
If you're a terminal person, it's like and by the way, you can still mount x terminal
If you have x applications you want to use all you have to do is bind the x sockets up and you can like do that
Just frazzle does that in a video. So I just I just I just you know on these breaks
I just have to tell you I'm super excited about this because because I've always wanted to be able to just be up
And running in a second anywhere and and not have to do all the installation and that you know
I've scripted that all up in my dot files and setup scripts and stuff
But that still is not ephemeral in other words, you know, if I run if I if I run setup
I can't undo it
Right. I have to go in there and have to write an uninstall script and it's really messy and dangerous
But if I run in fact, I'm seriously thinking
I'm seriously thinking of just having a system boot and then running my container on top of that
Because if anything goes wrong with any of anything in my system, I can always snap back the image and I'm good to go
I'm exactly where I was
so, uh
It's super cool. It's like having a it's like having your your your favorite linux workstation
With all of its customizations in your pocket ready to get reinstalled anywhere at a moment's notice
I mean, I it's just so cool. I just love it. I can't stop talking about
I think the really great thing is if I have like so say I was an independent contractor
And I was working for three different accounts, right? I could have a workstation
I have a workspace on the same computer on the same computer
I can have a workspace that is completely customized and built off of this base workspace
For a particular client and I can have another one that's completely customized for another client
And I can save those images if I wanted to I can make a doc file for those accounts
But I don't really even need to do that
I just need to commit the images as I go and then when I do when I want to work on an account
I just switch back and forth between the containers
If I make an update to my dot files I go into my repos directory and do git pull
And get all of my dot files changes to read only
And then I make all those changes and now now I have now I have like independent separation
Which is so great for so many reasons including legal reasons
So, you know, this I've only worked on this account from this containerized workspace period
That's the only thing but I'm on the same computer. I got other stuff over there
I'm cutting and pasting between terminals possibly but you know using tmux, which is even better, right because
You can actually have one container running in one tmux window
You can have another container running another tmux one. You can have like five accounts or five projects all working on
You know logically separate computers
By using docker. It's just so cool. I just I can't I can't it's so lightweight
It's just so lightweight. It's not if I was to have a bm's I'd be out of memory
I'd be out of memory after like this third one
So, yeah, one of those mirror mirror effects it goes forever. It kind of is that it kind of is it really is
Yeah
Um
Let's see is there are big data science images on docker hub. There's still pie some kind of numpy. Yeah
Yep. Yep. Yep. Yep. And that's that's actually there's there is a there's one for streaming
two
That will just fire up rtmp on engine x and you just run the thing
Give it your stream key and you can you can multi stream to anything you want
Just like that and you just set your obs to stream to that on your computer
I set that up in like five minutes because because of docker because of containers
um, so, yeah
It's just between them depending on like a thing I need. Yeah
Oh, wow. Check you out. That's cool. Really. That's really cool to hear
Yeah
connected to power switches
Oh man, that is so stinking cool
That is so cool
Yeah, virtualization might be a little easier there. Yeah
Uh, it'd be great for monitoring multiple environments. Uh, working on another. Yeah, totally
Uh, here's what's even crazier each one of those things can have different network settings
And that's an important thing. So by the way, that's the reason I am so bad at a shape about wsl2
wsl2 decides on windows decides to do
Decides that it needs to have more
Uh firewall rules in place. So it does not work with vpn
You you have to do a bunch of crazy power shell additions to trigger when the vpn is on and off if you're using the cisco vpn
And it's a pain in the butt if you just use a docker container though
It goes away because it uses your host
But you can also make completely different networking rules in your container
So remember I said like having like multiple containers running essentially different logical computers
They can all have totally different network settings
And so if you if you want to debug networking, I mean I used to say
You had to have you know a virtualization in order to do network tests and stuff like that, you know
I didn't really get it a chest
But um networking with wsl is a big threat that kangus. That's exactly that's exactly my gripe
That's my single biggest gripe
But but you know what it's crazy. I did not expect this
But if you use a container with nwsl, it gets around all of the networking problems. It's crazy
It's crazy. It bypasses them entirely
So because I don't know why I think it might be using the the host uh, which is
You know underneath and so it doesn't apply some of the dns
Anyway, so if if you if you're a network engineer and you want to practice with different ip stacks and stuff like that
You could spin up, you know
Do is using kubernetes or using compose docker compose both of those are kind of ways that people would do that
um
You can spin up like 20 machines with a particular network configuration
And have them all be in cluster and they don't ever impact anything outside of that computer
And and the footprint of all of those things docker swarm, right?
But compose you can try to sort of get the same thing
I didn't mean swarm but but compose you can sort of spin up a bunch of things at once as containers
You could you could pull that off too
But most people would just stick with kubernetes for that
The the point being is that you can explicitly think it was kind
You you can you can fire up like any number of configurations for how the networking goes around
But again with kubernetes though is it has really direct opinions about all the networking
So it kind of gets in your if you wanted to be a true network engineer as like I just wanted a bunch of machines
I wanted like do the networking myself
Um kubernetes might not be the way for you to go
It seems like overkill to learn that to do networking
But you can just fire just with docker only you could you could you know write a script or something and
Fire up, you know 10 computers with different ip configurations
And then figure out how to make them talk to each other and mess with their ip stacks
You can also like turn on packet sniffers and stuff like that
So if you if you're in cyber security and you want to see how chatty if an application is
You know you can turn that on and then have another another computer another docker container that's that's connected
You have to connect the the networks make sure they're on the same network
But if you connect their networks, you can actually sniff all the traffic on that network. It's really cool
It's just so cool
It's just you can basically containers give you the ability to test every possible combination
You can imagine whether it be from an application development perspective or network engineering
Uh or even you know file system configuration setups and and you know, it's just it's just an absolutely essential tool today
And i'm super excited about it. It's been really fun to do. Um, it's also
It is a layer of complexity on top of you know, you have to understand
How to use a computer in the first place, right?
Uh, no no vagrant no vagrant yet for me. I'm gonna try that do that next
Um, so if you're a beginner, please don't feel lost
Again, I'm gonna I'm gonna recap. Uh, the beginner goals. We only have like 10 minutes left. Um
Um
Web forms. Yeah, okay. So if you're absolutely brand new to this
Uh, let's first of all, let's take a let's take a check and see if we're on how on track we are
Uh, we talked about that. Uh, oh getting your first container
um
I think
I think we're gonna put this stuff for tomorrow. I had a feeling it was going to be
uh
Today
All right, so this is kind of bonus work if you want to do this at home
um, I I think this uh containerized world and
You know, I think this is kind of a kickoff on containers. And so tomorrow would be what are entry points, um
Uh an entry point an entry point is uh an application that runs
Yeah, it's different than command though because you can't bypass it you you can you just have to use dash dash entry point
Uh, I'm bunch of stuff. I'm learning about right now. So
Yeah, that's we're we're we're gonna we're gonna it's it's too much
Rocks yo, if you're lost, let me let me how let me okay. So to anybody who's lost here
The first thing I need to ask is
Go back and make sure you watch all the videos
there's only
You know, there's four days so you could probably catch up
Uh, if you're lost because you're just coming in the room
You know, there's that can't help you if you don't know what linux is
If you don't know what a process is and I can't draw I can I'm building on the knowledge that we talked about in those previous days
um
If if you so the end goal for today
Is to have docker installed
And that will include you probably playing around with the tutorial, but that's not required for today
Um, it's not required at all. You're the judge of you, but
Or the other boss of you you can do whatever you want. Um, but if you want to run your first container
Uh, you can go around docker run dash it12 and then you can start to get into
The command line and that is what we're going to be doing tomorrow tomorrow
We're going to be doing like docker run pull attach. We're going to go over the basic go docker commands
Uh, this is the part. Um, the docker tutorial is cool. Is it not?
Is it not? I mean even for the even for the the
Even for absolute beginners, uh, it's it's kind of it kind of holds your hand and shows you through how to do it
Uh, it does it does it does eat ram. Mm-hmm. You can tweak that and stuff, but uh
It I you definitely can tweak it so it doesn't use as much ram
um
Besides from go njs what a language would you tell a junior to learn back end?
uh
Shell POSIX shell is the most important language that we will learn
You're going to use shell more than use any of those other languages
Because every single command you type the command line is a shell command every single one
As I'm starting to think that learning POSIX shell is the most important language
Of the modern era, uh, even though it's a really old language
I can't believe I'm saying that
It's so quirky and weird
But if you know it
I mean, what's the only other language you're going to use more that remember how I used to make the argument that
JavaScript is ubiquitous and it's everywhere, right?
Well, what else is ubiquitous and everywhere?
the shell
The terminal shell is everywhere the most powerful language you'll ever learn
That you'll use every day is the shell
And yet it's not taught anywhere. Yeah, anywhere
I have never once heard of anybody learning shell in any academic capacity ever
It's kind of like just assumed
I mean, I imagine some college level they probably haven't but anyway, so tomorrow we're going to be learning how to run our darker containers
um
And we're not going to do darker file and darker compose for now
um
learning structures mattered less in container world
So yeah, we're going to install uh practice to install installing new distros
Uh, we probably will get some of the command line stuff tomorrow as well
um
I don't know which one to put up there. We probably are going to do
uh
Navigate the bash command line interface. I think we're probably would do that one
We're probably going to get pulled into package managers as well
Um, I know that's what we'll do that'll be fun
Um, yeah
Yep. Yep. Yep. Yep. Yep. Yep. Yep
So I'm going to put this stuff, um
It's going to seem weird to do that right away
um
People aren't because people are going to start doing all this stuff. They're going to be like I want to do more
Uh, I don't even think we need to have all these commands
I only think the command you the only command you need to do right now is run. Um
I I really don't need this
I'm going to change this
I
Do
No, I can't I you can't have it because you have to be able to go start your thing
I don't I'm afraid we're going to lose beginners on all the darker commands. There's not that many but
They are really hard to figure out if you don't get told how to do them
I had to kind of trial and error it and I could not understand the difference between
Full start attached stop remove and all that so I think it's probably worth showing
Uh, that difference. So, oh, so I guess we'll go ahead and do that. Um
Yeah, uh
Recommend OOP language scripting language
Yeah, I would not learn recommending OOP language at all
Uh, you gotta remember OOP is like way up here in the stack of languages that go all the way down to the kernel right or down
So OOP is just one way to make sense of the world
I think it's so much more important for you to make sense of the world in a step-by-step way
and then add on
these
object-oriented paradigms and things like that that are designed to help people understand
complex stuff
When you're first starting out, there's not a lot of complexity when it comes to coding
It's like do this then do that and I think it's really important to get that and she'll is really good at helping you understand that
and then and then and then
When you start to need that kind of thing you learn python and maybe you learn some OOP
Techniques and your scripts are getting a little bit more complicated. You're just kind of growing into the need
for more organizational tools and so you're like, yeah, this makes much more sense to organize all of these functions like this or
It makes more sense to organize all of this as an object-oriented program
But you should pick the paradigm that matches the scale and purpose of what you're trying to accomplish
But at the lowest level a computer just thinks about give me an instruction. What's the next instruction?
What's the next instruction? Should I go back and do that other instruction? That's it
So learning to think like a computer first is more important than learning
How to make sense of a lot of complicated data and that's what OOP is for
I think I think one of the I should probably make a video about this
But I think one of the failings of modern computer science education is that they start with the high level paradigms
by starting with a high level paradigm
You're injecting onto a beginner
this expectation that they are going to have a problem that requires
Very complicated organization of how stuff happens
Whether it's an event paradigm or an OOP paradigm or functional
All of those paradigms don't make sense to beginners
Because they're designed to make sense out of very complex things
And they haven't even figured out the basics about procedural programming and parity programming for step one step two step three
Uh, it teaches somebody how to go step wise through something
Is is not only easier to learn
But it's closer to how the computer actually works
And it's closer to what you are going to do as you interact with the computer every day
You don't think about what kind of method should I write right now? You think
I want to see what the output of you know, two plus five is or whatever, you know
And so when you use your computer every day
Humans are thinking in terms of inputs and outputs inputs and outputs
They're not thinking initially in terms of how am I going to organize this next task
They're only thinking about what's the next task at hand and did it work or not?
And should I repeat it and and that kind of flow approach
Uh, it's it's really underrated today. Um, and it's not procedural
It's not even I think imperative is probably the closest word for it. All it is is do this and then do this
It's just you know, and then if this then do that it's it's it's flow. It's basic step by step algorithms
And those are things that you need to get in your head. Uh faster than the other stuff
I kind of over talked about that but, uh, for a few months now makes sense to seeing how simply a powerful it is
Makes me want to give up. Uh, give up on any op languages
Look, I'm not I I think op languages have a real solid need in the industry particularly for things
I mean, there's a lot of very very complicated code that has to be
Organized and like any game programming, right game programming. It's just a no-brainer to do that in c++
because
At least it seems to me. I mean
I had somebody take me to task over this though and they said it's actually not
Uh, it's actually not objects that you're thinking about what you're actually thinking about is data-oriented programming
Uh for game development where you just have a bunch of things that have stats
And then you have a bunch of events that are happening to those things
Uh, but then and sometimes you have things that are doing things to other things
And so, you know, how do you track? How do you who gets the action, right?
So I know we've kind of gone off the deep end here with this last part of this of this boost
But I feel like we're I feel like we had a pretty good day
I don't I don't want to overwhelm everybody. So as we wind it down, we only have seven minutes or so left
So what are the goals? So by tomorrow?
You should have a working
terminal
With docker being able to enter the docker command from the command line
And if you want to you can start using doing the docker tutorial
I would uh, you could you can play around with the docker tutorial if you want to work ahead
Learn how the basic commands from the command line ls pwd and that kind of thing
Um, if you want a book to start cheating with right away, uh, there's a book called learning the linux command
line, which has uh, a lot of, uh
It still is a really good book. It's it's it's dated, but it's not as dated as other things
um
There is, uh
So linux command.org
Is this is a free book
I actually bought two copies of it
And uh
It turns out I didn't need to because it's right here for free
So the linux command line by william shots. Um, we used this book last year. Uh, we went through it quite quite meticulously
Uh, i'm not going to go through it at all. Uh, this year other than to say this is a good book to go through
um
So if you're if you've got your container up and maybe you've run your
Ubuntu command and you have a bunch of running and you want to work ahead
Start just like reading through the linux command line book possibly
Uh, the entire book is available as a free pdf. Um, or you can go buy it on no starch
They they don't tell you that it's free
It's it's like hidden right here. It's like it's available. Here he is free download this free this free thing. So
Uh, here it is and you can go ahead. It doesn't have all the pictures and stuff
But this does have
What is this shell exploring the system? There you go
So this is all stuff you can do inside of your shiny new container
If you have wsl 2 and you don't have docker setup you can even do this
in wsl 2 without running the container
But i'm still going to recommend that you get used to starting and stopping containers
uh for some of your projects because
Uh, the process of of installing things
Um is going to be a big part of that and and we're going to be doing that this manipulating files and directories
This is a really really good right here. Uh, I would never cover hard links for beginners, but
When we go through these basic commands, I'm I'm eliminating a lot of the
Unnecessary commands. Um, just to get us through the boost and over time you're going to be adding a lot
Which is why we talked about creating notes
Creating your own zelocasts and creating your own black book whatever your method is
You need to start doing that because why you're going to research or read about it and you're going to write about it
Right, you're going to write about how you like to do this command what you need to remember from it
And then you're going to start exercising and experimenting with it. And that's what the containers are for
So so this is something you can read to supplement your research if you want to do that
Okay, um
My favorite c-book to date is uh head for c for beginners
And I know that that gets
Gets people very easy. No the silo ken thompson is a horrible book
That's a horrible horrible book. Don't get that book
particularly if you're a beginner
It's one of the worst books ever written
Um, and and it doesn't even teach you modern z
so
Yeah, no just don't just do head for c
I was just gonna say I you get you get people that are really fanatic and
They'll they'll recommend you write the ken thompson, but ken thompson is a horrible writer
Yeah, it's no surprise that he made awk to me
Uh, he is he's a horrible writer. I'm just gonna say he he we were so I about 25 in advance
of his book on go programming and
And I was like so excited about that
and
and
Yeah, I was so excited about it and I had a guy
Um, yes. Yes. I did. Why are you here to troll?
You're not you're getting recorded by the way. Just you know
Uh
My college c-class is scientists use k and rc. Of course it did
Because it's college college is still operating on old ideas
The head for c makes people makes bombastic assholes in college
Want to throw you out the door?
Because it actually uses the science of learning by being silly and the same techniques that
Memory competitive memory people use to remember things one of the techniques is to remember a story
So these people who remember pi out to 500 numbers
They do it by making a narrative in their head because our our our memories are visual and they're
Experiential and so what they do is they make a narrative in their head
Of them walking through a town and and having very distinct details that represent each one of the numbers and then they replay
they replay
Those they they replay those narratives inside of their head when they're reciting and they close their eyes
And they replay their dream that they've built for themselves because the most lasting memories
Are those that are experiential or or memory driven and that's why we dream and stuff
And so I mean there's very very good neuroscience that says
That the way that the head for the absolutely crazy silly means that head for c
use uh uses are actually substantial
And I know this because I did the same thing on accident
I was like always doing memes in my classes teaching students and they were saying we love that
I have never ever forgot for loops because I associated with badgers and we did a meme for badgers, right? So
um
So the uh college algorithms class right now. So the reason that I am so
anti
You know black and white book with no memorable thing in it whatsoever
Is because it's not built to help you absorb the information and have you keep it in your brain
It's bad enough that you have to read it without you know writing about it in an extra
So, you know experimenting with it, but if you just have to read it and and and k and r
Uh, uh, yeah black and white books are and you know, it's it's not there's a reason that when you're a kid
I mean seriously, there's a reason that when you're a kid you like the picture books
You like the picture books because you were able to create a narrative in your mind
A story that was a little bit helped by that and if you'll if you're honest with yourself
The books the novels that you remember the most are the ones that you were able to create
An imaginary world I can still remember scenes from the Hobbit in my mind
That have never existed for anybody else because every time I read it I read it very slowly and I'm like building that
That world in my brain as I'm reading it. That's also how you learn other things
And so when head and foresee, you know, this absolutely silly book that would be thrown out the door
By any bombastic, you know, like full of themselves academic
Those are the things that cause people to learn but the the institution for education
Doesn't accept that that's the thing they write those textbooks for the people that they're selling them to
Not for the people that are using them
That's that's the worst disaster. That's the the most disastrous tragedy
Of the entire textbook industry almost every formal textbook that costs 80 dollars is a total racket
It's written for the phd, you know
Whoever the the high end, you know full themselves academics who have to make the decision about the books that's going to be used at their school
It's not made to be evaluated by the people who have to pay for the book and the people who have to read the book
It's one of my biggest pet peeves
One of my biggest pet peeves is one of the reasons I will never enter traditional academia
um
Yeah, I love the whole head first series. In fact, somebody was telling me you could get the humble bum though
Humble bumble had the entire head first series for some like serious discount
I think rw. I think rw grim was talking about that
Yeah
Uh
Yeah, like in case they're referencing in homework, right? Yeah, let's say something about first c++. I don't know. I haven't read that one yet
I I really like the head first approach. It it tends to be more verbose
Any book is not going to have enough things for you to do in it
The number one critique I get of any book is it didn't have enough exercises for me to do
Every single time I ask a young person
What's your what was the thing you don't do or don't like it didn't have enough projects for me to do
It didn't have enough things for me to do and that's why on the first day or second day
We talked about how you need to get into the habit of building your own exploration your own exercises
Out of the content and the content doesn't have to be from any one of these books
You can actually make the content up yourself by researching the internet and build your own plan
You know kind of in an autodidactic way and write it all out
And then and then you can have a book if to help you out
Well, this book is missing like a number of things here
I want to I want to see if I can get good with doing this, right?
So you might actually have to make your own things up and when we get into shell scripting
I'm actually kind of conflicted about this right now
There's two ways to go into this and I'm gonna
I'm I'm I'm gonna tell you right now. I'm gonna stick with the way that I did
with my python clauses in 2015
Uh, which is to take a really fun little exercise
And and be silly with it
And then to add in code that goes with it
Because by doing that that silly little exercise
Kind of becomes the reference point mentally for the concept that we're coming
And we probably I probably use the same old memes that I used to use
Because they're really fun
And but it's it's it's totally silly and and some of the more, you know, formal academics out there will just laugh at me
They'll be like, why are you doing that?
Like, I don't know. We just haven't followed it man. And why do we have to get so front, you know
pan of shape
You know, you don't have to write theorems and proofs, you know to to learn how to code. I mean
Those things are substantially important when it comes time to proving an approach over another approach
Against another person who actually cares about whether this approach is better than the other one
But yeah, as we go through this, we're gonna we're gonna be hitting a bunch of that
Um, it's not all three. So I'm gonna go ahead and go raid somebody. Um
Who should we raid? I will be back tonight. Uh, I'll be working on my on my my dot files
And my workspace container if you want to jump ahead and look at some of that stuff
Uh, it's definitely the screen reader in the entire book
Uh
A screen reader for an entire book
Yeah, I I it depends on the read on this on the
Oh, you're talking about it a book book. Yeah. Yeah, I know what you mean
It doesn't stick as well. You know, it's funny too. I I don't know if there's any science to this
I truly think that there's this this might be because I'm old and might be because
it's true there's something about
having the physical part of a book
that
I think triggers different neural pathways in addition to
What's actually there?
And I know that because when I when I like when I like write an underline in a book
When I when I underline something in a book with my hand
Uh, I can feel the thing I can see the letters getting underlined when I select it with a kindle
Or I copy and paste it and put it into my notes
Into my zettle cast and it doesn't seem to stick as well. And I don't I don't know why I don't know why
I I want to think that that's because you're you're you're actually activating multiple different pathways
in your brain that are related to the thing
And and I you know, it's it's it's it's not politically correct to say that because it like makes books go away and stuff like that
um
But I don't know why I just I would find myself like scribbling in the margins
The next best thing to that that I've done is I've had a notebook
When I'm like when I'm doing screen stuff when I'm reading stuff on the screen or my kindle
I'll have my notebook my physical notebook next to my kindle
And I and rather than doing anything on the kindle, I'll write notes and I'll rewrite sentences
You remember talked about the r or the w and rwx, right?
I'll rewrite sentences or I'll take my favorite passages and I'll put them in another book, particularly if it's on kindle
Because I'm not going to screw around with selections and all this stuff
So like if like like there's a really really good go book that just came out this kindle only lately
And that's the only way to take notes. You either take notes in the kindle
Or you take them in the physical because you can't get a physical copy of the book period
So I think I think having that might might help
Yeah, some people hate highlighting in books because it it takes away from the book
Uh, the other thing is bad about a book is you can't search it
So when you want to go back and find the stuff that's in there, but a lot of times when you have a book
It's not for searchability. It's it's that's a that's a tough thing to say because I mean my my O'Reilly book
My I wish I had I wish I still had that I hope I can find that somewhere
It's got to be worth so much money
It's like unix in a nutshell
It's one of the very first books that was ever out. I should probably wrap this up, but
Unix in a nutshell. This was my first experience with
uh, anything
anything with unix
And no that was not it. It's the old one really really old one
No, no, no, no, no this one there we go
I have this original uh, I was printed in like 96 97 when was it?
Anybody anybody else know this one?
Unix in a nutshell. It's my first unix book
Now updated for svr4
AT&T svr4 if you go back and watch the unix linux history day
Uh, you'll understand that better
A desktop quick reference for system v system. They would say system v too. They wouldn't say system 5
System v and slur is 2.0
uh
This is this is like before
Uh, oh, yeah, this is this is like way before that this this is when when they were just starting out
They were just getting popular and then they exploded
Exploded everybody at it
And referees I know isn't that funny
Oh, it makes me happy it does it still warms up. I have this book somewhere. I can't find it
I I've had this book. It's one of the few books you should see the edges of it
I mean it has like how to use man in there and how to use trough and enroth and like really really old commands that
it's like a command reference
And most of it is completely out of date
It has how to do born shell scripting and k shell scripting and tc shell scripting
All three of them are included
Yeah, it's really old
So, uh, by the way, if if you want to jump ahead and do shell scripting
Uh, I haven't looked at it yet, but I've been I've been contemplating
Uh, the posix uh shell scripting tutorial, which has been around for a while
Um, I should tell you the truth. I haven't ever gone through
Um specific posix
material posix it's actually been one of those things I've struggled with over the years. Um
Because
Yeah, because it's uh, it's hard to find a good reference. This is this one's been around there for a while though. So
Anyway, there's head first algorithms go
is there
I don't know if I would have an head first algorithms. I
I would I would stick with mastering algorithms to see myself on that if you're going to do algorithms
But but yeah
Uh, what else we got here? So posix shell file expansion shell basics. I'm pretty sure this is going to be our standard material for posix
Uh, this this tutorial has been around for a very very long time. Um
And it looks like I got updated. That's cool. It's not very sexy, but
It's been around for a long time
And I like it because it's a nice reference to to stuff and it's it's a little bit happier than
Look at that. 1984. I mean this seriously this thing has been around
while
Uh, it was originally published in the summer. They um with posix though you want the old stuff
You don't want any new stuff. I wonder what he does with the local operator
I know I'm off the I'm off the rails for you guys if you have to go you have to go
When I when I call this
But I I want to see if you put the local the local keyword in here because I was just looking at it
That's how you know somebody really knows posix is if they don't put local in the list and the shell check program doesn't do that
It's totally wrong
um
So I don't know if it's going to have it or not
Uh set environment variables special variables path, blah, blah, blah
this one
Uh, oh, yeah, so command expansion is this is something I didn't learn until in my 40s
I I didn't know that parameter expansion was a part of posix
I thought almost a whole time. I was at IBM
Uh, thanks for hey Ivan. How's it going? Thanks for the feedback
Um
No, don't see it. No, it's not there because it's not a part of it. Ha ha ha
I mean sometimes it's I mean, yeah, anyway
I mean like why are we going to use this if so if you if you really want to jump ahead and and learn how to
Write posix it's still worth learning bash, but learn posix first
and then
You know then then everything you do all your scripts will work with z shell if you're on a mac or they'll work with
Whatever right it doesn't matter. Um because they work on everything
Echo shell that doesn't always work by the way. That's how you know you don't have an interactive shell
All right, this is cool. Um
I'm getting ahead of myself. It's time for me to go. Oh, yeah, I was supposed to be rating somebody
Who are we rating people?
Who are we rating anybody have any any any any hints is mastermind on?
I haven't seen him on in a while. Oh straggers there are regulars are regulars
You'll see him griffing. He's awesome
Uh, oh, hey downright's on
um
I haven't rated him in a while
He's doing his cyber spirit stuff
I really love her too. Uh, where's x?
How else we got nick wan is on he's great to doing his data science stuff
Uh, anybody unknown that we could go
Great, I guess we could do that right
Uh, yeah, he's doing a lot of the packet stuff
Uh, let's go ahead and boost very hard into the oh tanya was over there. Yay
Linux sizing there. Yeah, we're gonna chase tanya one down tanya wasn't over here because he's using the linux kernel
I have to answer this I mean is is that I'm gonna have to mute
Like you'll have to look up what they're doing, but
They're essentially taking linux as an idea and making it
Correct
But that user that
ebpf might be a user, but it requires
low-level control of systems
Right, like the it's like the windows advanced firewall, you know, you need to be an administrator to modify that because
It's doing
low-level
system control
Yeah, I don't really know the extent so I'm like definitely ignorant at so what they're doing around linux, but they're doing something with linux
and windows and
putting them together
Hey
You
You
