Hey friends, in this lesson we're going to talk about variables and constants.
Before we get into that, I just want to show you a really good resource that's from Rick
Carlino on GitHub. You can see I forked it here myself just because it's good resources like this.
I like to fork just so I have my own copy that I know is not going to get changed or get
deleted or anything like that. It's got a lot of stuff that we covered.
Or that we will covering this course and just a lot of useful, useful like commands and
words and stuff for forth. So cool resource. If you just search g forth underscore cheat underscore
sheet and whatever search engine it should be at least one of the top results and it'll
probably be this Rick Carlino one. So cool resource just wanted to share that with you.
Where'd my mouse go? There we go.
So let's let's get into variables and constants.
So
and in fourth a variable is kind of special because it's a way of
going outside of the stack. So, you know, we know how fourth is very stack oriented
with a variable you can store a value in the variable instead of storing it on the stack.
The main difference between variables and constants variables are they can they can be
changed. They can change as you're you know throughout your programming.
But constants once you set them, they can't they can't be changed the rest of the program. So
let's declare a variable. So to declare a variable, you just use the variable word, and then you
give it a name. So now we have a variable named ABC. And basically, so fourth works just like
similar to see where the variables are basically pointers to memory locations. And then you're
going to store the value in that memory location and just use the variables a pointer. So if we
actually have a variable, we're going to store the value in that memory location and just use the
pointer. So if we actually put in our variable name into the interpreter, our memory location gets
put on the stack instead of the instead of the value of the variable. And right now this variable
doesn't have a value anyway. But that's that's what's going to happen even if it does have a value.
And here's what it's assigned a value. So that's how you assign a value to a variable.
Basically, you you put in the variables name. So I'll get through that step by step. But
so there's a value. So
let me just let's this is really cool. So I want to make sure I'm explaining this right. So okay,
there's nothing on the stack. So let's create a new variable variable.
Zen, just because 10 and Zen, yeah, that's why my brain. So okay, nothing on the stacks though,
we have a variable Zen, we put a 10 on the stack. And then we put our variables memory
location on the stack, right? And then this exclamation point word basically takes the top
two values of the stack, the top one, it considers a memory address, and the bot the lower one, it
it assigns that value to that memory address. So that's how that's how you assign a value to
variables. It just makes so much sense, right? It's very clear, exactly what it's doing. You don't
have to. This is why forth is brilliant, like you don't need to we can you can put that, you know,
these different things on different lines, whichever different lines we want or make them happen at
different times. It's just really brilliant. So if you want to see the value of a variable,
oh, I used ABC and so does that. That's okay. You just do a question mark.
And it'll give you the value. And what that does is puts that memory address location,
and then on the stack. And then this question mark just looks at the top value on the stack as a
memory location and goes and sees what values stored there. If you want to instead of putting
the variables memory location on the stack, if you want to put its value, you use the at symbol.
So now there's a 10 on the stack as we put its value instead of its memory location.
And one more, if you want to
There's something in there's something with a lot of most programming languages that
it's called like shadowing, I think that's what it's called most of the time. And it's where
it's like this, ABC equals ABC plus 10 or something like that. So it's where you can
use a variable to add the variable to itself, basically. And you can do that in forth too.
So the way you do that is with this word, it's the plus and then the exclamation point.
So what do we have on our stack, we have a 10 on the stack. So
we'll say we want in our value of ABC is 10. Still just a 10 on the stack, right? Yep. So
let's say we want to add four to that. Or
Yeah, so we'll put a four on the stack. We want to and then we put
our variables memory location on the stack. And then
the this is going to go to that memory location, look at the value and then add the
that value to the second value on the stack. So we should get 14.
And and then it's going to it's going to put that value not back on the stack,
but it puts it in that memory address location. So
you can see it took those top two values off the stack. And if we look at our variables,
value now, you see it's 14.
So that's that's pretty good summary of variables constants, they're
they're declared similarly to variables with just the word constant instead of variable.
And then you name it.
And it so it takes the top value on the stack. Now, with a constant,
we can't change that value now. So if we try to go,
this doesn't really make sense in interpreted mode, like, but if we were actually writing a
program, this would, oh, we can redefine it, I guess, but
we couldn't do something like
that where it's going to, you know, shadow it or anything like that. I don't think it's
basically it's supposed to stay the same the whole time throughout the program.
Nothing is going to be able to change it. Unless you do it explicitly, like I just did.
Constants, they don't, they don't represent a location in memory, like variables do. So if,
if I put
11d1 into the interpreter, so that it puts it on the stack, it actually puts
that value of that variable of that constant. I'm going to redefine that because I want to be
11d1, not 11d12 or 11d2. So yeah, it, as you can see, it puts that
111 on the stack. What that, what that means with a constant is you can actually just use a constant
just like you would use a number value. So instead of like a, with a variable, if you want to use
the value on a variable, you have to, you know, do that with a constant, you can just use
so we should get 121 here. Oh, what did I just do? Oops, man, off my game tonight.
121. All right, so at least at least the interpreters doing stuff, right? That's when we got worried.
All right, so that that's actually sums everything up with variables and constants,
they're pretty simple. So I mean, as with any programming languages, that's a simple concept.
So you can see though, it's interesting and forth that even though variables and constants
are a way to kind of sidestep the stack, they still use the stack very, very, very heavily.
So it's just a very stack oriented language. And I think that's pretty cool about it. So
on the next video, we're going to look at arrays. So stick around, subscribe, like,
you know, or thumbs up or whatever it is on YouTube. So thanks for watching. See you later.
