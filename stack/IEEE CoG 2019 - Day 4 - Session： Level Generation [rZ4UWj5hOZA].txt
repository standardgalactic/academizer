So Daniel Lashlock is going to give the first talk on generating maps with the do what's possible representation
And I think my co-author is in another session, or maybe he'll be here in a minute. He wasn't up this morning
So the do what's possible representation
Is something that comes from a problem in the American mathematical monthly in
1957 and I first encountered this when I was an undergraduate and some professor that was checking to see if I was smart said here
Solve this problem without explaining it to me, and I eventually solved it
And then it just lay in my memory for 20 years until I suddenly realized it was just what I needed to make synthetic DNA data for
bioinformatics and
That worked fairly well. It allowed me to make a bunch of
tunably random examples of DNA. Ah, thank you my co-author
What happened is this funny technique that enables this representation
Representation just kept turning out to be useful
So first I'm going to explain what the heck the representation is then I'll tell you how to use it to lay out rooms like the ones at the bottom
And then I'll explain why right after submitting this paper. We thought I made other things we should have done
So
The do what's possible representation is a drop-in replacement for any representation
Specifies a linear string of characters or commands. There are two parts
The first is the complex string generator and it generates an infinite string in the sense that you can always ask it for another character
And it just keeps turning out strings then there's the generative possibility filter
So the idea is the infinite string generator is spraying out a series of commands and only some of them make sense
So the generative possibility filter stands in its way and throws away the ones that don't make sense
And you could the best way to think of a complex string generator is as a really low-quality
Evolvable random number generator and by low quality. I mean it has a lot of pattern in it and that pattern is actually useful
Okay, so
That is
The version I eventually came up with for the 1957 math problem. It's a self-driving automata
And notice that it's milling architecture
So like your finger state a and you see a zero you go to state B and you cough out two ones
And the fact it can cough out more than one character means that you can drive its
input with its output
To generate an infinite string this thing goes like zero. I see a zero one one
I see a one zero. I see a one one. I see a zero zero zero
And so it generates this string and the problem in the mathematical monthly was prove
This is the decimal expansion of an irrational number. It turns out that sequence is in fact a periodic
Which means it's not going to fall into some sort of reading repeating pattern
Okay, now if you know what logical depth is it turns out that the self-driving automata generate logical depth very very efficiently
if you don't know what it is don't worry about it and
What I'm doing here is I'm going to have these things and they'll spray bits, but now I'm going to compile the bits into numbers
Originally like I said, I use them as a source of synthetic DNA
And what you do is you can evolve them to have higher or lower levels of entropy
Which gives you DNA that looks more and more like uniformly random DNA that was useful for testing a bunch of feature
recognizers for classifying DNA sequences and in fact
so
one way you can measure the complexity sequences and this is the I
Want to say roughly call my bar complexity
But you just take a window of width 8 and see how often things happen and compute the entropy of that empirical distribution
Now there's another
Self-driving automata that I believe makes something that's really easy to prove to be periodic because it generates something like 0 1 1
0 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 and the ones just keep getting longer
But once I've got these bits spraying out I can use them to place rooms now when I place rooms
My fitness is going to be the square of the area of the rooms divided by the area of the bounding box in the room
So I'm encouraging it to lay down a lot of rooms and compactly
That's what the dividing by the bounding box does and as the nurse come out
I just compiled bits to make the following decisions by going like mob the number of rooms
Which room am I going to try to put a room next to on what side how big is the new room?
What is the alignment of the room you can slide it up and down once you know where it goes and
Is the new room a quarter and the generative possibility filter is really easy is there space for a room there?
So this thing is going to go
And the possibility filter will just say don't put down the ones that overlap another room
And it works pretty well the starting room
Which is four by four is in red and like in the left example only one room got placed next to the starting room in
right one three of them did and
so
red is starting blower corridors, but you're just rooms of width one and
Everything I laid down is great. You're guaranteed the room structure will be connected as a treat because you're putting rooms next to rooms
But in fact the please be dense condition causes a whole lot of other reconvergence
And there's lots and lots of adjacent rooms also
We did this pretty quickly which is why there are no doors or treasures or monsters or anything
One of the referees was quite upset that we just threw down a bunch of rooms
Okay, so they have to show oh this is the slide that I was put in that
I don't really need and these details are in the paper
But the really relevant part is with two exceptions each fitness evaluation was initialized with a single four by four room
And we did a parameter study and I'll have the results of that the results of that were
Pleasant though it turned out the parameter study was not very helpful
Now if you look at the evolved map
It's obvious that if I choose a random room in either of those maps
I can't put a room next to it with probability about point nine. It's just filled up around it
And so the recent room hack changes the rooms that may be selected as initial targets for adjacency placement to the 10
Most recently created rooms and that really speeds up how fast the thing lays down rooms and probably since
The room has the people in it that does you've all thought of five or six other better ways to do that
And so we did a parameter study where we checked the mutation rate the population size
And then we did a study where we implemented the recent room hack and checked the number of states
And then we get two funny studies one
I just ran evolution ten times as long in the actuals in more rooms if you do that and
Then we try using a non-standard starting room. So
That's a pretty sad parameter study and the way you put a topspin on that is the representation is robust to the choice of parameters
I mean there's there's some advantage, but none of it is statistically significant
And so now it doesn't really matter which population size or mutation rate I choose
And then we did the state study and it turns out that having two shooting states is bad and
The intermediate ones look slightly better, but again the only one significant worse is when the machine only had four states
but notice
I
250 so that's around 1200
Both hundred be up there so the recent room hack
meant every run with it outperformed every run without it, so it's a really good idea and
And
There's a no recent room hack recent room hack
So, you know, I think I think it got ahead by having much more area down
But it also had a bigger bounding box that's sort of unavoidable
So that shows that the recent room hack shows up in the phenotype in a very distinct way
And then yeah, I ran things for longer and on a much larger board and you've had no problem filling the board and
Then we also tried changing the starting room
Good, I'm doing fine for time. So instead of having a four by four room
We put a really long like two by thirty two corridor in there
And as you can see changing the starting room really helped and in fact if you started with a seed dungeon that had like
Room room room room corridor corridor
You'd never get stuck because you'd have such a high surface area in a second the notion of surface area
Which is all the rooms where you could put more rooms is sort of relevant to analyzing all this and
This is Kristoff's idea. He he said something about well
Can they fill in something that isn't just an empty space and it turns out the answer is yes
And he has this plan to do expressive range analysis in the future
Which is where I learned about expressive range analysis and
Again, I've used a giant room, but you've had no trouble making a letter. I maybe we should make a whole alphabet
And
This is something we came up with after submitting the paper
This was in our vision paper answering the Ripple of Toggleby so it can fill in very irregular areas efficiently
Now one thing we haven't tested that I think I'll wait now
Let's not do the future work before getting to the future work. Okay, the recent room hack isn't bad
But tracking failures to place next to a room and removing it from the active list after several failures is better
If a room can't place a room next to it probably it really can't and so you delete it from the active list
That tends to keep the the placement of rooms near the surface of the growing structure
Clearly the next passive doors opponents treasures traps, etc. Is an early priority for future work
and
We could put those in a way in the self-driving automata because it can keep making decisions about a room or
It might be better to do it downstream by stealing ideas from evostar that has this huge track on
Architecture that actually tells you not only how to lay out rooms, but how to figure out which one's the master bedroom
ogre or
Walk-in closet treasury. Yeah, whatever
So
Now this is the thing I think I'm most excited about I always evolve these things on a fixed background
But they're highly adaptive they have a pattern trying to put down rooms and it gets better at filling in the space
You're testing it on but I think if you like challenged it with several different spaces and
Fitness evaluate on all of them. You might get something that's good at just generally laying out rooms into any sort of empty space or partially empty space
The idea so in the past when I've done this I was just coughed out the thing I needed the idea spring bits and
Numbers so that I can make a series of decisions that have different numbers of outcomes is original in this paper
But I've already thought of a bunch of other things to
Do with it and then these these rather large maps are specified by objects that contain 200 bits
So these are very very
Compact ways of laying out huge numbers of rooms and in fact there's a control experiment
I want to try where I generate 20 random bits and use it cyclically and see what kind of map I get out of that and
then
There are
In other work. I've done. I have a whole lot of other complex string generators
Besides the self-driving automata one of those a very simple GP system that only has three commands
print zero print one and go to somewhere else
Except the go-to only works every other time you execute it
Which means the go-to's can jump past one another and create a very complex system
Context this same representation can evolve an 8-bit gray code in a couple of seconds
It actually can find a Hamilton path in an eight-dimensional hypercube quickly. So this seems to be a very powerful
Representation I've done a number of other things with it. Sorry. We have plenty of time for questions. Yes, son
So I think it's a nice
Actually that my baseline was generate a random sequence of bits and use it cyclically, but no, I haven't done that baseline
Um
Yes, you could and it would probably work moderately well
Something that isn't visible here because I didn't write it into the fitness function though is the random number generator will never give me a
Regular appearing way of laying out rooms like a barracks or a dormitory this can't but no
That's a good idea and might just cycle through some random bits would be a similar baseline
Like I said, we did this in like three weeks
You see you people in sick, I sort of agree with your hard deadline
Thing but it causes me to rush my papers
It still comes as a surprise
Quite
It's this side and up a little and now you can't put a room there so the next one is here
So yeah, you could already see it starting to do things a random number generator probably wouldn't
I
This point I wouldn't change the filter because the filter gets called an incredible number of times
I changed the fitness function, but yes, you can rewrite the fitness function to control what comes out a lot
Your starting room so you showed how the size and the dimensions of the starting room
Can you do this with two rooms?
You could lay down a skeleton of the dungeon with ten rooms connected by corridors
All you do all it does is it has a list of rooms
It's allowed to try and you can initialize with whatever list of rooms you want starting with one room was easy
Even if they're disconnected sorry. Oh, yeah, you could start with disconnected rooms
There would be no guarantee it would it has no clue about connectivity. It doesn't use that
I get connectivity because I'm always putting rooms adjacent to one another and because of the
Please stay compact constraint divide by B
There tends to be far more chase than you've rooms than is caused by the way it's laid down
But now you could tinker with this system and make it do all
Then the fitness function as well
Yeah, and in fact what I was saying is building the fitness function would be a better place than building it into the generative
Possibility filter because the generative possibility filter is inside inside inside a tight loop
So there's a game called broke like the shoe that you might be interested in
The two reasons one is that you actually like it's it's it's dungeon generator
Kind of has this step in it not with this sort of complexity and intricacy
But the same kind of requirements of like placing rooms as close to each other and it's sort of so you might it might be interesting to you
To see like how the designer use that and what like weird cats they put in and also then there's like
And then later on there's like the way that they like render things might be interesting to you as well
Because because they have merged rooms into lakes and things like that
So I don't know if that would be like an interesting thing for the future
Oh, it would and in fact one so far putting in a lake or something. That would be what I call required content
I want to know there's a lake there. So I probably put the lake down
So yeah, so I understand me saying but it's so the way he does it is I think there's specific reasons
He's got this really nice talk about why but like you have emerging rooms
I think you can like 15 connectivity elsewhere or something
I can't but there was a reason for it, but I'm sure you find it interesting
Thank you
Last question
So what would you have to do to get more variation in the size and shapes of the rooms
Right now I cough out 4 bits and take it mod 4 mod 4 to get the room dimensions
I'd have to turn that 4 into a 6 or an 8
No, the things like how big this was the rooms are
From 2 to 4 by from 2 to 4 and that's from a proof of concept
But you make the rooms as big as you like and you can also lay down the things you want to be there first and then have the fitness function
Include and it has to be navigable and that's like a star. So it's not real expensive
You
