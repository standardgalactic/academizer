One of my favorite command line utilities is a program called AUK. AUK is a text processing
utility that means you give it some text and it can grab certain columns, certain rows,
certain fields from that text for you. You can tell it to go search for certain string
patterns in the text and even replace those string patterns with other strings. It's
a really powerful program and it's one I use all the time. I probably overuse AUK.
I use AUK everywhere, especially in my shell scripting because I'm really comfortable with
it and it's one of those programs that once you learn AUK, you wonder why you didn't learn it
sooner because it's such a powerful program. So let me switch over to a terminal emulator and
let's play around a little bit with AUK. So I'm going to run the PS command just because
this command gives us some output that we can manipulate the text a little bit with and it's
nice and in columns and that's kind of what we want, columned information because then AUK can
go in and grab certain columns from this output for us. So if I take the output from PS and then
run it through AUK and then single quotes and then give it inside braces and action, the action I
wanted to perform is I wanted to print and then space dollar symbol one. That stands for the very
first field, the first column. So print the first column from each line. So I should get the output
of PID and then these numbers here and if I hit enter, that's exactly what we get. Now if instead
of the first column, you wanted the second column, you know, you just change dollar symbol one to
dollar symbol two and how it determines what the columns are, spaces are columns in AUK. That's
what it is by default. You can change the field separator from spaces to any character you like
but by default, if you don't change it, it treats a space as what separates the columns.
For the print command, dollar symbol zero, if you do print dollar symbol zero, that means print
everything essentially. That's essentially like catting a file and or in this case, we're just
doing the same thing as the PS itself. It's like we're not manipulating anything. We're just printing
the output exactly how it came to us. If I did print without anything at all, that's essentially
print dollar symbol zero again. It's kind of like a cat. So one of the files that people love to use
AUK on on GNU slash Linux systems is the slash etsy slash past WD file. That is a file that lists
all the users on your Linux system. So if I did a cat on slash etsy slash past WD,
this is what the output looks like. There's not a lot of spaces to it. There are columns. I mean,
it is separated into columns with the columns. They are separated by colons here. Remember,
AUK treats spaces as the column delineator. So what you would have to do here is you would have
to do something like AUK dash capital F for field separator. And then inside double quotes, let's
tell it instead of using spaces as the field separator, let's use the colon as the field
separator. And then let's do inside single quotes and the braces print is the action
and dollar symbol one that should give us a list of users on the system. And then we of course,
we need to specify where we're getting all of this from we're getting this from the slash etsy slash
past WD file. And that is a very convenient way to get every single user on the system on a Linux
system. So you use that all the time, you'll use it just, you know, system administration or sometimes
through scripting. Sometimes you don't want to get a list of all the users in a script. Now let's
take that same command. So I'll do an up arrow. And instead of just printing the very first column,
what if I wanted, you know, several columns, well, you can do that, you can print the first column,
and then I could do dollar symbol six for the six column dollar symbol seven for the seventh column.
And what this is saying, I want you to print columns one, six and seven from the slash etsy
slash past WD file using colons as the separator. And that's what the output of that would look
like. Now it's not very readable, because we didn't tell it to separate the columns with spaces or
colons or anything. We told it, hey, print columns one, six and seven basically all jumbled up together
is what that is actually telling it to do. But we can tell it, hey, you know what,
put some spaces in here. So I can do double quotes and then space and then double quotes inside the
double quotes a space in between the columns here. If I run that, we added spaces to that. Now that
still doesn't look very readable, probably better than spaces inside the double quotes would be
a forward slash T. And what that will do is that will give us a proper tab in between the columns.
And hopefully that lines up a little better. And it does it, it's much more readable that way.
Now other than specifying a field separator to search for and use, you know, to determine what
the columns are, you can actually specify alt to actually print out the field separator as well.
And you can tell it to change the field separator to a different character as part of the output.
So if I ran this command right here, what this is is inside the single quotes now,
I have two different actions. So the very first action is begin and then fs equals colon,
and then semicolon, OFS equals dash. So this is saying, hey, find the, the colons treat them as
the field separator to perform these actions. But as part of the output, print a field separator that
is a dash. And what I want you to print, I want you to print the first six and seventh columns
on slash etsy slash past WD. And if I run this, you can see the output. Now I have columns one,
six and seven, and the separator is dashes. And that's actually printed out this time,
it actually prints out the separator, where by default, alt typically doesn't print out separators.
Now one cool thing that you can do with alt as far as printing columns, there's a very easy way to
print the last column of each line. It's with print, dollar symbol, capital N, capital F. Let
me show you this. What I'll do is let's cat the slash etsy slash shells file here. And this lists
all the shells that are available on my system right now. And what I could do is if I wanted to
print out all the shells on my system, but I didn't want the full path name, you know, I just want
sh bash, get shells, the sh fish, you know, the proper names without the full path. What I could
do is I could pipe this through all core, I could just use the alt command, I don't need to cat and
then pipe it into all I can just do this all dash capital F. And then inside the double quotes here,
I'm going to tell it use the slash as the field separator. Then what I want you to do is then
I want you to do search for a particular string here. So I'm going to do slash slash. And what
this is is inside these slashes here, all is going to search for a pattern. What is the pattern I
want you to search for? I want you to find the beginning of every line. So that's the carrot
symbol that begins with a slash. Now you have to escape that slash in between the two outer
slashes. So it's going to search for basically every line that begins with a slash. That is what
we're looking for. That way it ignores these first three lines, which are, you know, not information
I'm interested in. And then after that, what we want to do is we want to actually print
and dollar symbol capital N, capital F, print the last field. And if we did this right,
and of course we didn't do this right, because I get no output, because obviously you have to
specify slash etsy slash shells at the end, my bad. And then I get a list of all the available
shells on my system. But you see, there are some duplicates, I have two ZSH, I have two fish.
So what I could also do is other than, you know, just running the alt command, I could then take
the output from that alt command and then pipe it into unique, you know, and then it removes
the duplicated entries. So every entry now has to be unique. And that is actually a list of all
the available shells on my system right now. And of course, through the magic of piping,
if I wanted to properly sort this alphabetically, you know, to make this even more readable,
I could do that as well. And let me clear the screen. And let's run the df command, because
this is another common command that has nice columned information that people love performing
alt on. So let's do df and I'm going to run this through alt, I'm going to go ahead and pipe it
into alt. And let's look for a particular string of information. So what I'm going to do is inside
these slashes, what do I want to search for? I only want to return the lines that have slash
div. Actually, let's narrow it down even further. I want the lines that include slash div and slash
loop. So that particular string slash div slash loop. And then what I want you to do is I want
you to take those lines that have that string. And then I want you to print columns one, let's
just do one. Okay. And then let's print a few other lines. And let's do again, let's just do tabs
here. So let's print the second field and then another tab and then print the third field. So
we're going to take the first second and third column on every line that includes the string
slash div slash loop. And there we go on that. Now one neat thing you could do here is alt is a
proper scripting language in itself. And it does do simple math. If I instead of printing columns
two and three, maybe I wanted to perform some kind of arithmetic, you know, some mathematics
on these, these numbers here. So what I could do is I could do something like
print column one and then a tab and then print two plus three. And there you get column one. And
then you get the sum of columns two and three, the numbers, you know, added together. And of course,
by instead of plus wanting to do minus, I could but on the loops, those columns are actually the
same number. So it should be zeros across the board. Now one of the cool things you can do with
AUK is you can filter results by the length of the line itself. So let me cat slash etsy slash
shells one more time because it's such a simple file to work with here. And what I could do is I
could AUK and then single quotes again. And this time what I want you to do is run this function
length and then inside parentheses, dollar symbol zero. So I want the the length of the line and
I want it to be greater than seven characters and then give it a file to actually run this on slash
etsy slash shells. And it's only going to return the lines that were greater than seven characters
because there was one line that was less than seven characters slash bin slash sh was only six
characters. You see, I filtered that out by using the length function. If you wanted to see just
slash bin slash sh, what I could do is rerun that command itself instead of length, greater than seven
less than seven. And now the only line that is returned actually was the blank line. There was
one empty line. Let me rerun that command and do less than eight. And now I have two lines. Now I
have the empty line and then I also have this slash bin slash sh line. Another example of AUK,
you know, as an almost scripting language in and of itself is let's do the ps command again for the
processes. I'm going to do ps-ef. This is a list of all the processes that are running on my machine
right now. What I could do is I could pipe this into AUK. And I'm going to do inside the single
quotes this time. And then a brace pair here, I'm going to do an if statement. So let's do if
and then inside parentheses, I'm going to do dollar symbol in F. So if the last field, because
remember dollar symbol in F is the last field space equals equals. And then if the last field
equals slash bin slash fish, because fish is my default shell. So there's going to be several
instances of fish running on the system right now, probably at least I'm assuming this will not work
obviously if fish isn't running, but I'm going to print dollar symbol zero. So every line where
the last field is slash bin slash fish. And right now there are four processes running on my system
that had slash bin slash fish as the name of the process. Another cool scripting example that you
could do with AUK, you could do something like this. Let's do AUK and then let's do begin. And then
let's go ahead and get the squirrely braces out. And instead of an if statement this time, why don't
we do a four statement? I'm going to do four. And then let's go ahead and declare a value of an
integer. So I'm going to do i equals one and then semicolon. I'm also going to declare that i is less
than or equal to 10. And then semicolon and then i plus plus. So I want you to incrementally add one
to i until you get to 10. Right, we're going to take i from one to 10. And then what I want you
to do is let's do a print statement after that. And then I'm going to do double quotes and inside
the double quotes, I'm going to do the square root of and then comma space i comma space.
The word is comma space and then i times i and then semicolon at the end. So can you guys see
what that's going to do? We're going to take every number one through 10 and get the square root of
it, right? When it's going to print out the square root of i is the actual square root. I misspelled
square though. Let's go ahead and actually make that the correct spelling. And there you go, the
square root of one through 10. Another thing you can do with ALC is you can have it print out every
line of a document that begins with a certain character or a certain string. So here's an example
of that from my bash RC. So what I'm doing in this is I'm telling ALC and then in the side of the
single quotes, I'm saying the first column needs to be, needs to match this search pattern and it
needs to match the beginning of the line needs to be either a B or a C. And then what I want you to
do is print the entire line. So print every line where the very first character is either a B or a
C. And those are all the lines from my bash RC that meet that criteria. Now let me clear the screen.
I'm going to cat out this file that I created just as an example file here, because you often have
this kind of stuff on your system or, you know, sometimes you're dealing with these column layout
kind of files, especially where you have line numbers. So, you know, one column is just numbering
one through whatever, and then you have a second column. And, you know, sometimes you want to print
out just the second column. Now, of course, with all what I could do is I could tell it just to
print out the second column, right? Because spaces, spaces are the field separator. But, you know,
sometimes, you know, sometimes you may want to do it a different way depending on the layout of the
file. So let me show you an alternative method we could use. I could do something like alt and then
inside single quotes, print. And this time I'm going to use this function here, this substring
function. And then inside parentheses, we're going to tell it to print the dollar symbol zero comma,
and then four. So what I'm saying in this statement here is I want you to print every line,
but I don't want you to print until the fourth character. So ignore the first three characters
of every line. And if I run that, you see, no longer do I have the line numbers, you know,
that very first column. Now I just have the second column, which was a list of window managers.
Now, another neat thing we could do to that number dot text file is I could run a command
like this here. What this is going to do is it's going to find every line, what I want to do is I
want to find every window manager in that list that had the letter O as part of the name. So that is
what the match function is doing is saying match on every line, the letter O. And then every line
that has the letter O in it, I want you to run print, which I want you to do is print that line,
and then follow it with this string has O character at, and then the function R start,
that is the index location where the letter O actually appeared on the line. I hope that
makes sense. Let me show you this in action. So this is the output line one X monad has O as
part of the name. So X monad has O character at the index position is six, meaning O is actually
the six character on the line. Now, sometimes you want to print a range of lines. So there's the DF
command, but you know, I don't want all of this information. Maybe I want only a section of the
output from the DF command. Well, what I could do is I could DF, I could pipe that into all,
let's get into the single quotes, and I'm going to tell it in our, which is the number of records.
So think of the number of records as the line numbers essentially in our equals equals seven.
So you need two equals for it to actually mean equals. So in our equals equals seven. And then
I want to do a range from line seven to line, let's do line 11. And then space and then we want to
run this action here print in our the number of records, dollar symbol zero. So if I run that,
what we should get is line six through 11 printed out from the DF command. And there you go. And
we even get the line numbers as part of the command, because that's what the in the print
in our means. Now, if I didn't want the line numbers as part of the output, I just delete the
in our part. And now we get the output without the line numbers. A common thing you can also do
with all that I find myself doing occasionally is getting a line count with all. So what you could
do is let's do this on the slash etsy slash shells file that we were working with earlier. So I'm
going to do all and then inside the single quotes, I'm going to do end space. And then let's do the
print action again, print in our again, that's the number of records, that's the number of lines
on slash etsy slash shells. And we get 13 return, that's how many lines are in slash etsy slash
shells. Now, what's really cool is you can actually do this on multiple files, and it will
actually add the number of lines together. So if I wanted the number of lines all together in my
slash etsy slash shells file, and also my slash etsy slash past WD file, I get 55 returned.
So that's just a little bit of alch there. I'm not a master at alch by any means, but I know a lot
of the alch commands, I know enough to where it's one of my go to things, especially with shell
scripting. If I need to manipulate text in some way, you know, typically, I do it with alch,
even if it may make sense to do it with other tools, you know, you have other things like
grep and said a bunch of other command line utilities, I'm always alching. Like I said,
in the beginning of this video, I probably overuse alch a little bit, but but it's such a cool command
that I think everybody needs to know about, especially if you really want to start getting
serious as far as shell scripting, you really need to know how alch works. Now, before I go,
I need to thank a few special people. I need to thank the producers of this episode,
Ebsi, Gabe, James, Mitchell, Akami, Alan, Chuck, David, Dylan, Gregory, Euryon, Paul, Polytech,
Scott, Steven, Sven, Wes, and Willie. These guys, they're my high steered patrons over on Patreon.
Without these guys, this episode about the alt command would not have been possible.
The show is also brought to you by each and every one of these ladies and gentlemen as well.
All these names you're seeing on the screen, all these fine ladies and gentlemen, they help
support my work over on Patreon because I don't have any corporate sponsors. It's just me and
you guys, the community. If you'd like to support my work, I'd appreciate it. Look for distro tube
over on Patreon. All right, guys. Peace.
