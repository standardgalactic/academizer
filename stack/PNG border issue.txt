PNG border issue
Skip to content
Abrir barra lateral
ChatGPT
4o
ChatGPT
4o
Compartir
PLUS
Dijiste:
What on earth happened to my website, I adjusted the size of the png and now there is a white border or frame (rounded edges) around it on the website, I just wanted the image with absolutely no border or frame? <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Old Website</title>
  <style>
    body {
      margin: 0;
      background: black;
      color: white;
      font-family: sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: start;
      min-height: 200vh; /* Make sure there's enough scroll space */
    }
    h1 {
      margin: 20px;
      font-size: 2em;
      text-align: center;
    }
    img {
      display: block;
      max-width: 100%;
      height: auto;
      cursor: pointer;
      border: 2px solid white;
      border-radius: 8px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
<!-- <h1>My Old Website</h1> -->
  <img id="portfolioImage" src="sga-portfolio.png" alt="Old Portfolio Screenshot">

  <script>
    const img = document.getElementById('portfolioImage');
    const image1 = 'sga-portfolio.png';
    const image2 = 'latin-portfolio.png';

    function toggleImage() {
      img.src = img.src.includes(image1) ? image2 : image1;
    }

    img.addEventListener('click', toggleImage);
    document.addEventListener('keydown', toggleImage);
    document.addEventListener('touchstart', toggleImage);

    // Scroll to center of image on load
    window.addEventListener('load', () => {
      const rect = img.getBoundingClientRect();
      const imgTop = rect.top + window.scrollY;
      const imgHeight = rect.height;
      const centerY = imgTop + imgHeight / 2 - window.innerHeight / 2;
      window.scrollTo({ top: centerY, behavior: 'instant' });
    });
  </script>
</body>
</html>
ChatGPT dijo:
Ah, I see what happened! That white border and the rounded edges you’re seeing around your PNG image are
explicitly set in your CSS
:
In your
<style>
block, this is the culprit:
css
Copiar código
img
{
display
: block;
max-width
:
100%
;
height
: auto;
cursor
: pointer;
border
:
2px
solid white;
/* <-- White border */
border-radius
:
8px
;
/* <-- Rounded corners */
margin
:
0
auto;
}
If you want the image to appear with
no border or frame at all
, just update your CSS like this:
css
Copiar código
img
{
display
: block;
max-width
:
100%
;
height
: auto;
cursor
: pointer;
border
: none;
/* No border */
border-radius
:
0
;
/* No rounded corners */
margin
:
0
auto;
}
That'll strip it back to just the image itself — no border, no rounded corners, just the PNG as-is.
Also, if the PNG has transparency and you're seeing something weird like a white frame
inside the image itself
, that might be due to the image file rather than the HTML/CSS. In that case:
Double-check the PNG doesn’t have baked-in white edges.
Try opening it in a photo editor with transparency support (like Photoshop or GIMP) and inspect the edges.
Want me to check anything else in the layout while we're here?
Dijiste:
When you click on the image on mobile it should switch to latin-portfolio.png (and back again with another click) I mean to touch it with your finger: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Old Website</title>
  <style>
    body {
      margin: 0;
      background: black;
      color: white;
      font-family: sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: start;
      min-height: 200vh; /* Make sure there's enough scroll space */
    }
    h1 {
      margin: 20px;
      font-size: 2em;
      text-align: center;
    }
    img {
  display: block;
  max-width: 100%;
  height: auto;
  cursor: pointer;
  border: none;              /* No border */
  border-radius: 0;          /* No rounded corners */
  margin: 0 auto;
}

  </style>
</head>
<body>
<!-- <h1>My Old Website</h1> -->
  <img id="portfolioImage" src="sga-portfolio.png" alt="Old Portfolio Screenshot">

  <script>
    const img = document.getElementById('portfolioImage');
    const image1 = 'sga-portfolio.png';
    const image2 = 'latin-portfolio.png';

    function toggleImage() {
      img.src = img.src.includes(image1) ? image2 : image1;
    }

    img.addEventListener('click', toggleImage);
    document.addEventListener('keydown', toggleImage);
    document.addEventListener('touchstart', toggleImage);

    // Scroll to center of image on load
    window.addEventListener('load', () => {
      const rect = img.getBoundingClientRect();
      const imgTop = rect.top + window.scrollY;
      const imgHeight = rect.height;
      const centerY = imgTop + imgHeight / 2 - window.innerHeight / 2;
      window.scrollTo({ top: centerY, behavior: 'instant' });
    });
  </script>
</body>
</html>
ChatGPT dijo:
You're super close — just one small tweak needed! Right now, you're using:
js
Copiar código
document
.
addEventListener
(
'touchstart'
, toggleImage);
Which means
any touch anywhere on the screen
, not just on the image, will toggle the image. That’s probably not what you want.
Instead, you want to listen for
touchstart
only on the image
, like you're already doing with the
click
event.
✅ Fix: Attach
touchstart
to the image element
Update this part of your script:
js
Copiar código
img.
addEventListener
(
'click'
, toggleImage);
document
.
addEventListener
(
'keydown'
, toggleImage);
document
.
addEventListener
(
'touchstart'
, toggleImage);
To this:
js
Copiar código
img.
addEventListener
(
'click'
, toggleImage);
img.
addEventListener
(
'touchstart'
, toggleImage);
// Only on image
document
.
addEventListener
(
'keydown'
, toggleImage);
Optional: Debounce rapid toggling on mobile
Sometimes mobile devices trigger both
touchstart
and
click
, causing two toggles super fast. If you notice that happening, we can debounce it (let me know and I’ll help add that in).
But give this fix a go first — should work cleanly on mobile with finger taps! Want help testing mobile behavior or making it smoother with animations or fades between images?
Dijiste:
Yeah I think it is doing two toggles, or something I changed the line but the only way to change it is to move my finger a slight bit before letting go, else it switches twice in a row: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Old Website</title>
  <style>
    body {
      margin: 0;
      background: black;
      color: white;
      font-family: sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: start;
      min-height: 200vh; /* Make sure there's enough scroll space */
    }
    h1 {
      margin: 20px;
      font-size: 2em;
      text-align: center;
    }
    img {
  display: block;
  max-width: 100%;
  height: auto;
  cursor: pointer;
  border: none;              /* No border */
  border-radius: 0;          /* No rounded corners */
  margin: 0 auto;
}

  </style>
</head>
<body>
<!-- <h1>My Old Website</h1> -->
  <img id="portfolioImage" src="sga-portfolio.png" alt="Old Portfolio Screenshot">

  <script>
    const img = document.getElementById('portfolioImage');
    const image1 = 'sga-portfolio.png';
    const image2 = 'latin-portfolio.png';

    function toggleImage() {
      img.src = img.src.includes(image1) ? image2 : image1;
    }

    img.addEventListener('click', toggleImage);
    img.addEventListener('touchstart', toggleImage);
    document.addEventListener('keydown', toggleImage);

    // Scroll to center of image on load
    window.addEventListener('load', () => {
      const rect = img.getBoundingClientRect();
      const imgTop = rect.top + window.scrollY;
      const imgHeight = rect.height;
      const centerY = imgTop + imgHeight / 2 - window.innerHeight / 2;
      window.scrollTo({ top: centerY, behavior: 'instant' });
    });
  </script>
</body>
</html>
ChatGPT dijo:
Ahhh yep — you're running into the classic
"touch triggers click"
issue on mobile. Most mobile browsers fire both
touchstart
and
click
events on the same tap, which causes your image to toggle
twice
(and end up looking like it didn't change at all).
✅ Fix: Prevent the double toggle by only using
touchstart
OR
click
, not both
Here’s a clean, cross-platform solution:
html
Copiar código
<
script
>
const
img =
document
.
getElementById
(
'portfolioImage'
);
const
image1 =
'sga-portfolio.png'
;
const
image2 =
'latin-portfolio.png'
;
function
toggleImage
(
) {
    img.
src
= img.
src
.
includes
(image1) ? image2 : image1;
  }
// Detect touch support and use the appropriate event
const
isTouchDevice =
'ontouchstart'
in
window
|| navigator.
maxTouchPoints
>
0
;
if
(isTouchDevice) {
    img.
addEventListener
(
'touchstart'
,
(
e
) => {
      e.
preventDefault
();
// Prevent click from firing
toggleImage
();
    }, {
passive
:
false
});
// passive: false is needed to allow preventDefault
}
else
{
    img.
addEventListener
(
'click'
, toggleImage);
  }
// Optional: keep keyboard toggle for accessibility
document
.
addEventListener
(
'keydown'
, toggleImage);
// Scroll to center of image on load
window
.
addEventListener
(
'load'
,
() =>
{
const
rect = img.
getBoundingClientRect
();
const
imgTop = rect.
top
+
window
.
scrollY
;
const
imgHeight = rect.
height
;
const
centerY = imgTop + imgHeight /
2
-
window
.
innerHeight
/
2
;
window
.
scrollTo
({
top
: centerY,
behavior
:
'instant'
});
  });
</
script
>
Why this works:
It detects if the device is touch-capable.
If yes, it
only
uses
touchstart
and cancels the default action to stop the follow-up
click
.
If not, it just uses a regular
click
listener for desktop.
Try this out and give it a tap — should be smooth now. Let me know if you want to add a fade transition or anything fancy between the two images!
Buscar
Investigar a fondo
ChatGPT puede cometer errores. Comprueba la información importante.
?

