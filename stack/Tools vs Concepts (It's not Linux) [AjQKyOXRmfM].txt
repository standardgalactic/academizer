I know it's boring, but my friend, one of my friends keep asking me to make a video about
the right mindset because I think most people who watch my channel, they don't have it.
And he's like, what's the point of making all that bullshit videos if your users don't
have the correct mindset.
All right.
So first of all, why you keep asking in the comments that I want to get good with Linux.
I mean, I understand even I write in my videos that, okay, how to get good with Linux.
But in the end of the day, this is not how you should, okay, you say it, it's fine.
But if you are thinking like this, this is wrong.
Okay.
Linux is a kernel.
You don't really want to get good with kernel.
All right.
Most of the programs you use in Linux, you can use it on FreeBSD.
Just because when I open the terminal and type NeoFetch, you think like, oh, Linux is so
cool.
This is stupid.
Okay.
Linux is not cool.
You don't even want to get into the kernel low level stuff.
Okay.
Not even the sys calls.
Sys calls are like the interface for, you know, doing some things within the kernel.
What you want to do is you just want to learn some tools and you also need to understand
the difference between tools and the concept.
Okay.
So what's the tools and what's the concept?
So tools are basically like a GPG is a tool and engine X is a tool.
And these are like the tools which are like for someone who understand computers.
Because if you open the man page of GPG, you're not going to understand a lot of things because
it's like encryption, it's like public key, private key, and what is the open PGP encryption?
So the thing is people who are trying to learn something without understanding the concept.
So these are like tools.
Okay.
So they are going to have a really hard time.
So understand the concept first.
All right.
So what is concept?
So for example, if you are understanding about public key, private key, encryption and stuff,
this is concept.
This is cool.
Okay.
How to overcome this?
If you don't like, should I go for learning concept first, understand what you want.
All right.
You don't want to get good with Linux.
Okay.
You want to, I don't know what you want to do.
So concepts are like, for example, if you're learning about web server, how it works, then
it's concept.
Or if you are learning about encryption, encryption, that's concept.
One more example, like it's not just restricted for the user.
It's also for the programmers.
So for example, if I open my file for Centipython.org.
So the thing is Python, it's just a tool.
People just don't, people who learn most fire, you know, like normies.
So they really don't really see it as a tool.
So here's my tips.
Okay.
These, these tips are not something which you really want to do, but you can do first
thing every time.
If you want to learn something, just the first thing you should do is you should try to find
a source code.
Okay.
Source code, Python.
All right.
This is very important because most people end up using tools for like years.
They don't even see the repo.
Okay.
I think, you know, this is a very bad thing.
You should always see the source code repo.
It's important.
All right.
So this is the source code repo of Python.
And as you can see, it's a huge program.
And this is created for programmers.
Notice this.
Okay.
So if you open the documentation of Python, now you wait a second, let's just wait a
second.
All right.
So you open the source code.
All right.
Now, the second thing, which I would recommend you is install the program by compiling it
and not by package manager.
Now, I know, I know.
Some people are like, no, this is not good.
Like as a new user, they are going to, you know, have a hard time.
Just read what are the needs of the program, like what are the system requirements and
just try to compile it.
If you don't know what compiling is, everything then just go back to your computer science
class.
You, you're like, this is not good.
Just understand how computers work.
That's it.
That's the concept in.
So in order to compile, as you can see, make is a tool.
Everything is a tool.
Sudo is a tool.
Every programs which are on CLI mostly comes with a configuration file.
Even the GUI have configuration file in the back end, but it doesn't matter when you really
build your program, it gives you the mindset.
That's, that's why I'm saying this.
I'm not saying it's very important.
You can install by package manager, but let me tell you, in the old days, there were no
package manager.
People were installing things with manually like, and this gives them better understanding,
which most newbies don't get.
So after installing things from the source code, like compiling properly and not just
like, you know, just getting the binaries and just run it.
So you get a little bit better understanding now, every tool, okay?
So Python is even, you know, Python is also a tool.
Okay.
Most people are like, oh, it's a programming language.
Yeah.
I mean, yeah, but it's also a tool.
So docs.python.org, this is something which is for everything.
So Python is a very big programming language.
There are like a lot of docs, but even for a simple program, we have like man pages.
Okay.
So for example, Alice is a tool and it comes with a man page.
In order to use tools, you don't really have to memorize anything.
You just have to read the docs, read the docs.
And after reading the docs, you, you know everything.
But again, why people have bad time reading the docs?
Because for example, if you want to learn about how to do multiprocessing in Python
and you don't know multiprocessing, then you're obviously going to have like a hard time.
Okay.
If you don't know what a four case or OS dot four case, okay, it's linking you.
But basically, if you're jumping the tools without even understanding like what this
tool is for and how it do something like, like you can read.
How the tool is working.
But if you don't know what's the purpose of the tool, then this is the problem.
Understand the thing first.
So reading, reading the doc is all you need to do.
All right.
Tools using tools are not very hard.
So here's the problem.
Okay.
People who want to learn about engine X, what they do is they open YouTube and they search
video like how to set up web server, you know, how to set up web server engine X.
And this is the, oh my God, I can't see.
You go on a Jureka and then you are like, they don't explain you anything.
They don't.
Okay.
They are trying to explain, but this is a bad way of understanding.
All right.
So you don't want to learn about engine engine X architecture from this because they have
this, they have this proper documentation in there.
And if you understand the concept, it's not going to be hard.
You can understand really nicely.
Okay.
This is not docs.
And here's the thing.
So for example, engine next door, oh, now you must be wondering what is what an engine
X is.
Well, it's just a web server, I think it's like a proxy and do multiple things.
So everything is a tool.
Every tool is like have configuration and you can compile it yourself, try to find a source
code repo.
This will help and everything comes with configuration read the docs, what, what setting to what,
how to configure it.
Some tools are tough because it's created for, you know, technicians or somebody who
already they expect you, you already know, for example, engine X male IMAP module, you
don't know what IMAP is, you don't know what male is, you're like, if you don't know what
IMAP protocol is, you're obviously going to have a hard time understanding this module.
Okay.
So for example, post fix is something, it's a tool.
All right.
Just get this mindset.
Okay.
It's just a tool.
And this tools come with a lot of configuration actually, I ran it in my server and you just
have to read the docs and understand what feature do what and if you understand the tool,
like why you're using a tool, you also can predict this feature must be in this tool.
All right.
You can predict it by yourself, for example, if I'm using LS, so I can predict there must
be some feature to, you know, assorted according to name or size or something.
All right.
So you want to learn tools, basically, but tools are something which you don't want
to memorize it.
You can read the docs and practice tools need practicing.
Okay.
Concept needs understanding, practicing concept needs understanding, understanding, this is
very important.
All right.
You need to have a really good understanding of concept.
And you need to do really good practicing of tools.
All right.
So how to get started, this is the question now, don't use tools which are more tech related,
use some simple tools in Linux, for example, Newspot, Newspot is just a simple tool for
basically reading RSS feeds knife in case you don't know what RSS feed then first, okay,
this is just an example, like, or something more simple, like just LS or CD some basic
commands.
All right.
So just use the tools which are pretty simple and not so, you know, heavy, not so also use
minimal tools.
Okay.
This, this will also help, right.
So because if the tools are tool is minimal, then there are less features, less talks,
everything is less.
It becomes more easy and then understand if you want to understand Linux.
So basically, one more thing, okay, let's, let's let me add one more thing in the concepts
and the concept is cool.
But sometimes in the tools, there are concept.
What is that?
What is that?
So basically, it's how the tool is working.
For example, get I was learning a lot about gate.
Okay.
So most people will learn gate.
Okay.
But let me show you some get report.
Let's do this.
Not this.
I think I removed.
So most people learn about gates.
So for example, this repo.
So what they don't do is they don't understand how it is working.
They don't understand that this dot get directly what it do and what like, you know, they just
try to memorize some commands like get in it and you know, get, they don't see the configuration.
They don't even open the get man page.
All right.
They, they don't read docs.
They just go for some shitty videos.
So they don't even see that where the configuration files happen, like where it exists, they don't
see all these environment variables, which you can set for some for the functionality,
you know, so try to do these kinds of stuff.
So get is like a huge tool.
For example, configuration mechanism, it's written here, but you know, most people don't
do these kinds of stuff.
Everything is a tool.
This shell is a tool like this.
The shell is a tool.
Okay.
Yeah.
Shell is a tool and the prompt is a tool.
The command line is a tool.
This new fetch is a tool.
Every tools come with configuration.
It runs as a daemon or it runs like, see if you're running a mail program and you're constantly
reading for males, then like waiting for males, then it has to run as a demon and tools can
be interrupted.
You can send some interruptions signals.
You can stop tools.
Every tool run as a process.
All right.
And multiple process sometimes you can grab it, you can just stop it.
Python is a tool.
Okay.
Everything is a tool.
You can read the docs.
And if you don't understand in something in the dog, then your concepts are weak basically.
Okay.
Or, or sometimes what happened is, for example, if you're reading the documentation for pass,
all right.
So it says like keys, GPG keys.
Now you don't know what GPG is.
That's the problem.
This is also a problem.
So this DWM is a tool to go find a source code to just understand also one big thing.
Read the history of the tool.
Okay.
Why I say, okay.
At this point, so many left the video, but you're lucky.
All right.
Read the history of the tool.
It just get emotional about the tool.
For example, I'm very emotional about some tools.
Like I really love those tools.
Right.
Some big programs, some big programs, but the thing is when you read the history, it's
really entertaining.
And one more tip I want to give, don't watch YouTube videos, but sometimes to understand
concept, you can watch some like a Ben Eater video on networking.
Okay.
It really helped me.
So I'm not saying all videos are trash.
I'm just saying this culture, like net ninja, like, like net ninja, tourists are trash.
Okay.
Tutorials.
I make tutorials and tutorials are crash.
Like for example, net ninja, he, he makes really good tutorials, but these are trash.
He sometimes he, uh, you know, explain the concept, but you don't really need it.
In the end of the day, you, you know, two tutorials are like very limited and you can't
just get, like get that skill of reading docs from watching tutorials.
All right.
So one thing you always, uh, should do.
So I was learning a lot about free BST operating system.
I was reading the docs, but I listened to, uh, you know, talks, always listen to docs.
So every time I start with something new, so I was learning about web RTC, uh, which
is a Google feature.
So I literally listened to the talk by Google because these guys, like when they do talks,
they, they represent very nicely.
They explain very nicely and it, it's entertaining because you see some serious developer talking
about their project.
So for example, if you just listen to this previously talk, so she starts with a history.
So she tells like how this project started and you, you know what, if you like some tools,
just be a maintainer, like just contribute if you are using free software and stuff.
Okay.
So just find some books and reported and do the same, but all, all I'm saying is get this
mindset of tools.
All right.
So for example, Linux, if you read the history, you'll understand that you don't really want
to learn Linux.
You want to learn mostly GNU, you tell stats, what you want.
So if you want to learn all this, then, you know, uh, just don't use, uh, tools like,
um, okay.
To be honest, when somebody say Linux, it's really confusing what they want because most
of the time it is confusing.
But if you see it correctly, mostly you want to understand how this is working inside, not
the entire kernel part, but at least like how Linux may manage processes or, you know,
some basic stuff.
Like for example, okay, it's really hard to explain that I, at this point, I just lost
you.
So all I'm saying is that read the history.
If you read the history, you get better understanding of the project.
Like, don't, don't be like a history.
This doesn't make sense, but no, it, it makes sense.
So when you read the history, you'll realize that there is GNU, you know, utilities and
uh, you, you, you get like better connection with the program and practice those tools.
That's same.
That's a, it's a very bad rent.
I think it's a very, very bad video, but I'm just trying to explain.
Okay.
I don't really want you to make this video, but you know, I just wanted to make some normal
tutorials like video, but fine.
Okay.
One video is fine.
