Hello, I'm Aaron Zimmerman. In this video, I'm going to show you how to make web applications
that are full screen SVG components. An SVG stands for Scalable Vector Graphic. So we're
going to be making graphical applications that could either be video games or visualizations
of data. Before we begin, I want to show you how easy it is to run this code. And I suggest
you run this code yourself just in case this video is out of date or something. It'll be super
simple. All you have to do is look at the video description of this video and follow this link
elm-lang.org slash try. And I've left a comment on this video. That's the source code. If you just
copy the source code to the text area of the elm-lang.org slash try, and then click this
button, the rebuild button at the bottom right of the text area. And this is what we're going to
make today. So this is just a template that's a frame for future applications. It fills the screen
and it resizes as you as the user changes the size of the screen. And we're going to be programming
in the elm programming language. So if we refresh this page, the elm-lang.org slash try, we can look
at a couple of examples that they've provided, like the hello world. Hello world is just a static
HTML web page. All it is is this main function with a text element that says hello exclamation mark.
So every elm application requires this main function in order to work. Then the next example
is buttons. Buttons are the first usage of the dynamic HTML. It includes the init function,
an update function, and a view function. init is called like initialize to initialize the program.
Then update is called every single time. There's a message to change the structure of the program
internally. And then the view function views whatever is the internal model of the program.
And so what the main function was last time is now a lot like what view is this time.
Then in the clock example, and this is what we're going to begin with,
it also includes it has the same init view and update functions, but it also has subscriptions.
So in this case, the clock example subscribes to time. So anytime time changes,
the subscription initiates an update call with the new time, then the update function
changes the internal structure of the program called the model. And then once the model updates,
the view function is called with that new model. And then we get a change in the view.
The initialization function is also a bit different. It has the initial model.
And then it also has a command. You can perform commands at the start of the program.
And we'll talk more about that in a moment. So to start off, let's just use this clock example
and kind of clear it out. So there's pretty much nothing there. So first of all,
let's take this command and change it to cmd.none. For the model, let's just remove these values.
So it's just an empty model. We both need to remove those values in the initialization function
and in the type alias model. This defines the type alias defines what is in the model.
So we'll just clear that out. So it's just these open and close squiggle parentheses.
Then for the messages, each time the update function is called, there's a message sent to it
and the previous model. And so for our messages, let's just make up an empty one and we'll call it no op.
This is syntax that you can see here in the update function. That's called pattern recognition.
So it goes through it. The syntax is case msg. That's the func the variable name
of that is being pattern matched. And so it's case message of and then these are each of the types
of messages. And then the result of the pattern matching has to be a lot like the initialization
function, where it's the next model that comes after the update is done. And then what following
command will be called. And oftentimes you don't need any kind of follow up command. So you can
just use cmd dot none. And so we're just going to make this only for our no op message. And it'll
just make no change to the model. So it'll just be model at comma cmd dot none. And these open
parentheses and close parentheses, it makes this a tuple. And the tuple is delimited by the commas.
So the first value of the tuple is the model. And the second value is the command. Then we need to
make our subscriptions to none. And to do that, you can just call sub sub dot none.
So we're subscribed to nothing. Then in the view function to clear this out,
we can just remove these. This, this syntax is assigning variables. What you do is you say
you type let and then in. And within the let and in, you have your variables. This is the variable
name. And this is the contents of that variable. And then these variables are used in what's called
what's at comes after in. So in this case, the variable hour was used here. But we're just
going to clear this out. So you can actually just have nothing there. If there's no variables,
just remove the let and in. And then we're just going to make this empty. So what this is,
this is our SVG that I talked about earlier, the scalable vector graphic. Then we have a list
of attributes. The first attribute is this view box. And then each attribute is delimited by a comma.
And so then we have our width attribute and our height attribute. And what comes after that is
this list of what's within the scalable vector. And so the last thing we have to do to clear out
the clock example is to just remove this function. There's another there's a function that we no
longer need. So we'll just erase that. And then to make sure it runs, we'll just press this rebuild
button. And all and so it's completely empty. So all we're looking for is this check mark and
success. So it's just completely empty at this point. And this would be a good point to select
all of your tech, all of your this program. And this is just a good example of an empty program.
So we'll we'll just save this to a text file, copy paste it to a text file, and save that as a
template for an empty program for your future use. Now that the example is cleared out and we have
our empty program example, let's start adding our own initialization and our own model definition.
So we definitely want to store the width and height of the window. So let's add to our model
type alias. So this is called a record, the open squiggle brackets and close squiggle brackets
makes it what Elm calls a record. And records have attributes. And so in this case, we'll add an
attribute named w for width. And then it's a type float, which has to have this colon in between it.
And then you list out all of the attributes in the record. And so this is an alias, not an actual
assignment of the values. And so if we had more values, we would just list them all off like that
with a comma in between each one. And so we just need width and height this time. And then we need
to update our initialization function. So let's let's assign some default width and default height.
Default width equals let's just use really small values because I have this window magnified in my
browser with with the plus the control plus arrows. See, I have it at 175% just so that this text is a
lot bigger. So actually 256 by 128 is actually quite large. So those are their default width and height.
And we should be able to compile this without any problem. So you should be recompiling over
and over again anytime you take a little step, try to compile and see that it's successful as
often as you can. So we have our default width and height and they're assigned. Now let's use
those width and heights in the view function. So this view box attribute is one that I typically
find myself forgetting the values that are in here. See these numbers, there's four numbers,
it's the minimum x value, the minimum y value, the internal width of the SVG and the internal height.
So I'm just going to add a comment comments start with this dash dash. And then from the right of
that dash dash is the comment and that can just be anything it's just a text description of what
is going on in the program. So the view box parameters are and then I'll just add some more
comments view it's the minimum x value, minimum y value, width and height.
And so let's use the model in order because okay so before we just said we said that the model
is a record because of these squiggle brackets that makes it a record and it has these attributes.
So in order to access the values at the given at a given time we have to use
model dot width or model dot w and model dot height. And so I'm just going to make an error
right now just to show you what will occur because this is what I want to do these plus plus signs
make mean they mean append so we want to append the model width to this string
then we need a space in between each value so we'll append a space and then we'll append
the model dot height value in order to make this svg element those given width and height values.
So when I hit rebuild I'll get an error and so let's read what the error message says I thought it
was appending string values here not float values like this and so this model dot h is what's
considered a float value a float is like a floating point decimal value not a string
not a string of text so what the then the message says try using string dot float to turn it into a
string so what we can do is go string dot float and the way this compiles is it'll be
string dot float and then space the value so model gets up from oh this is actually from float
so from float is a function that's receiving model dot w and then these
plus plus signs are used after this is assigned after the function is called and we're still
going to get another problem because I cannot find a string dot float variable so this oh oops I
spelled it wrong sting not there we go okay so the plus plus operator cannot append this type of
value so this function is called before these plus plus append operators so so this is a function
called then this one is called and then it's appended to the previous value but this isn't the
right value this is a an attribute it the this function call receives a string and then it
results in an attribute so we need this string we can just put this all into parentheses so it's
just like in math if you put the parentheses around it the stuff in the parentheses is called first
so we'll just make sure this string is is completed and then given to the view box function which
results in an svg attribute in here it just says attribute but more specifically it's a svg
capital s lowercase vg dot attribute and so so that's what this svg element is getting
and so now we got our checkbox and success so now let's do the same thing to these width
and height attributes and i'm just going to make the same mistake again so you can see
we need those parentheses there see there is no parentheses so we got this error message
the first argument to height is not what i expected this is a function itself so this is
like a height function that's receiving as a parameter another function so in this case that's
not what we want so we're just going to need to we're just going to need to put these in parentheses
and then rebuild once again and we'll just have our success we can't really see what's going on but
it looks good it looks like it succeeded all right so we've programmed quite a bit and we still
haven't seen anything yet so now i suggest we start to design what goes within this svg element
and we'll just make a kind of a frame for our future applications to go into
so this in the view function we are assigning or we're returning this svg element first we
have this list of attributes within the square brackets then the second set of square brackets
is what what svg elements go within the svg element
so first let's let's make a rect the the rect is something that can go inside the svg
uh if we go to package dot elm slash package dot elm dash lang dot org we can look for the library
svg and then here it is and within this we can figure out what kinds of things might go inside
an svg so here's a an example rect and here's an example an example circle so let's just copy
and paste this rect into our code rect stands for is short for rectangle so let's just see
that there it is okay a black rectangle and some attributes you might want to use are this x value
or in other words x is the left most part of the rectangle y is the top most part of the rectangle
and then width and height of the rectangle these attributes rx and yx make this rectangle that we're
seeing here rounded so if i just assign that to zero you can see that none of them are rounded
and so both rx and ry need to be 15 let's just try to make an eight and a 15 and eight see that so
so when it's ry that's the roundedness from the left and the right and then rx is that
roundedness from the top and the bottom of the corners so we're going to use 15 i guess
and let's make this fill the width that we have stored in our model the width and height of our
model so the x and y will just be zero because we want to fill it up then we will use the same
string dot from float model dot width and svg elements they can accept like floating point
values or integers it just needs to be converted to a string before you give it the width and the
height or the x values so almost everywhere they could either be integers or like decimal values
yeah see so this is how big the model is it doesn't fill the screen at this time
we gave it this default width and height of 256 and 128 earlier so that's just the set size of it
it just won't change and this is actually a lot larger than 256 and 128 on my screen because i'm
using a zoomed in this is the default size that you'll see when you browse and then i've gone
control plus control plus to 175 percent and i kind of prefer that because the text is really big
i actually have perfectly fine eyesight i just i don't know i just honestly prefer to see big text
and also i think it'll be a lot easier for you to view you don't have to
if i had this at zero you'll have to view this video at full screen but with at since i have it at
175 percent you can just keep it you know full screen or not whatever you want
and so uh so this is it filling the screen let's let's make sure it's actually filling the screen
and not just like kind of looking like maybe it is i'll i'll make the width plus five
and then we should see it cut off see how it gets cut off on the right because i made the width to
big so that is definitely going to the edge for the width and let's also do the same for the height
just to just a double check that it's actually filling it up see and so it's all squared off
there so that is definitely the height that we've given it it's not the height of the screen but
it's the height of the svg element svg container next we need to set the size of our svg oh yeah one
other thing i wanted to include is that you can change the the color in order to change the color
it's a fill attribute and so let's make it i don't like how strong this black is let's just
make it a little bit brighter just just like almost black 50 50 50 is what i see it's just a bit less
harsh and um and so yeah all of these attributes they come from when we at the very top of the file
there's these import lines and so all these attributes are coming from svg dot attributes
and because we called expose or we we added this exposing dot dot and that was just from the
clock example we don't have to add svg dot attributes at the beginning of everything
if we didn't have this exposing parameter or exposing suffix or whatever that is see we'll
get a bunch of errors because we don't have the fully spelled out version so without that you would
have to have this whole thing before every single one of these you have to go like that
actually that is not quite right like you have to go like that for every attribute
so yeah that that's a lot of extra typing so so these exposing
tags are are a good way of shortening the text okay so moving on let's uh let's make sure that
at least at the start of the program this width and height will be correct and so to do that we
have to call a command in our initialization function remember the initializer initializes
the first model then we have an option of sending out a command and we just did a command dot none
which means no command so what we want to do is call browser dot dom dot get viewport
so to get access to that function we're going to have to import browser dot dom dot get viewport
or no we don't have to just like that and so i'm not going to use this exposing
because we only have a couple of things that we went from that browser dot dom thing so
it's nice to just be a bit more specific but if you're just specific every single time all over
the place it'll just get a bit tedious so if we go to the packages like we did before package
the url is package dot elm dash lang dot org we can find all of the browser library elements
and so we're just making a a command that's a query so let's let's just talk about commands
for a bit before we do this commands can be a lot of different things some examples of commands
are querying the width height and location of different elements on the screen so there's queries
you can ask for a random number when you're generating random numbers those have to be
generated through a command then that command will result in a message that goes to your update
function and that and your update function will get receive that random number what else is there
you could request what time it is at the given time at the time that the command is called
you can request HTTP elements and so that's requesting like a database if there's um
you might want to make some database changes but that's a that's a pretty advanced thing so that
those are a couple of examples of things that you might make commands for
so going back to this browser dot dom dot get viewport a viewport is this right here
it contains both the scene width and height and the viewport which is an x and y value and the
width and height of like what's being displayed in the browser at that given time there's also a
set viewport command so you can do like automated scrolling if you want in your application
like if you click or make some kind of change it might want to you might want your program to like
scroll to where that change occurred so this is what the viewport is in elm so this is a record
like we saw before and these elements or these uh attributes of the record are themselves uh records
also so we want to get the viewport the at the viewport attribute of the viewport and we want
to get the width and the height in there so so we'll use this get that's the set viewport
i'll just do a search get viewport
there it is get viewport so get viewport is this the data type of the get viewport
it's actually not a command i said it was a command but actually it's a task
and so tasks if we go to our packages let's go to the core packages and we can see right here
these are what's imported into all elm files automatically
and so task is not part of this list we're going to have to include import task and i think that it
yet we've already imported task there at the top of our code and so in this library task
in order to turn a task into a command you either need to use perform task dot perform
or task dot attempt a task dot perform is for tasks that never fail some tasks are guaranteed
to succeed so you can just call perform and you can tell that because the data type is task space
never so for the error type it's a never type so it just won't ever occur and then a is the result
of that task and then for the task dot attempt function it has a task x so x is the variable
type that could be like any kind of variable and then the result is a and that's just again a variable
name that could be any kind of data type so it's so we're going to be using attempt because
in browser we saw that this data type is a task x and it results in a viewport data type
so this is one of the ones that requires an attempt command so let's go to our initialization
this is the first command we call it'll be a task dot attempt then
the next so it's it requires this that's a function as a parameter so we need to make a
parameter that accepts the result result is a data type that can either be an x value if it's
an error and in and the an a value if it was an okay result and so and that and this is so this
is a function and it results in a message message is one of these things that we said is a no op
that gets sent sent to the update function so let's just make a new
new let's just make a new function and we'll call it get size from viewport and it's receiving
a result so we'll make the variable type that it receives called result of viewport
and so we have to use result is one of is a lot like it requires pattern matching like we used
on this message see how the case message of and then each of the possible result like values of
the message is matched with this syntax here so we'll just copy this kind of syntax
in our get size from viewport case result viewport of error so this is the two patterns it can either
be an error er or it can be an okay and then this will be our viewport so if it's an error
let's just okay first let's make a message this the the result of this to get size from viewport
needs to be a message like we saw in see this is what the function needs to be result and then it has
to result in a message so let's make the message for that be get size from viewport and these
messages need to start with capitals and that's a requirement and these functions need to start
with lowercase that's how we determine like all variable names and functions and stuff like that
are all starting with lowercase and all classes or types are starting with uppercase so even
though this is spelled the same except uppercase and lowercase capitalized and not capitalized
that's the that's the difference so it results in a from viewport message and let's just use those
default if it's an error we'll just use the default width and default height
otherwise we have this viewport function so let's go back to this browser the result the okay value
of the result is a viewport because it's task x is what we got for the error then we got this
viewport value and like we I said earlier the viewport is a record so we need to
get the viewport out of there out get the it's a viewport attribute of the viewport
and then we need the width and the height width so it's viewport viewport width and viewport viewport
height and we still haven't finished this initialization command it's um so it's task dot attempt
then we need our get size from viewport function so a function is being used as a parameter here
and then the then here is the task what's the task the task is that browser dot dom dot get viewport
and so now we I didn't update the update function so this is get size
from viewport oh yeah something I forgot to say is that when we make messages that receive
data you just in this type message we just go the name of the type of message and then
the val type value the data types that it receives so we can just go float space float
and and so that's that's valid that's just saying it receives two floats
and when we do our pattern matching then we can decide what variable names we want to assign to
each of those floats so those floats could be anything and we kind of have to know what they
are when we're pattern matching so we have get size from viewport width and height
then we just have to update the model in elm there's a really clever way of updating
data so instead of going what we could do and this is valid we could just completely
redefine model like we did in the initialization function in the initialization function we just
went model then each of the values to the model so let's just do that to show that it works
and so here it is it it initial once you open the browser it gets the correct width and height
but then it doesn't update as you change the width and height so we did succeed here
but uh elm has a really cool way of updating data if you put the
starting point you can update data from a starting point so if we start with model
and only change the width and only change the height
we can do something like that and if there happen to be
let's just compile this okay yeah so that's the the valid syntax that's um how we update
just a couple of values in that model so let's say the model had like some other data in it
something like that if that was in it and we use the syntax it would just retain
whichever other attributes were assigned there it'll just keep those and only update what's
in here and so the syntax is bar then the first attribute name and equals the value
and then from then on instead of bar we just use commas it would just look something like that
okay so now we have
oh yeah i i didn't uh there we go so now we have the svg updating based on
the initial size of the window so in order to get the svg to resize based on uh to constantly
change based on how the browser size is we have to subscribe to the event on resize so browser
also has first we did we made our query of the viewport size using browser dot dom but it also
has events and these are things that we can subscribe to subscriptions can be more like
ongoing values that we're kind of querying they're all quite quite a lot like a query
there can be the command what time is it but you could also make a command that says
time dot now and then how often you can get like a frame rate so if you wanted a frame 10 frames
a second for example you'd go time dot now space 100 that would be every 100 milliseconds there's
a thousand milliseconds in a second so 100 would be 10 times a second and so that would be you'd
make a subscription if you wanted like an animation you can also subscribe to
um to certain browser events let's like for example on on key presses or if the user clicked anywhere
on the screen and things like that in this case we want to see on mouse moves mouse movement and
mouse clicking and we want to see on resize so that's uh it's um browser dot event dot on resize
and so that's uh subscriptions are a lot like commands except they aren't really tasks that
hold tasks that perform an attempt thing we don't need to worry about that it's just this on resize
and then a function to convert the results of the subscription into a message
and then we just need to have those within our subscription function so it was browser
dot events dot on resize and then we have to make a function that's a little bit different
from our previous uh subscription so let's just call it set side instead of get size let's just
call it set size on from viewport okay and then so we'll have to define that here and so that's
all we need for our subscription that's done uh set size from viewport and it just receives the
width and the height so we can uh make the message that goes to our update function set size from
viewport is the name of the function or the message and then just send it width and height
and so now we're going to get this error because the data types are wrong set size
cannot find set size from viewport oh i meant for this function this message let's let's make it
a set size message
that makes a bit more sense in my mind
cannot find browser dot events dot on resize so we must have not imported it
yeah and that's so that events
and again we won't expose the internal variables in there because we just want to use that a couple
of times and so this subscription gives integers for the width and the height
so we need to convert those integers into floats so a good place to look for that kind of thing is
in the basics if we go back to this package dot elm dash lang dot org we can go to the core packages
that come with elm again these are the ones that come that are imported by default and so in basics
there's a lot of things like that we can go to the section integers to floats or floats to integers
so it's just a this function here to float there's also like rounding you can get your floats to
integers with round floor ceiling there's lots of math functions in here like power absolute value
square root cosine sine tangent things like that so we need um so that was in the the core packages
basics and so we're just going to use to float integer to float
on these width and height to float and those need to be within parentheses so
we aren't passing functions to as parameters in this case we want those functions to execute
before passing them and there we have it this uh this is now updating based on
current um window size changes and so one thing that and this is a bit of a short coming to this
template and i have no idea how to get around this but you kind of need to make the height
five pixels less it's because the viewport includes the width and the height of those scroll scroll bars
on the bottom left and the bottom right so you need to make the height slightly smaller it turns out
and so i don't know how to get around that i've done a couple of different things like
i've set the size of the svg based on a div element that fits to the window correctly
and that didn't seem to work and uh but you know what this honestly i don't think is too too bad
because um let's just design this a little bit more and and we'll see it's not too bad
so this rectangle let's have this inset a little bit so it's more of like a frame
we'll inset it by 10 pixels and that means its width needs to be 20 pixels smaller because it's
it's 10 pixels on the left and 10 pixels on the right and the height also needs to be 10 pixel
or 20 pixels smaller so now that's inset there's it has a bit of a margin to it
and we'll make another rectangle and that's the background for our app
and let's make the fill color of the background of the app light blue we can either use these
rgb functions and like i said the a lot of times when there's a number the rgb takes
three numbers red green and blue those can be integer values from zero to 255
and like i said earlier they lots of these values can be decimals and that's also true for
the rgb values but fill colors can also be text about text uh named colors you can just name
like red green blue purple violet orange there's a whole bunch of um html colors
and so this is um this is just the list of values so we can just put rectangles after
rectangles and they all need to be separated by commas and let's make this one another 10 pixels
inset
so that looks pretty good uh let's the the roundedness on this is too much for the internal so
this need the internal background can be less rounded so that it looks you know almost i'm
kind of thinking this is almost looking like um a tablet or something so now that we have the design
of the frame figured out let's talk about that shortcoming i had to insert a minus five pixels
before each of uh the command and the subscription because without those it fills up past the edge
of the screen and uh and and can sometimes result in uh like scroll these scroll bars
we're trying to get it to fill the screen not be five pixels too big and so uh uh if you try it
this out with different browsers sometimes it'll be okay and sometimes not the reason why it's like
that is because when you query what the viewport size is it includes those spaces underneath
the scroll bar on the right and on the bottom and so we don't really want that value that's
kind of like um i think that's kind of a in my opinion it's kind of like a bug and it's
handed down from javascript because even if you're programming in javascript you'll have the same
error you can google for like how to make an svg element fill a screen without scaling and um
and a lot of people will have the same error same challenge
but i think it's not too bad if we look at this now that it's designed
now that it's designed we'll see that there's just a little bit of extra white space at the bottom
what we really need is symmetry from left and right on the left we have 10 pixels of an outer
margin 10 pixels of a black frame and then we'll also have a like a five pixel inner margin in this
light blue background and it's the same on the left and the right and and we aren't displaying
again we aren't displaying uh 10 pixels here because i zoomed in so that's 10 pixels but
i'll just zoom back into 175 percent and so for the top and the bottom to be asymmetrical
that's not that big of a deal because you'll probably make the you might even want to make
the height of the svg like a hundred pixels shorter so you can add like an html title
to above it and in that case the top and the bottom will be asymmetrical so i honestly i don't find it
too um it doesn't upset the design too much and uh and it's the best i can figure out how to do
because you can get full screen div elements by making uh you can do some css um that's the
style of the html and go make the html element 100 percent then make the body style also height
100 percent and then make a div element inside the body that's 100 percent and then put your svg
in there and try to get the svg to match that height and you'll find you'll have the same issue
and so i'm not too sure how to get around that a lot of web designers say you shouldn't try to
make your web page stretch to fit whatever browser they see there should be either breakpoints so
you'll have like a small web page design for like cell phones then a big web page design for
full monitors and stuff and so i kind of um i'm a bit disappointed that in that i would like to
have my display stretched to it so i'm willing to throw caution in the wind and i feel like
this is probably all i need to do just add five pixels to the bottom of the screen and it's and
it's good to go and so this isn't too complicated it's just subtracting five pixels from the bottom
of the screen each time but let's go a step further and make it convenient so that when we're developing
we don't need to think about those frames on the left right top and bottom
let's move the origin into the light blue background right now the origin is at the top
left of the screen zero zero is the top left and then x increases as we go right and y increases as
we go down but let's move that zero zero to five pixels within the blue background so that there's
just a little bit of inner margin as well so first of all we want to change our model so when
we're updating the model width and height we'll subtract out those frames and then we have to
add those back in when we're drawing that we'll have to add that width and height back in when we
view the frame so we'll just go minus 50 pixels the reason i'm set choosing 50 pixels is because
it's 10 pixels of outer frame on the left there's 10 pixels of outer frame 10 pixels of the black
frame and then we want to do an inner margin of five pixels and so that adds up to 25 pixels on
the left 25 pixels on the right and the same for the top and the bottom but we also have those
additional five pixels because of because that's how browsers are so we can just decrease the width
and the height by 50 more pixels and let's see how that looks so it'll just be 50 pixels inset
now let's undo that width and at this point it's just going to be stretching it'll be scaling
the width and height and in this case we're going to ignore those five pixels we subtract it off
because that's a bit of an error pixels and so here we have our width and height back in
and so if we look at our view box
the view box the actual parameters for the view box are again the these two zeros are min x value
and min y value so to bring that origin in a bit we will make the leftmost x value
those that 15 pixels negative so to to get to the very edge of the screen outside of the frame
you would have to use negative 15 and to get to the very top you would use negative 15 and so this
going to move our frame off the screen a little bit
and so the let's move it back so the x is now negative 15 and the y is now negative 15 as well
for the black border
oh no these are negative oh yeah the the leftmost is 25 negative 25 for the
minimum x value because it's it's five for the margin so that's five 10 for the black frame
that's 15 and then 10 more for the outer margin so negative 25 there we go
and then for the inner blue background that will just be negative five because we just
want an inner margin of five pixels and now the width doesn't look quite right
okay so I had to think about that for a couple of seconds there uh yeah what I have forgotten is
the uh width and height given to the view box that is about how many like pixel divisions
is within that sbg area so I need to add those as well so what I mean by pixel divisions
is uh so the width and the height is the actual size of the element and these pixel
divisions can stretch the svg so whatever if I just like change this value it'll stretch it
so that the ratio is kind of off like it's now um how many uh picks how many it's not even pixel
values they're called point values how many point values is in that space so if you have like
way more point values vertically than you have horizontally then it'll squish your svg elements
so we need those to match up because we're hoping for it to be pixel related so the the
width of the svg and the height of the svg is the same as the number of point values in the width
and the number of point values in the height so these values need to all match up and now this
these frames are matching the width and the height that the model has and so we want to stretch
these back out to be outside of the model so this one goes to negative 15 outside of the origin
negative and negative so they'll be both on the left and the right so we're actually going to add
outside of the model 30 two times like because it's left and the right so two times that
will be 30 this should make the black frame fill up to the edges and then this internal
blue back light blue black background goes to negative five to five outside of the width
and height so that's times two is 10
and it's it's plus out it's going larger than the model and so now this is all
um the the um svg element is now scaled in such a way that when we try to draw elements
zero zero will now be at the top left of that internal background and so that'll just make
things convenient like if we want to make let's just make a circle let's just circle the origin
and circles don't use x and y they use cx and cy and we'll put and so that's the center x and
center y and they also use the attribute r for radius and so let's make a 100 pixel in radius
circle and we'll color it green see so that's where the origin is okay that's way too big to see
see it's circling that that's where the origin is let's make it more even smaller
and we can use fill that fills the circle or we can use stroke
and we'll we can also use stroke width to set how wide we want the stroke to be
and let's just make a one pixel in stroke and in order to get rid of that fill because it's now
being filled with black by default we can go fill none and so now we're circling that origin
so that's where the origin is and then if we bring that to the
model
dot width
to make another one see that's where our origin and boundaries are
so this will just be a lot more convenient when we're when we're making applications
and so now this is pretty much complete let's now again we will take this whole application
and copy it to a text file and save that on your computer for future use and like I said
at the beginning of the video I'll also post a link or I'll post this text as a post to this
YouTube video and and just to be tidy I'll also
add some documentation so this is all of this should be in a file called main dot elm inside
of your source directory once you start compiling these elements what you can do is install the elm
program and then go like create a folder then inside that folder in a command prompt you can
call a command elm init and then make a file in a source directory that is called source
main or it'll just be main dot elm and this file will also need a line at the very very top
the first line should be module space main and main needs to match the file name main dot elm
is a module main and exposing open parenthesis dot dot and dot dot means everything so if you
want to just like finalize this and make this an actual application this is this is your main file
and so I'll post this on this video as a comment and I'll pin that comment so you
can just copy it for yourself all right so I hope you enjoyed that even if you didn't follow along
I hope that you at least copied the text into the this file and ran it because that's super
easy I wanted to make this tutorial so you didn't have to install anything and didn't have to learn
how to use the command prompt or anything like that and so it's just super easy for you to use
for yourself and we'll be I'm going to keep on making some tutorial videos that builds off of this
for video games or data visualization in order to make this file we had to
start from the clock example clear the clock example out initialize the width and height
variables and declare them in our model then we had to design the SVG frame that's our black
black frame with the internal light blue background
then we made a command to query what the initial width and height is of the viewport and assign
those values to the model then we subscribed to any future changes to the browser width and height
and made those changes to the to the model and finally we moved the origin
into a more convenient location for future use so I hope you enjoyed watching that
we're going to be using this a lot more so until then thanks for watching to the end goodbye
